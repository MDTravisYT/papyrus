HIMOVE	=	2*2	;	anything above this errors

SETMOVE:
		MOVE.L	#MAP_PAPHEAD,	OBJ.MAP(A0)
		MOVE.W	#$200,		OBJ.TILE(A0)
		MOVE.B	#4,			OBJ.RENDERFLAGS(A0)
		MOVE.B	#2,			OBJ.PRIORITY(A0)

		MOVEQ	#0,	D0
		CMPI.B	#HIMOVE,	MOVENUM
		BEQ.W	MoveErr
		MOVE.B	MOVENUM,OBJ.ACTION(A0)
		MOVE.B	OBJ.ACTION(A0),	D0
		MOVE.W	@INDEX(PC,D0.W),	D1
		JMP		@INDEX(PC,D1.W)
		
	@INDEX:
		DC.W	Move1-@INDEX
		DC.W	Move2-@INDEX
		@INDEX_END:
		
	Move1:
	
		MOVEQ	#0,	D0
		MOVE.B	OBJ.SUBACTION(A0),	D0
		MOVE.W	@MV1_INDEX(PC,D0.W),	D1
		JMP		@MV1_INDEX(PC,D1.W)
		
		@MV1_INDEX:
			DC.W	@R1-@MV1_INDEX
			DC.W	@R2-@MV1_INDEX
		@R1:
			TEXTSETUP		$48140002,TXT_CHECK2,$A3,$180
			ADDI.B	#2,	OBJ.SUBACTION(A0)
		@R2:
			JSR		CHKABC
			beq.w	@end
			MOVE.B	#$A0,	D0
			JSR		PlaySound
			JSR		SPAWNSOUL
			LEA		BoneSpawn1,A1
			JSR		SpawnObjList
			STOPTXT
			COPYTILEMAP		BOARDMAP,	$8704,	35,	7
			rts
		@end:
			TST.W	TEXTPROG
			BEQ.S	@skip
			LEA		ANIM_PAPHEAD,	A1
			JSR		_OBJECTANIMATE
		@skip:
			JMP		_OBJECTDISPLAY

	Move2:
		BSET	#0,	BLUEMODE
		MOVEQ	#0,	D0
		MOVE.B	OBJ.SUBACTION(A0),	D0
		MOVE.W	@MV2_INDEX(PC,D0.W),	D1
		JMP		@MV2_INDEX(PC,D1.W)
		
		@MV2_INDEX:
			DC.W	@R1-@MV2_INDEX
			DC.W	@R2-@MV2_INDEX
		@R1:
			TEXTSETUP		$48140002,TST3,$A3,$180
			
			ADDI.B	#2,	OBJ.SUBACTION(A0)
		@R2:
			JSR		CHKABC
			beq.w	@end
			MOVE.B	#$A0,	D0
			JSR		PlaySound
			JSR		SPAWNSOUL
			LEA		BoneSpawn2,A1
			JSR		SpawnObjList
			STOPTXT
			COPYTILEMAP		BOARDMAP,	$8704,	35,	7
		@end:
			TST.W	TEXTPROG
			BEQ.S	@skip
			LEA		ANIM_PAPHEAD,	A1
			JSR		_OBJECTANIMATE
		@skip:
			JMP		_OBJECTDISPLAY
		
	MoveErr:
		MOVEQ	#0,	D0
		MOVE.B	OBJ.SUBACTION(A0),	D0
		MOVE.W	@MVERR_INDEX(PC,D0.W),	D1
		JMP		@MVERR_INDEX(PC,D1.W)
		
		@MVERR_INDEX:
			DC.W	@R1-@MVERR_INDEX
			DC.W	@R2-@MVERR_INDEX
		@R1:
			TEXTSETUP	$48080002,TXTERR,$A1,$100
			ADDI.B	#2,	OBJ.SUBACTION(A0)
		@R2:
			RTS
			
CHKABC:
		MOVEQ	#0,	D0
		MOVEQ	#0,	D1
		MOVE.B	JOYPADPRESS,	D0
		andi.b	#btnA+btnB+btnC,D0
		RTS
			
SPAWNSOUL:
		MOVE.B	#1,	OBJ.ID(A0)
		MOVE.W	#160,	OBJ.X(A0)
		MOVE.W	#140,	OBJ.Y(A0)
		MOVE.B	#0,		OBJ.ACTION(A0)
		MOVE.B	#0,		OBJ.FRAME(A0)
		MOVE.W	#0,		OBJ.YSPEED(A0)
		MOVE.W	#60*10,	TIMER
		RTS
			
SpawnObjList:	;	Expects input of a list into A1
		LEA		(OBJSLOT01),A2
	@loop:
		MOVE.B	(A1)+,OBJ.ID(A2)
		MOVE.B	(A1)+,OBJ.ARGUMENT(A2)
		MOVE.W	(A1)+,OBJ.X(A2)
		MOVE.W	(A1)+,OBJ.Y(A2)
		MOVE.W	(A1)+,OBJ.XSPEED(A2)
		CMPI.B	#$FF,(A1)
		BEQ.S	@ret
		LEA		OBJ.SIZE(A2),A2
		jmp		@loop
	@ret:
		rts
			
BoneSpawn1:
		OBJARRANGE	ID_BONE,0,250,164,0
		OBJARRANGE	ID_BONE,2,300,164,0
		OBJARRANGE	ID_BONE,4,350,164,0
		OBJARRANGE	ID_BONE,8+$80,500,164,0
		OBJARRANGE_END
		rts
			
BoneSpawn2:
		OBJARRANGE	ID_BONE,8+$80,200,164,0
		OBJARRANGE	ID_BONE,8+$80,200,164,1
		OBJARRANGE	ID_BONE,8+$80,200,164,2
		OBJARRANGE	ID_BONE,8+$80,200,164,3
		OBJARRANGE_END
		rts
			
ART_PAPHEAD:	INCBIN	"ART/PAPHEAD.UNC"
	ART_PAPHEAD_END:
MAP_PAPHEAD:	INCBIN	"SRC/OBJ/PAPHEAD.MAP"
ANIM_PAPHEAD:
		DC.W	@NORMAL-ANIM_PAPHEAD		;	0
		DC.W	@WACKY-ANIM_PAPHEAD         ;	1
		DC.W	@SWEAT-ANIM_PAPHEAD         ;	2
		DC.W	@COOL-ANIM_PAPHEAD          ;	3
		DC.W	@LAUGH-ANIM_PAPHEAD         ;	4
		DC.W	@MAD-ANIM_PAPHEAD           ;	5
		DC.W	@CRY-ANIM_PAPHEAD           ;	6
		DC.W	@EVIL-ANIM_PAPHEAD          ;	7
		DC.W	@DEJECTED-ANIM_PAPHEAD      ;	8
		DC.W	@SIDE-ANIM_PAPHEAD          ;	9
		
	@NORMAL:
		DC.B	3,0,1,-1
    @WACKY:
		DC.B	3,2,3,-1
    @SWEAT:
		DC.B	3,4,5,-1
    @COOL:
		DC.B	3,6,7,-1
    @LAUGH:
		DC.B	3,8,9,-1
    @MAD:
		DC.B	3,10,11,-1
    @CRY:
		DC.B	3,12,13,-1
    @EVIL:
		DC.B	3,14,15,-1
    @DEJECTED:
		DC.B	3,16,-1
    @SIDE:
		DC.B	3,17,18,-1