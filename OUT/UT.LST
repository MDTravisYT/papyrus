00000000                            		include		"Debugger.asm"
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ;
00000000                            ; (c) 2016-2023, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugger customization
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; Enable debugger extensions
00000000                            ; Pressing A/B/C on the exception screen can open other debuggers
00000000                            ; Pressing Start or unmapped button returns to the exception
00000000 =00000001                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON
00000000                            
00000000                            ; Debuggers mapped to pressing A/B/C on the exception screen
00000000                            ; Use 0 to disable button, use debugger's entry point otherwise.
00000000                            DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		Debugger_AddressRegisters	; display address register symbols
00000000                            DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		Debugger_Backtrace			; display exception backtrace
00000000 =00000000                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Creates assertions for debugging
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash!
00000000                            ;	assert.w	d5, eq			; d5 must be $0000!
00000000                            ;	assert.l	a1, hi, a0		; asert a1 > a0, or else crash!
00000000                            ;	assert.b	MemFlag, ne		; MemFlag must be non-zero!
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            assert	macro	src, cond, dest
00000000                            	; Assertions only work in DEBUG builds
00000000                            	if def(__DEBUG__)
00000000                            	if narg=3
00000000                            		cmp.\0	\dest, \src
00000000                            	else narg=2
00000000                            		tst.\0	\src
00000000                            	endc
00000000                            		b\cond\.s	@skip\@
00000000                            		RaiseError	"Assertion failed:%<endl>\src \cond \dest"
00000000                            	@skip\@:
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Raises an error with the given message
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	RaiseError	"Something is wrong"
00000000                            ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
00000000                            ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            	pea		*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		__global__ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			jsr		\console_program										; ... an aligned "jsr" instruction that calls console program itself
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            		endc
00000000                            	else
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)			; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            			even								; ... in case \opts argument is empty or skipped
00000000                            		endc
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Console interface
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	Console.Run	YourConsoleProgram
00000000                            ;	Console.Write "Hello "
00000000                            ;	Console.WriteLine "...world!"
00000000                            ;	Console.SetXY #1, #4
00000000                            ;	Console.WriteLine "Your data is %<.b d0>"
00000000                            ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            Console &
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__Console_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","run")|strcmp("\0","Run")
00000000                            		jsr		__global__ErrorHandler_ConsoleOnly
00000000                            		jsr		\1
00000000                            		bra.s	*
00000000                            	elseif strcmp("\0","clear")|strcmp("\0","Clear")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_ClearConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","pause")|strcmp("\0","Pause")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_PauseConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","sleep")|strcmp("\0","Sleep")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	d0, -(sp)
00000000                            		move.l	a0, -(sp)
00000000                            		move.w	\1, d0
00000000                            		subq.w	#1, d0
00000000                            		bcs.s	@sleep_done\@
00000000                            		@sleep_loop\@:
00000000                            			jsr		__global__VSync
00000000                            			dbf		d0, @sleep_loop\@
00000000                            	@sleep_done\@:
00000000                            		move.l	(sp)+, a0
00000000                            		move.w	(sp)+, d0
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","setxy")|strcmp("\0","SetXY")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		__global__Console_SetPosAsXY_Stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__Console_StartNewLine
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            KDebug &
00000000                            	if def(__DEBUG__)	; KDebug interface is only available in DEBUG builds
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__KDebug_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__KDebug_FlushLine
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","starttimer")|strcmp("\0","StartTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9FC0, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","endtimer")|strcmp("\0","EndTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9F00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakpoint")|strcmp("\0","BreakPoint")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9D00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""KDebug"""
00000000                            	endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		__global__ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even													; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController	; ... extensions controller
00000000                            		else
00000000                            			dc.b	\opts+0
00000000                            			even
00000000                            		endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	__stack:set		0						; size of actual stack
00000000                            	__sp:	set		0						; stack displacement
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            	__lpos:	set		1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	while (__pos)
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."    
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			
00000000                            			; Validate format setting ("param")
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			elseif strcmp("\__param","signed")
00000000                            				__param: substr ,,"hex+signed"	; if param is "signed", correct it to "hex+signed"
00000000                            			endc
00000000                            			if (\__param < $80)
00000000                            				inform	2,"Illegal operand format setting: ""\__param\"". Expected ""hex"", ""dec"", ""bin"", ""sym"", ""str"" or their derivatives."
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            		__lpos:	set		__endpos+1
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            		include		"SRC/SYSTEM/RAM.I"
00000000 =00A10000                  IO_PCBVER	    =	$A10000
00000000 =00A10001                  VERSION     	=	$A10001
00000000 =00A10002                  IO_CT1_DATA	    =	$A10002
00000000 =00A10003                  IODATA1     	=	$A10003
00000000 =00A10006                  IO_EXT_DATA	    =	$A10006
00000000 =00A10008                  IOCTRL1     	=	$A10008
00000000 =00A1000A                  IO_CT2_CTRL 	=	$A1000A
00000000 =00A1000C                  IOCTRL3     	=	$A1000C
00000000 =00A1000E                  IO_CT1_RX	    =	$A1000E
00000000 =00A10010                  IO_CT1_TX	    =	$A10010
00000000 =00A10012                  IO_CT1_SMODE	=	$A10012
00000000 =00A10014                  IO_CT2_RX	    =	$A10014
00000000 =00A10016                  IO_CT2_TX	    =	$A10016
00000000 =00A10018                  IO_CT2_SMODE	=	$A10018
00000000 =00A1001A                  IO_EXT_RX	    =	$A1001A
00000000 =00A1001C                  IO_EXT_TX	    =	$A1001C
00000000 =00A1001E                  IO_EXT_SMODE	=	$A1001E
00000000 =00A11100                  Z80BUS			=	$A11100
00000000 =00A14000                  SEGATMSS		=	$A14000
00000000                            
00000000 =00008000                  PLANE_A			=	$8000
00000000 =0000A000                  PLANE_B			=	$A000
00000000 =0000C000                  PLANE_W			=	$C000
00000000                            
00000000 =00C00000                  VDPDATA			=	$C00000
00000000 =00C00004                  VDPCTRL			=	$C00004
00000000 =40000000                  VRAMWRITE       =	$40000000
00000000 =40000010                  VSRAMWRITE      =	$40000010
00000000 =40000080                  VRAMDMA         =	$40000080
00000000 =40000090                  VSRAMDMA        =	$40000090
00000000 =C0000000                  CRAMWRITE       =	$C0000000
00000000 =C0000080                  CRAMDMA         =	$C0000080
00000000                            
00000000 =FFFFCC00                  HSCROLLTABLE	=	$FFFFCC00
00000000 =FFFFF600                  GAMEMODE		=	$FFFFF600
00000000 =FFFFF604                  JOYPAD			=	$FFFFF604
00000000 =FFFFF605                  JOYPADPRESS		=	$FFFFF605
00000000 =FFFFF606                  JOYPAD2			=	$FFFFF606
00000000 =FFFFF607                  JOYPAD2PRESS	=	$FFFFF607
00000000 =FFFFF60C                  VDPBUFFER		=	$FFFFF60C
00000000 =FFFFF614                  TIMER			=	$FFFFF614
00000000 =FFFFF616                  VDP_SCREENPOSY	=	$FFFFF616
00000000 =FFFFF61A                  VDP_SCREENPOSX	=	$FFFFF61A
00000000 =FFFFF632                  PALCYCCURRENT	=	$FFFFF632
00000000 =FFFFF634                  PALCYCTIMER		=	$FFFFF634
00000000 =FFFFF62A                  VBLANKCMD		=	$FFFFF62A
00000000 =FFFFF644                  VDPBUFFER2		=	$FFFFF644
00000000 =FFFFF648                  HBLANKFLAG		=	$FFFFF648
00000000 =FFFFF800                  SPRITETABLE		=	$FFFFF800
00000000 =FFFFFB00                  PALETTE			=	$FFFFFB00
00000000 =FFFFFE0C                  VBLANKCOUNTER	=	$FFFFFE0C
00000000 =FFFFFFF8                  HARDWAREVERSION	=	$FFFFFFF8
00000000 =FFFFFFF8                  HARDWAREVERSION	=	$FFFFFFF8
00000000                            		include		"SRC/SYSTEM/MACRO.I"
00000000                            ALIGN	MACRO
00000000                            		DCB.B (\1-(*%\1))%\1,0
00000000                            		ENDM
00000000                            		
00000000                            COPYTILEMAP		MACRO	source,loc,width,height
00000000                            		lea		(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr		DrawTileMap
00000000                            		endm
00000000                            		
00000000                            WRITEVRAM	MACRO	LOC
00000000                            		MOVE.L	#VRAMWRITE+((LOC&$3FFF)<<16)+((LOC&$C000)>>14),	(VDPCTRL)
00000000                            		ENDM
00000000                            		ENDM
00000000                            		include		"SRC/SYSTEM/HEADER.ASM"
00000000 00FF FE00                  		DC.L	$00FFFE00
00000004 0000 0000                  		DC.L	START
00000008 0000 0000                  		DC.L 	BusError		; Bus error
0000000C 0000 0000                  		DC.L 	AddressError	; Address error (4)
00000010 0000 0000                  		DC.L 	IllegalInstr	; Illegal instruction
00000014 0000 0000                  		DC.L 	ZeroDivide		; Division by zero
00000018 0000 0000                  		DC.L 	ChkInstr		; CHK exception
0000001C 0000 0000                  		DC.L 	TrapvInstr		; TRAPV exception (8)
00000020 0000 0000                  		DC.L 	PrivilegeViol	; Privilege violation
00000024 0000 0000                  		DC.L 	Trace			; TRACE exception
00000028 0000 0000                  		DC.L 	Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		DC.L 	Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		DC.L	ERROR
00000034 0000 0000                  		DC.L	ERROR
00000038 0000 0000                  		DC.L	ERROR
0000003C 0000 0000                  		DC.L	ERROR
00000040 0000 0000                  		DC.L	ERROR
00000044 0000 0000                  		DC.L	ERROR
00000048 0000 0000                  		DC.L	ERROR
0000004C 0000 0000                  		DC.L	ERROR
00000050 0000 0000                  		DC.L	ERROR
00000054 0000 0000                  		DC.L	ERROR
00000058 0000 0000                  		DC.L	ERROR
0000005C 0000 0000                  		DC.L	ERROR
00000060 0000 0000                  		DC.L	ERROR
00000064 0000 0000                  		DC.L	INT
00000068 0000 0000                  		DC.L	INT
0000006C 0000 0000                  		DC.L	INT
00000070 0000 0000                  		DC.L	HBLANK
00000074 0000 0000                  		DC.L	INT
00000078 0000 0000                  		DC.L	VBLANK
0000007C 0000 0000                  		DC.L	INT
00000080 0000 0000                  		DC.L	ERROR
00000084 0000 0000                  		DC.L	ERROR
00000088 0000 0000                  		DC.L	ERROR
0000008C 0000 0000                  		DC.L	ERROR
00000090 0000 0000                  		DC.L	ERROR
00000094 0000 0000                  		DC.L	ERROR
00000098 0000 0000                  		DC.L	ERROR
0000009C 0000 0000                  		DC.L	ERROR
000000A0 0000 0000                  		DC.L	ERROR
000000A4 0000 0000                  		DC.L	ERROR
000000A8 0000 0000                  		DC.L	ERROR
000000AC 0000 0000                  		DC.L	ERROR
000000B0 0000 0000                  		DC.L	ERROR
000000B4 0000 0000                  		DC.L	ERROR
000000B8 0000 0000                  		DC.L	ERROR
000000BC 0000 0000                  		DC.L	ERROR
000000C0 0000 0000                  		DC.L	ERROR
000000C4 0000 0000                  		DC.L	ERROR
000000C8 0000 0000                  		DC.L	ERROR
000000CC 0000 0000                  		DC.L	ERROR
000000D0 0000 0000                  		DC.L	ERROR
000000D4 0000 0000                  		DC.L	ERROR
000000D8 0000 0000                  		DC.L	ERROR
000000DC 0000 0000                  		DC.L	ERROR
000000E0 0000 0000                  		DC.L	ERROR
000000E4 0000 0000                  		DC.L	ERROR
000000E8 0000 0000                  		DC.L	ERROR
000000EC 0000 0000                  		DC.L	ERROR
000000F0 0000 0000                  		DC.L	ERROR
000000F4 0000 0000                  		DC.L	ERROR
000000F8 0000 0000                  		DC.L	ERROR
000000FC 0000 0000                  		DC.L	ERROR
00000100 5345 4741 204D 4547 4120+  		DC.B	'SEGA MEGA DRIVE '		;	SYSTEM
00000110 4D44 5452 4156 4953 2032+  		DC.B	'MDTRAVIS 2024   '		;	DATE
00000120 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	DOMESTIC TITLE
00000130 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000140 2020 2020 2020 2020 2020+  		DC.B	'                '
00000150 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	INTERNATIONAL TITLE
00000160 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000170 2020 2020 2020 2020 2020+  		DC.B	'                '
00000180 474D 2058 5858 5858 5858+  		DC.B	'GM XXXXXXXX-XX',0,0	;	SERIAL
00000190 4A20 2020 2020 2020 2020+  		DC.B	'J               '		;	I/O SUPPORT JOYPAD
000001A0 0000 0000                  		DC.L	$00000000				;	ROM START
000001A4 0007 FFFF                  		DC.L	$0007FFFF				;	ROM END
000001A8 00FF 0000                  		DC.L	$00FF0000				;	RAM START
000001AC 00FF FFFF                  		DC.L	$00FFFFFF				;	RAM END
000001B0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001C0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001D0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001E0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
00000200                            		
00000200                            INT:
00000200                            ERROR:
00000200 23FC C000 0000 00C0 0004   		move.l	#CRAMWRITE,	(VDPCTRL)		;	Set VDP control mode to manually write a palette to CRAM
0000020A 33FC 000E 00C0 0000        		move.w	#$000E,		VDPDATA			;	Palleting...
00000212 60EC                       		BRA.S		INT
00000214                            		
00000214                            		INCLUDE		"SRC/SYSTEM/HBLANK.ASM"
00000214                            HBLANK:
00000214 4A79 FFFF F648             		TST.W	HBLANKFLAG
0000021A 6700                       		BEQ.S	.EXIT
0000021C 48E7 8084                  		MOVEM.L	D0/A0/A5,-(SP)
00000220 33FC 0000 FFFF F648        		MOVE.W	#0,	HBLANKFLAG
00000228 33FC 8405 00C0 0004        		MOVE.W	#$8405,	(VDPCTRL).L
00000230 33FC 857C 00C0 0004        		MOVE.W	#$857C,	(VDPCTRL).L
00000238 23FC 7800 0003 00C0 0004   		MOVE.L	#$78000003,	(VDPCTRL).L
00000242 41F9 FFFF F800             		LEA		SPRITETABLE,	A0
00000248 4BF9 00C0 0000             		LEA		(VDPDATA).L,	A5
0000024E 303C 009F                  		MOVE.W	#$9F,	D0
00000252                            		
00000252                            	.SPRITE:
00000252 2A98                       		MOVE.L	(A0)+,	(A5)
00000254 51C8 FFFC                  		DBF		D0,	.SPRITE
00000258 4CDF 2101                  		MOVEM.L	(SP)+,	D0/A0/A5
0000025C                            		
0000025C                            	.EXIT:
0000025C 4E73                       		RTE
0000025C 4E73                       		RTE
0000025E                            		INCLUDE		"SRC/SYSTEM/VBLANK.ASM"
0000025E                            VBLANK:
0000025E 48E7 FFFE                  		MOVEM.L	D0-D7/A0-A6,	-(SP)
00000262 4A39 FFFF F62A             		TST.B	VBLANKCMD
00000268 6700                       		BEQ.S	.END
0000026A 3039 00C0 0004             		MOVE.W	(VDPCTRL).L,	D0
00000270 23FC 4000 0010 00C0 0004   		MOVE.L	#$40000010,	(VDPCTRL).L
0000027A 23F9 FFFF F616 00C0 0000   		MOVE.L	VDP_SCREENPOSY,	(VDPDATA).L
00000284 0839 0006 FFFF FFF8        		BTST	#6,	HARDWAREVERSION
0000028C 6700                       		BEQ.S	.NTSC
0000028E 303C 0700                  		MOVE.W	#$700,	D0
00000292                            		
00000292                            	.PAL:
00000292 51C8 FFFE                  		DBF	D0,	.PAL
00000296                            		
00000296                            	.NTSC:
00000296 1039 FFFF F62A             		MOVE.B	VBLANKCMD,	D0
0000029C 13FC 0000 FFFF F62A        		MOVE.B	#0,	VBLANKCMD
000002A4 33FC 0001 FFFF F648        		MOVE.W	#1,	HBLANKFLAG
000002AC 0240 003E                  		ANDI.W	#%111110,	D0
000002B0 303B 0000                  		MOVE.W	.INDEX(PC,D0.W),	D0
000002B4 4EBB 0000                  		JSR		.INDEX(PC,D0.W)
000002B8                            		
000002B8                            	.END:
000002B8 52B9 FFFF FE0C             		ADDQ.L	#1,	VBLANKCOUNTER
000002BE                            	;	JSR		
000002BE 4CDF 7FFF                  		MOVEM.L	(SP)+,	D0-D7/A0-A6
000002C2 4E73                       		RTE
000002C4                            		
000002C4                            	VBL_INVALID:
000002C4 4E75                       		RTS
000002C6                            		
000002C6                            	.INDEX:
000002C6 0000                       		DC.W	VBL_DEFAULT-.INDEX	;	0
000002C8 FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	2
000002CA FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	4
000002CC FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	6
000002CE FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	8
000002D0 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	A
000002D2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	C
000002D4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	E
000002D6 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	10
000002D8 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	12
000002DA FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	14
000002DC FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	16
000002DE FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	18
000002E0 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1A
000002E2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1C
000002E4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1E
000002E6                            		
000002E6                            VBL_DEFAULT:
000002E6 4EB9 0000 0000             		JSR		READJOYPADS
000002EC 6100 0000                  		BSR.W	REFRESH_VDP_BUFFERS
000002F0 4A78 F614                  		TST.W	(TIMER).W
000002F4 6700 0000                  		BEQ.W	@STOP
000002F8 5378 F614                  		SUBQ.W	#1,	(TIMER).W
000002FC                            	@STOP:	
000002FC 4E75                       		RTS
000002FE                            		
000002FE                            REFRESH_VDP_BUFFERS:
000002FE                            ;		MOVE.W	#$100,	(Z80BUS).L
000002FE                            ;		
000002FE                            ;	@LOOP:
000002FE                            ;		BTST	#0,	(Z80BUS).L
000002FE                            ;		BNE.S	@LOOP
000002FE                            		
000002FE 4BF9 00C0 0004             		LEA	(VDPCTRL).L,	A5
00000304 2ABC 9400 9340                     move.l  #$94009340,(a5)
0000030A 2ABC 96FD 9580                     move.l  #$96FD9580,(a5)
00000310 3ABC 977F                          move.w  #$977F,(a5)
00000314 3ABC C000                          move.w  #$C000,(a5)
00000318 31FC 0080 F644                     move.w  #$80,(VDPBUFFER2).w
0000031E 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000322 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
00000328 2ABC 9401 9340                     move.l  #$94019340,(a5)
0000032E 2ABC 96FC 9500                     move.l  #$96FC9500,(a5)
00000334 3ABC 977F                          move.w  #$977F,(a5)
00000338 3ABC 7800                          move.w  #$7800,(a5)
0000033C 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
00000342 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000346 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
0000034C                            
0000034C                            loc_EDC:
0000034C 2ABC 9401 93C0                     move.l  #$940193C0,(a5)
00000352 2ABC 96E6 9500                     move.l  #$96E69500,(a5)
00000358 3ABC 977F                          move.w  #$977F,(a5)
0000035C 3ABC 7C00                          move.w  #$7C00,(a5)
00000360 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
00000366 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
0000036A 33FC 0000 00A1 1100                move.w  #0,(Z80BUS).l
00000372 4E75                               rts
00000372 4E75                               rts
00000374                            		
00000374                            START:
00000374 4DF9 00FF 0000             		LEA		$FF0000,	A6
0000037A 7E00                       		MOVEQ	#0,	D7
0000037C 3C3C 3F7F                  		MOVE.W	#($FE00/4)-1,	D6
00000380                            		
00000380                            	@CLEARRAM:
00000380 2CC7                       		MOVE.L	D7,	(A6)+
00000382 51CE FFFC                  		DBF		D6,	@CLEARRAM
00000386 6100 0000                  		BSR.W	INITVDP
0000038A 6100 0000                  		BSR.W	INITJOYPADS
0000038E 11FC 0000 F600             		MOVE.B	#0*4,	(GAMEMODE).W
00000394                            		
00000394                            MAINLOOP:
00000394 1038 F600                  		MOVE.B	(GAMEMODE).W,	D0
00000398 0240 001C                  		ANDI.W	#%00011100,	D0
0000039C 4EBB 0000                  		JSR		@INDEX(PC,D0.W)
000003A0 60F2                       		BRA.S	MAINLOOP
000003A2                            		
000003A2                            	@INDEX:
000003A2 6000 0000                  		BRA.W	LOGO
000003A6 4E75                       		RTS
000003A8                            		
000003A8                            		INCLUDE		"SRC/SYSTEM/INITVDP.ASM"
000003A8                            INITVDP:
000003A8 33FC 8004 00C0 0004        		MOVE.W	#$8000+%00000100,(VDPCTRL)		;	MODE REGISTER 1
000003B0 33FC 8174 00C0 0004        		MOVE.W	#$8100+%01110100,(VDPCTRL)      ;	MODE REGISTER 2
000003B8 33FC 8220 00C0 0004        		MOVE.W	#$8200+(PLANE_A>>10),(VDPCTRL)  ;	PLANE A LOCATION
000003C0 33FC 8330 00C0 0004        		MOVE.W	#$8300+(PLANE_W>>10),(VDPCTRL)  ;	PLANE W LOCATION
000003C8 33FC 8405 00C0 0004        		MOVE.W	#$8400+(PLANE_B>>13),(VDPCTRL)  ;	PLANE B LOCATION
000003D0 33FC 857C 00C0 0004        		MOVE.W	#$8500+%01111100,(VDPCTRL)      ;	SPRITE TABLE LOCATION
000003D8 33FC 8600 00C0 0004        		MOVE.W	#$8600+%00000000,(VDPCTRL)      ;	
000003E0 33FC 8720 00C0 0004        		MOVE.W	#$8700+%00100000,(VDPCTRL)      ;	BACKGROUND COLOR
000003E8 33FC 8800 00C0 0004        		MOVE.W	#$8800+%00000000,(VDPCTRL)      ;	MASTER SYSTEM H-SCROLL
000003F0 33FC 8900 00C0 0004        		MOVE.W	#$8900+%00000000,(VDPCTRL)      ;	MASTER SYSTEM V-SCROLL
000003F8 33FC 8A00 00C0 0004        		MOVE.W	#$8A00+%00000000,(VDPCTRL)      ;	H-INT COUNTER
00000400 33FC 8B00 00C0 0004        		MOVE.W	#$8B00+%00000000,(VDPCTRL)      ;	MODE REGISTER 3
00000408 33FC 8C81 00C0 0004        		MOVE.W	#$8C00+%10000001,(VDPCTRL)      ;	MODE REGISTER 4
00000410 33FC 8D3F 00C0 0004        		MOVE.W	#$8D00+%00111111,(VDPCTRL)      ;	H-SCROLL DATA LOCATION
00000418 33FC 8E00 00C0 0004        		MOVE.W	#$8E00+%00000000,(VDPCTRL)      ;	
00000420 33FC 8F02 00C0 0004        		MOVE.W	#$8F00+%00000010,(VDPCTRL)      ;	AUTO-INCREMENT VALUE
00000428 33FC 9001 00C0 0004        		MOVE.W	#$9000+%00000001,(VDPCTRL)      ;	PLANE SIZE
00000430 33FC 9100 00C0 0004        		MOVE.W	#$9100+%00000000,(VDPCTRL)      ;	WINDOW PLANE HORIZONTAL
00000438 33FC 9200 00C0 0004        		MOVE.W	#$9200+%00000000,(VDPCTRL)      ;	WINDOW PLANE VERTICAL
00000440 4E75                       		RTS
00000440 4E75                       		RTS
00000442                            		INCLUDE		"SRC/SYSTEM/INITJOYPADS.ASM"
00000442                            INITJOYPADS:
00000442                            ;		MOVE.W	#$100,	(Z80BUS).L
00000442                            ;		
00000442                            ;	@WAIT:
00000442                            ;		BTST	#0,	(Z80BUS).L
00000442                            ;		BNE.S	@WAIT
00000442                            ;		
00000442 7040                       		MOVEQ	#$40,	D0
00000444 13C0 00A1 0009             		MOVE.B	D0,	(IOCTRL1+1).L
0000044A 13C0 00A1 000B             		MOVE.B	D0,	(IO_CT2_CTRL+1).L
00000450 13C0 00A1 000D             		MOVE.B	D0,	(IOCTRL3+1).L
00000456                            ;		MOVE.W	#0,	(Z80BUS).L
00000456 4E75                       		RTS
00000456 4E75                       		RTS
00000458                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
00000458                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
00000458                            READJOYPADS:
00000458 41F8 F604                  		LEA		(JOYPAD).W,	A0
0000045C 43F9 00A1 0003             		LEA		(IODATA1).L,	A1
00000462 6100                       		BSR.S	@READPAD
00000464 5449                       		ADDQ.W	#2,	A1
00000466 6100                       		BSR.S	@READPAD
00000468 4E75                       		RTS
0000046A                            		
0000046A                            	@READPAD:
0000046A 12BC 0000                  		MOVE.B  #0,(A1)
0000046E 4E71                       		NOP
00000470 4E71                       		NOP
00000472 1011                       		MOVE.B  (A1),D0
00000474 E508                       		LSL.B   #2,D0
00000476 0200 00C0                  		ANDI.B  #$C0,D0
0000047A 12BC 0040                  		MOVE.B  #$40,(A1) ; '@'
0000047E 4E71                       		NOP
00000480 4E71                       		NOP
00000482 1211                       		MOVE.B  (A1),D1
00000484 0201 003F                  		ANDI.B  #$3F,D1 ; '?'
00000488 8001                       		OR.B    D1,D0
0000048A 4600                       		NOT.B   D0
0000048C 1210                       		MOVE.B  (A0),D1
0000048E B101                       		EOR.B   D0,D1
00000490 10C0                       		MOVE.B  D0,(A0)+
00000492 C200                       		AND.B   D0,D1
00000494 10C1                       		MOVE.B  D1,(A0)+
00000496 4E75                       		RTS
00000496 4E75                       		RTS
00000498                            		INCLUDE		"SRC/SUB/CLEARSCREEN.ASM"
00000498                            CLEARSCREEN:                            ; ...
00000498 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
0000049E 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000004A2 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000004A8                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000004A8 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000004AC                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000004AC                                                                    ; SET_VRAM_FILL_DMA_MODE
000004AC 2ABC 4000 0082                             MOVE.L  #$40000082,(A5) ; DO_WRITE_TO_VRAM_AT_$C000_ADDR
000004B2                                                                    ; DO_OPERATION_USING_DMA
000004B2 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000004BA                            
000004BA                            @WAITFGCLEAR:                          ; ...
000004BA 3215                                       MOVE.W  (A5),D1
000004BC 0801 0001                                  BTST    #1,D1
000004C0 66F8                                       BNE.S   @WAITFGCLEAR
000004C2 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000004C6 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
000004CC 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000004D0 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000004D6                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000004D6 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000004DA                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000004DA                                                                    ; SET_VRAM_FILL_DMA_MODE
000004DA 2ABC 6000 0082                             MOVE.L  #$60000082,(A5) ; DO_WRITE_TO_VRAM_AT_$E000_ADDR
000004E0                                                                    ; DO_OPERATION_USING_DMA
000004E0 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000004E8                            
000004E8                            @WAITBGCLEAR:                          ; ...
000004E8 3215                                       MOVE.W  (A5),D1
000004EA 0801 0001                                  BTST    #1,D1
000004EE 66F8                                       BNE.S   @WAITBGCLEAR
000004F0 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000004F4 21FC 0000 0000 F616                        MOVE.L  #0,(VDP_SCREENPOSY).W
000004FC 21FC 0000 0000 F61A                        MOVE.L  #0,(VDP_SCREENPOSX).W
00000504 43F8 F800                                  LEA     (SPRITETABLE).W,A1
00000508 7000                                       MOVEQ   #0,D0
0000050A 323C 00A0                                  MOVE.W  #$A0,D1
0000050E                            
0000050E                            @CLEARSPRITES:                         ; ...
0000050E 22C0                                       MOVE.L  D0,(A1)+
00000510 51C9 FFFC                                  DBF     D1,@CLEARSPRITES
00000514 43F8 CC00                                  LEA     (HSCROLLTABLE).W,A1
00000518 7000                                       MOVEQ   #0,D0
0000051A 323C 0100                                  MOVE.W  #$100,D1
0000051E                            
0000051E                            @CLEARHSCROLL:                         ; ...
0000051E 22C0                                       MOVE.L  D0,(A1)+
00000520 51C9 FFFC                                  DBF     D1,@CLEARHSCROLL
00000524 4E75                                       RTS
00000526                            ; END OF FUNCTION CLEARSCREEN
00000526                            ; END OF FUNCTION CLEARSCREEN
00000526                            		INCLUDE		"SRC/SUB/DRAWTILEMAP.ASM"
00000526                            DrawTileMap:		;	SUBROUTINE
00000526 4DF9 00C0 0000                             lea     VDPDATA,a6
0000052C 283C 0080 0000                             move.l  #$800000,d4
00000532                            
00000532                            .LoopRow:                           
00000532 2D40 0004                                  move.l  d0,4(a6)    ; VDPCTRL
00000536 3601                                       move.w  d1,d3
00000538                            
00000538                            .LoopColumn: 
00000538 3C99                                       move.w  (a1)+,(a6)
0000053A 51CB FFFC                                  dbf     d3,.LoopColumn
0000053E D084                                       add.l   d4,d0
00000540 51CA FFF0                                  dbf     d2,.LoopRow
00000544 4E75                                       rts
00000544 4E75                                       rts
00000546                            		INCLUDE		"SRC/SUB/VSYNC.ASM"
00000546                            VSYNC:
00000546 46FC 2300                  		MOVE	#$2300,	SR
0000054A                            	@WAIT:
0000054A 4A38 F62A                  		TST.B	(VBLANKCMD).W
0000054E 66FA                       		BNE.S	@WAIT
00000550 4E75                       		RTS
00000550 4E75                       		RTS
00000552                            		
00000552                            		INCLUDE		"SRC/GAMEMODE/LOGO.ASM"
00000552                            LOGO:
00000552 4EB9 0000 0498             		JSR		CLEARSCREEN
00000558 23FC 4000 0000 00C0 0004   		move.l	#VRAMWRITE,	(VDPCTRL)
00000562 41F9 0000 0000             		LEA		LOGOART,	A0
00000568 43F9 00C0 0000             		LEA		VDPDATA,	A1
0000056E 303C 061F                  		MOVE.W	#$61F,		D0
00000572                            	@LOADGFX:
00000572 3298                       		MOVE.W	(A0)+,	(A1)
00000574 51C8 FFFC                  		DBF		D0,	@LOADGFX
00000578                            		
00000578 43F9 0000 0000 203C 661C+  	COPYTILEMAP		LOGOMAP,	$A61C,	11,	3
0000058E 43F9 0000 0000 203C 461C+  	COPYTILEMAP		LOGOMAPB,	$861C,	11,	3
000005A4                            	
000005A4 7000                       		MOVEQ	#0,	D0
000005A6                            	;	BSR.W	PALLOAD
000005A6 31FC 0070 F632             		MOVE.W	#112,	(PALCYCCURRENT).W
000005AC 33FC 0000 00FF F662        		MOVE.W	#0,	$FFF662
000005B4 33FC 0000 00FF F660        		MOVE.W	#0,	$FFF660
000005BC 33FC 0104 FFFF F614        		MOVE.W	#260,	TIMER
000005C4 3038 F60C                  		MOVE.W	(VDPBUFFER).W,	D0
000005C8 0000 0040                  		ORI.B	#%1000000,	D0
000005CC 33C0 00C0 0004             		MOVE.W	D0,	(VDPCTRL).L
000005D2                            		
000005D2                            	@LOOP:
000005D2 11FC 0001 F62A             		MOVE.B	#1,	(VBLANKCMD).W
000005D8 4EB9 0000 0546             		JSR		VSYNC
000005DE 6100 0000                  		BSR.W	_LOGO_PALCYC
000005E2 4A79 FFFF F614             		TST.W	TIMER
000005E8 6700                       		BEQ.S	@EXIT
000005EA 0239 0080 FFFF F605        		ANDI.B	#%10000000,	JOYPADPRESS
000005F2 67DE                       		BEQ.S	@LOOP
000005F4                            	@EXIT:
000005F4                            	;	JSR		PALFADEOUT
000005F4 4AFC                       		ILLEGAL
000005F6 13FC 0004 FFFF F600        		MOVE.B	#1*4,	GAMEMODE
000005FE 4E75                       		RTS
00000600                            		
00000600                            _LOGO_PALCYC:
00000600 5379 FFFF F634             		SUBQ.W	#1,	PALCYCTIMER
00000606 6A00                       		BPL.S	@EXIT
00000608 33FC 0003 FFFF F634        		MOVE.W	#3,	PALCYCTIMER
00000610 3039 FFFF F632             		MOVE.W	PALCYCCURRENT,	D0
00000616 6B00                       		BMI.S	@EXIT
00000618 5579 FFFF F632             		SUBQ.W	#2,	PALCYCCURRENT
0000061E 41F9 0000 0000             		LEA		LOGO_CYC,	A0
00000624 43F8 FB04                  		LEA		((PALETTE+$04)).W,	A1
00000628 D0C0                       		ADDA.W	D0,	A0
0000062A 22D8                       		MOVE.L	(A0)+,(A1)+
0000062C 22D8                       		MOVE.L	(A0)+,(A1)+
0000062E 22D8                       		MOVE.L	(A0)+,(A1)+
00000630 22D8                       		MOVE.L	(A0)+,(A1)+
00000632 22D8                       		MOVE.L	(A0)+,(A1)+
00000634 22D8                       		MOVE.L	(A0)+,(A1)+
00000636 41F9 0000 0000             		LEA		LOGO_CYCB,	A0
0000063C 43F8 FB24                  		LEA		((PALETTE+$24)).W,	A1
00000640 D0C0                       		ADDA.W	D0,	A0
00000642 22D8                       		MOVE.L	(A0)+,(A1)+
00000644 22D8                       		MOVE.L	(A0)+,(A1)+
00000646 22D8                       		MOVE.L	(A0)+,(A1)+
00000648 22D8                       		MOVE.L	(A0)+,(A1)+
0000064A 22D8                       		MOVE.L	(A0)+,(A1)+
0000064C 22D8                       		MOVE.L	(A0)+,(A1)+
0000064E                            	@EXIT:
0000064E 4E75                       		RTS
00000650                            		
00000650                            LOGOART:	INCBIN		"ART/LOGO.UNC"
00001270                            LOGOMAP:	INCBIN		"MAP/LOGO.MAP"
000012D0                            LOGOMAPB:	INCBIN		"MAP/LOGOB.MAP"
00001330                            LOGO_CYC:
00001330 0000                       		DC.W $000
00001332 0000                       		DC.W $000
00001334 0000                       		DC.W $000
00001336 0000                       		DC.W $000
00001338 0000                       		DC.W $000
0000133A 0000                       		DC.W $000
0000133C 0000                       		DC.W $000
0000133E 0000                       		DC.W $000
00001340 0000                       		DC.W $000
00001342 0000                       		DC.W $000
00001344 0000                       		DC.W $000
00001346 0200                       		DC.W $200
00001348 0400                       		DC.W $400
0000134A 0600                       		DC.W $600
0000134C 0800                       		DC.W $800
0000134E 0A00                       		DC.W $A00
00001350 0C00                       		DC.W $C00
00001352 0E00                       		DC.W $E00
00001354 0E20                       		DC.W $E20
00001356 0E40                       		DC.W $E40
00001358 0E60                       		DC.W $E60
0000135A 0E80                       		DC.W $E80
0000135C 0EA0                       		DC.W $EA0
0000135E 0EC0                       		DC.W $EC0
00001360 0EA0                       		DC.W $EA0
00001362 0E80                       		DC.W $E80
00001364 0E60                       		DC.W $E60
00001366 0E40                       		DC.W $E40
00001368 0E20                       		DC.W $E20
0000136A 0E00                       		DC.W $E00
0000136C 0C00                       		DC.W $C00
0000136E 0A00                       		DC.W $A00
00001370 0800                       		DC.W $800
00001372 0600                       		DC.W $600
00001374 0800                       		DC.W $800
00001376 0A00                       		DC.W $A00
00001378 0C00                       		DC.W $C00
0000137A 0E00                       		DC.W $E00
0000137C 0E20                       		DC.W $E20
0000137E 0E40                       		DC.W $E40
00001380 0E60                       		DC.W $E60
00001382 0E80                       		DC.W $E80
00001384 0EA0                       		DC.W $EA0
00001386 0EC0                       		DC.W $EC0
00001388 0EA0                       		DC.W $EA0
0000138A 0E80                       		DC.W $E80
0000138C 0E60                       		DC.W $E60
0000138E 0E40                       		DC.W $E40
00001390 0E20                       		DC.W $E20
00001392 0E00                       		DC.W $E00
00001394 0C00                       		DC.W $C00
00001396 0A00                       		DC.W $A00
00001398 0800                       		DC.W $800
0000139A 0600                       		DC.W $600
0000139C 0400                       		DC.W $400
0000139E 0200                       		DC.W $200
000013A0 0000                       		DC.W $000
000013A2 0000                       		DC.W $000
000013A4 0000                       		DC.W $000
000013A6 0000                       		DC.W $000
000013A8 0000                       		DC.W $000
000013AA 0000                       		DC.W $000
000013AC 0000                       		DC.W $000
000013AE 0000                       		DC.W $000
000013B0 0000                       		DC.W $000
000013B2 0000                       		DC.W $000
000013B4 0000                       		DC.W $000
000013B6                            LOGO_CYCB:
000013B6 0000                       		DC.W $000
000013B8 0000                       		DC.W $000
000013BA 0000                       		DC.W $000
000013BC 0000                       		DC.W $000
000013BE 0000                       		DC.W $000
000013C0 0000                       		DC.W $000
000013C2 0000                       		DC.W $000
000013C4 0000                       		DC.W $000
000013C6 0000                       		DC.W $000
000013C8 0000                       		DC.W $000
000013CA 0000                       		DC.W $000
000013CC 0200                       		DC.W $200
000013CE 0422                       		DC.W $422
000013D0 0644                       		DC.W $644
000013D2 0866                       		DC.W $866
000013D4 0A88                       		DC.W $A88
000013D6 0CAA                       		DC.W $CAA
000013D8 0ECC                       		DC.W $ECC
000013DA 0EEE                       		DC.W $EEE
000013DC 0EEE                       		DC.W $EEE
000013DE 0EEE                       		DC.W $EEE
000013E0 0EEE                       		DC.W $EEE
000013E2 0EEE                       		DC.W $EEE
000013E4 0EEE                       		DC.W $EEE
000013E6 0EEE                       		DC.W $EEE
000013E8 0EEE                       		DC.W $EEE
000013EA 0EEE                       		DC.W $EEE
000013EC 0EEE                       		DC.W $EEE
000013EE 0EEE                       		DC.W $EEE
000013F0 0EEE                       		DC.W $EEE
000013F2 0EEE                       		DC.W $EEE
000013F4 0EEE                       		DC.W $EEE
000013F6 0EEE                       		DC.W $EEE
000013F8 0EEE                       		DC.W $EEE
000013FA 0EEE                       		DC.W $EEE
000013FC 0EEE                       		DC.W $EEE
000013FE 0EEE                       		DC.W $EEE
00001400 0EEE                       		DC.W $EEE
00001402 0EEE                       		DC.W $EEE
00001404 0EEE                       		DC.W $EEE
00001406 0EEE                       		DC.W $EEE
00001408 0EEE                       		DC.W $EEE
0000140A 0EEE                       		DC.W $EEE
0000140C 0EEE                       		DC.W $EEE
0000140E 0EEE                       		DC.W $EEE
00001410 0EEE                       		DC.W $EEE
00001412 0EEE                       		DC.W $EEE
00001414 0EEE                       		DC.W $EEE
00001416 0EEE                       		DC.W $EEE
00001418 0ECC                       		DC.W $ECC
0000141A 0CAA                       		DC.W $CAA
0000141C 0A88                       		DC.W $A88
0000141E 0866                       		DC.W $866
00001420 0644                       		DC.W $644
00001422 0422                       		DC.W $422
00001424 0200                       		DC.W $200
00001426 0000                       		DC.W $000
00001428 0000                       		DC.W $000
0000142A 0000                       		DC.W $000
0000142C 0000                       		DC.W $000
0000142E 0000                       		DC.W $000
00001430 0000                       		DC.W $000
00001432 0000                       		DC.W $000
00001434 0000                       		DC.W $000
00001436 0000                       		DC.W $000
00001438 0000                       		DC.W $000
0000143A 0000                       		DC.W $000
0000143A 0000                       		DC.W $000
0000143C                            		
0000143C                            	ALIGN	$80000
00080000                            		include	"ErrorHandler.asm"
00080000                            
00080000                            ; ===============================================================
00080000                            ; ---------------------------------------------------------------
00080000                            ; Error handling and debugging modules
00080000                            ;
00080000                            ; (c) 2016-2023, Vladikcomper
00080000                            ; ---------------------------------------------------------------
00080000                            ; Error handler functions and calls
00080000                            ; ---------------------------------------------------------------
00080000                            
00080000                            ; ---------------------------------------------------------------
00080000                            ; Error handler control flags
00080000                            ; ---------------------------------------------------------------
00080000                            
00080000                            ; Screen appearence flags
00080000 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
00080000 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
00080000                            
00080000                            ; Advanced execution flags
00080000                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
00080000 =00000020                  _eh_return			equ	$20
00080000 =00000040                  _eh_enter_console	equ	$40
00080000 =00000080                  _eh_align_offset	equ	$80
00080000                            
00080000                            ; ---------------------------------------------------------------
00080000                            ; Errors vector table
00080000                            ; ---------------------------------------------------------------
00080000                            
00080000                            ; Default screen configuration
00080000 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
00080000                            
00080000                            ; ---------------------------------------------------------------
00080000                            
00080000                            BusError:
00080018                            
00080018                            AddressError:
00080034                            
00080034                            IllegalInstr:
00080056                            
00080056                            ZeroDivide:
00080070                            
00080070                            ChkInstr:
0008008E                            
0008008E                            TrapvInstr:
000800AE                            
000800AE                            PrivilegeViol:
000800D0                            
000800D0                            Trace:
000800E4                            
000800E4                            Line1010Emu:
00080104                            
00080104                            Line1111Emu:
00080124                            
00080124                            ErrorExcept:
00080142                            
00080142                            
00080142                            ; ---------------------------------------------------------------
00080142                            ; Import error handler global functions
00080142                            ; ---------------------------------------------------------------
00080142                            
00080142                            ; Debugger extension functions
00080142                            __global__ErrorHandler_ConsoleOnly: equ DebuggerExtensions+$0
00080142                            __global__ErrorHandler_ClearConsole: equ DebuggerExtensions+$26
00080142                            __global__KDebug_WriteLine_Formatted: equ DebuggerExtensions+$50
00080142                            __global__KDebug_Write_Formatted: equ DebuggerExtensions+$54
00080142                            __global__KDebug_FlushLine: equ DebuggerExtensions+$AA
00080142                            __global__ErrorHandler_PauseConsole: equ DebuggerExtensions+$C2
00080142                            __global__ErrorHandler_PagesController: equ DebuggerExtensions+$F8
00080142                            __global__VSync: equ DebuggerExtensions+$158
00080142                            
00080142                            ; Error handler & core functions
00080142                            __global__ErrorHandler: equ ErrorHandler+$0
00080142                            __global__Error_IdleLoop: equ ErrorHandler+$122
00080142                            __global__Error_InitConsole: equ ErrorHandler+$13C
00080142                            __global__Error_MaskStackBoundaries: equ ErrorHandler+$148
00080142                            __global__Error_DrawOffsetLocation: equ ErrorHandler+$1B2
00080142                            __global__Error_DrawOffsetLocation2: equ ErrorHandler+$1B6
00080142                            __global__ErrorHandler_SetupVDP: equ ErrorHandler+$23C
00080142                            __global__ErrorHandler_VDPConfig: equ ErrorHandler+$274
00080142                            __global__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$28A
00080142                            __global__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2C6
00080142                            __global__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2CA
00080142                            __global__Art1bpp_Font: equ ErrorHandler+$334
00080142                            __global__FormatString: equ ErrorHandler+$8F8
00080142                            __global__Console_Init: equ ErrorHandler+$9CE
00080142                            __global__Console_Reset: equ ErrorHandler+$A10
00080142                            __global__Console_InitShared: equ ErrorHandler+$A12
00080142                            __global__Console_SetPosAsXY_Stack: equ ErrorHandler+$A4E
00080142                            __global__Console_SetPosAsXY: equ ErrorHandler+$A54
00080142                            __global__Console_GetPosAsXY: equ ErrorHandler+$A82
00080142                            __global__Console_StartNewLine: equ ErrorHandler+$AA4
00080142                            __global__Console_SetBasePattern: equ ErrorHandler+$ACC
00080142                            __global__Console_SetWidth: equ ErrorHandler+$AE0
00080142                            __global__Console_WriteLine_WithPattern: equ ErrorHandler+$AF6
00080142                            __global__Console_WriteLine: equ ErrorHandler+$AF8
00080142                            __global__Console_Write: equ ErrorHandler+$AFC
00080142                            __global__Console_WriteLine_Formatted: equ ErrorHandler+$BA8
00080142                            __global__Console_Write_Formatted: equ ErrorHandler+$BAC
00080142                            __global__Decomp1bpp: equ ErrorHandler+$BDC
00080142                            
00080142                            ; ---------------------------------------------------------------
00080142                            ; Built-in debuggers
00080142                            ; ---------------------------------------------------------------
00080142                            
00080142                            Debugger_AddressRegisters:
00080142                            
00080142 48E7 00FE 41FA 002A        	dc.l	$48E700FE, $41FA002A
0008014A 4EBA 0000                  	jsr		__global__Console_Write(pc)
0008014E 49D7 7C06 3F3C 2000 2F3C+  	dc.l	$49D77C06, $3F3C2000, $2F3CE861, $303A41D7
0008015E 221C                       	dc.w	$221C
00080160 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation(pc)
00080164 522F 0002 51CE FFF2 4FEF+  	dc.l	$522F0002, $51CEFFF2, $4FEF0022, $4E75E0FA, $01F026EA, $41646472, $65737320, $52656769
00080184 7374 6572 733A E0E0        	dc.l	$73746572, $733AE0E0
0008018C 0000                       	dc.w	$0000
0008018E                            
0008018E                            Debugger_Backtrace:
0008018E                            
0008018E 41FA 0088                  	dc.l	$41FA0088
00080192 4EBA 0000                  	jsr		__global__Console_Write(pc)
00080196 2278 0000 5989 45D7        	dc.l	$22780000, $598945D7
0008019E 4EBA 0000                  	jsr		__global__Error_MaskStackBoundaries(pc)
000801A2 B3CA 6570 0C52 0040 6464+  	dc.l	$B3CA6570, $0C520040, $64642012, $67602040, $02400001, $66581220, $10200C00, $00616604
000801C2 4A01 663A 0C00 004E 660A+  	dc.l	$4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A, $30200C40, $61006722, $12004200
000801E2 0C40 4E00 6612 0C01 00A8+  	dc.l	$0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01, $00B96606, $0C604EB9, $66102F0A
00080202 2F09 2208                  	dc.l	$2F092208
00080206 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation2(pc)
0008020A 225F 245F 548A 548A B3CA+  	dc.l	$225F245F, $548A548A, $B3CA6490, $4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
0008022A 0000                       	dc.w	$0000
0008022C                            
0008022C                            ; ---------------------------------------------------------------
0008022C                            ; Debugger extensions
0008022C                            ; ---------------------------------------------------------------
0008022C                            
0008022C                            DebuggerExtensions:
0008022C                            
0008022C 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $47EF003C
0008023C 4EBA 0000                  	jsr		__global__ErrorHandler_SetupVDP(pc)
00080240 4EBA 0000                  	jsr		__global__Error_InitConsole(pc)
00080244 4CDF 7FFF                  	dc.l	$4CDF7FFF
00080248 487A 0000                  	pea		__global__Error_IdleLoop(pc)
0008024C 2F2F 0012 4E75 2F0B 4E6B+  	dc.l	$2F2F0012, $4E752F0B, $4E6B0C2B, $005D000C, $661A48E7, $C4464BF9, $00C00004, $4DEDFFFC
0008026C 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Initial(pc), a1
00080270 4EBA 0000                  	jsr		__global__Console_Reset(pc)
00080274 4CDF 6223 265F 4E75 487A+  	dc.l	$4CDF6223, $265F4E75, $487A0058, $4E680C28, $005D000C, $67182F0C, $49FA0016, $4FEFFFF0
00080294 41D7 7E0E                  	dc.l	$41D77E0E
00080298 4EBA 0000                  	jsr		__global__FormatString(pc)
0008029C 4FEF 0010 285F 4E75 4218+  	dc.l	$4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00
000802BC 6002 3A87 1E18 6EFA 6708+  	dc.l	$60023A87, $1E186EFA, $67080407, $00E067F2, $60F22A5F, $205F7E0E, $4E752F08, $4E680C28
000802DC 005D 000C 6708 33FC 9E00+  	dc.l	$005D000C, $670833FC, $9E0000C0, $0004205F, $4E7548E7, $C0D04E6B, $0C2B005D, $000C660C
000802FC 3F3C 0000 610C 610A 67FC+  	dc.l	$3F3C0000, $610C610A, $67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178
0008031C 70F0 C02F 0005 4E75 48E7+  	dc.l	$70F0C02F, $00054E75, $48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2
0008033C 6B40 41FA 0076 5888 D000+  	dc.l	$6B4041FA, $00765888, $D00064FA, $20106F32, $20404FEF
00080350 FFF2                       	dc.w	$FFF2
00080352 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Shared(pc), a1
00080356 47D7 2A3C 4000 0003        	dc.l	$47D72A3C, $40000003
0008035E 4EBA 0000                  	jsr		__global__Console_InitShared(pc)
00080362 2ABC 8230 8406 2A85 487A+  	dc.l	$2ABC8230, $84062A85, $487A000C, $48504CEF, $7FFF0014, $4E754FEF, $000E60B0
0008037E 2ABA 0000                  	move.l	__global__ErrorHandler_VDPConfig_Nametables(pc), (a5)
00080382 60AA 41F9 00C0 0004 44D0+  	dc.l	$60AA41F9, $00C00004, $44D06BFC, $44D06AFC, $4E7512BC, $00004E71, $72C01011, $E50812BC
000803A2 0040 4E71 C001 1211 0201+  	dc.l	$00404E71, $C0011211, $0201003F, $80014600, $1210B101, $10C0C200, $10C14E75
000803BE                            
000803BE                            ; WARNING! Don't move! This must be placed directly below "DebuggerExtensions"
000803BE                            DebuggerExtensions_ExtraDebuggerList:
000803BE 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER	; for button A
000803C2 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER	; for button C (not B)
000803C6 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER	; for button B (not C)
000803CA                            
000803CA                            ; ---------------------------------------------------------------
000803CA                            ; Error handler blob
000803CA                            ; ---------------------------------------------------------------
000803CA                            
000803CA                            ErrorHandler:
000803CA                            
000803CA 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $4EBA022E, $49EF004A, $4E682F08, $47EF0040, $4EBA011E
000803EA 41FA 02B2 4EBA 0AD6 225C+  	dc.l	$41FA02B2, $4EBA0AD6, $225C45D4, $4EBA0B7A, $4EBA0A72, $49D21C19, $6A025249, $47D10806
0008040A 0000 670E 41FA 0295 222C+  	dc.l	$0000670E, $41FA0295, $222C0002, $4EBA0164, $504C41FA, $0292222C, $00024EBA, $01562278
0008042A 0000 45EC 0006 4EBA 01AE+  	dc.l	$000045EC, $00064EBA, $01AE41FA, $02844EBA, $01424EBA, $0A300806, $00066600, $00AA45EF
0008044A 0004 4EBA 09FE 3F01 7003+  	dc.l	$00044EBA, $09FE3F01, $70034EBA, $09C8303C, $64307A07, $4EBA0132, $321F7011, $4EBA09B6
0008046A 303C 6130 7A06 4EBA 0120+  	dc.l	$303C6130, $7A064EBA, $0120303C, $73707A00, $2F0C45D7, $4EBA0112, $584F0806, $00016714
0008048A 43FA 0240 45D7 4EBA 0AE4+  	dc.l	$43FA0240, $45D74EBA, $0AE443FA, $024145D4, $4EBA0AD6, $584F4EBA, $09AA5241, $70014EBA
000804AA 0974 2038 0078 41FA 022F+  	dc.l	$09742038, $007841FA, $022F4EBA, $010A2038, $007041FA, $022B4EBA, $00FE4EBA, $09A82278
000804CA 0000 45D4 5389 6140 4EBA+  	dc.l	$000045D4, $53896140, $4EBA0978, $7A199A41, $6B0A6148, $4EBA005A, $51CDFFFA, $08060005
000804EA 660A 4E71 60FC 7200 4EBA+  	dc.l	$660A4E71, $60FC7200, $4EBA09A2, $2ECB4CDF, $7FFF487A, $FFEE2F2F, $FFC44E75, $43FA0152
0008050A 45FA 01F2 4EFA 0888 223C+  	dc.l	$45FA01F2, $4EFA0888, $223C00FF, $FFFF2409, $C4812242, $240AC481, $24424E75, $4FEFFFD0
0008052A 41D7 7EFF 20FC 2853 5029+  	dc.l	$41D77EFF, $20FC2853, $502930FC, $3A206018, $4FEFFFD0, $41D77EFF, $30FC202B, $320A924C
0008054A 4EBA 05A4 30FC 3A20 7005+  	dc.l	$4EBA05A4, $30FC3A20, $700572EC, $B5C96502, $72EE10C1, $321A4EBA, $05AC10FC, $002051C8
0008056A FFEA 4218 41D7 7200 4EBA+  	dc.l	$FFEA4218, $41D77200, $4EBA094C, $4FEF0030, $4E754EBA, $09482F01, $2F0145D7, $43FA013C
0008058A 4EBA 09E6 504F 4E75 4FEF+  	dc.l	$4EBA09E6, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA055E
000805AA 4218 41D7 7200 4EBA 090E+  	dc.l	$421841D7, $72004EBA, $090E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
000805CA 0C5A 4EF9 6604 2212 60A8+  	dc.l	$0C5A4EF9, $66042212, $60A84EBA, $09A043FA, $01174EFA, $09945989, $4EBAFF2E, $B3CA650C
000805EA 0C52 0040 650A 548A B3CA+  	dc.l	$0C520040, $650A548A, $B3CA64F4, $72004E75, $221267F2, $08010000, $66EC4E75, $4BF900C0
0008060A 0004 4DED FFFC 4A55 44D5+  	dc.l	$00044DED, $FFFC4A55, $44D569FC, $41FA0026, $30186A04, $3A8060F8, $70002ABC, $40000000
0008062A 2C80 2ABC 4000 0010 2C80+  	dc.l	$2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75, $80048134, $85008700, $8B008C81
0008064A 8D00 8F02 9011 9100 9200+  	dc.l	$8D008F02, $90119100, $92008220, $84040000, $44000000, $00000001, $00100011, $01000101
0008066A 0110 0111 1000 1001 1010+  	dc.l	$01100111, $10001001, $10101011, $11001101, $11101111, $FFFF0EEE, $FFF200CE, $FFF20EEA
0008068A FFF2 0E86 FFF2 4000 0002+  	dc.l	$FFF20E86, $FFF24000, $00020028, $00280000, $008000FF, $EAE0FA01, $F02600EA, $41646472
000806AA 6573 733A 2000 EA4F 6666+  	dc.l	$6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C, $6C65723A, $2000EC83, $20E8BFEC
000806CA C800 FA10 E875 7370 3A20+  	dc.l	$C800FA10, $E8757370, $3A20EC83, $00FA03E8, $73723A20, $EC8100EA, $56496E74, $3A2000EA
000806EA 4849 6E74 3A20 00E8 3C75+  	dc.l	$48496E74, $3A2000E8, $3C756E64, $6566696E, $65643E00, $02F70000, $00000000, $0000183C
0008070A 3C18 1800 1800 6C6C 6C00+  	dc.l	$3C181800, $18006C6C, $6C000000, $00006C6C, $FE6CFE6C, $6C00187E, $C07C06FC, $180000C6
0008072A 0C18 3060 C600 386C 3876+  	dc.l	$0C183060, $C600386C, $3876CCCC, $76001818, $30000000, $00001830, $60606030, $18006030
0008074A 1818 1830 6000 00EE 7CFE+  	dc.l	$18181830, $600000EE, $7CFE7CEE, $00000018, $187E1818, $00000000, $00001818, $30000000
0008076A 00FE 0000 0000 0000 0000+  	dc.l	$00FE0000, $00000000, $00000038, $3800060C, $183060C0, $80007CC6, $CEDEF6E6, $7C001878
0008078A 1818 1818 7E00 7CC6 0C18+  	dc.l	$18181818, $7E007CC6, $0C183066, $FE007CC6, $063C06C6, $7C000C1C, $3C6CFE0C, $0C00FEC0
000807AA FC06 06C6 7C00 7CC6 C0FC+  	dc.l	$FC0606C6, $7C007CC6, $C0FCC6C6, $7C00FEC6, $060C1818, $18007CC6, $C67CC6C6, $7C007CC6
000807CA C67E 06C6 7C00 001C 1C00+  	dc.l	$C67E06C6, $7C00001C, $1C00001C, $1C000018, $18000018, $18300C18, $30603018, $0C000000
000807EA FE00 00FE 0000 6030 180C+  	dc.l	$FE0000FE, $00006030, $180C1830, $60007CC6, $060C1800, $18007CC6, $C6DEDCC0, $7E00386C
0008080A C6C6 FEC6 C600 FC66 667C+  	dc.l	$C6C6FEC6, $C600FC66, $667C6666, $FC003C66, $C0C0C066, $3C00F86C, $6666666C, $F800FEC2
0008082A C0F8 C0C2 FE00 FE62 607C+  	dc.l	$C0F8C0C2, $FE00FE62, $607C6060, $F0007CC6, $C0C0DEC6, $7C00C6C6, $C6FEC6C6, $C6003C18
0008084A 1818 1818 3C00 3C18 1818+  	dc.l	$18181818, $3C003C18, $1818D8D8, $7000C6CC, $D8F0D8CC, $C600F060, $60606062, $FE00C6EE
0008086A FED6 D6C6 C600 C6E6 E6F6+  	dc.l	$FED6D6C6, $C600C6E6, $E6F6DECE, $C6007CC6, $C6C6C6C6, $7C00FC66, $667C6060, $F0007CC6
0008088A C6C6 C6D6 7C06 FCC6 C6FC+  	dc.l	$C6C6C6D6, $7C06FCC6, $C6FCD8CC, $C6007CC6, $C07C06C6, $7C007E5A, $18181818, $3C00C6C6
000808AA C6C6 C6C6 7C00 C6C6 C6C6+  	dc.l	$C6C6C6C6, $7C00C6C6, $C6C66C38, $1000C6C6, $D6D6FEEE, $C600C66C, $3838386C, $C6006666
000808CA 663C 1818 3C00 FE86 0C18+  	dc.l	$663C1818, $3C00FE86, $0C183062, $FE007C60, $60606060, $7C00C060, $30180C06, $02007C0C
000808EA 0C0C 0C0C 7C00 1038 6CC6+  	dc.l	$0C0C0C0C, $7C001038, $6CC60000, $00000000, $00000000, $00FF3030, $18000000, $00000000
0008090A 780C 7CCC 7E00 E060 7C66+  	dc.l	$780C7CCC, $7E00E060, $7C666666, $FC000000, $7CC6C0C6, $7C001C0C, $7CCCCCCC, $7E000000
0008092A 7CC6 FEC0 7C00 1C36 30FC+  	dc.l	$7CC6FEC0, $7C001C36, $30FC3030, $78000000, $76CEC67E, $067CE060, $7C666666, $E6001800
0008094A 3818 1818 3C00 0C00 1C0C+  	dc.l	$38181818, $3C000C00, $1C0C0C0C, $CC78E060, $666C786C, $E6001818, $18181818, $1C000000
0008096A 6CFE D6D6 C600 0000 DC66+  	dc.l	$6CFED6D6, $C6000000, $DC666666, $66000000, $7CC6C6C6, $7C000000, $DC66667C, $60F00000
0008098A 76CC CC7C 0C1E 0000 DC66+  	dc.l	$76CCCC7C, $0C1E0000, $DC666060, $F0000000, $7CC07C06, $7C003030, $FC303036, $1C000000
000809AA CCCC CCCC 7600 0000 C6C6+  	dc.l	$CCCCCCCC, $76000000, $C6C66C38, $10000000, $C6C6D6FE, $6C000000, $C66C386C, $C6000000
000809CA C6C6 CE76 067C 0000 FC98+  	dc.l	$C6C6CE76, $067C0000, $FC983064, $FC000E18, $18701818, $0E001818, $18001818, $18007018
000809EA 180E 1818 7000 76DC 0000+  	dc.l	$180E1818, $700076DC, $00000000, $000043FA, $05C80C59, $DEB26672, $70FED059, $74FC7600
00080A0A 4841 0241 00FF D241 D241+  	dc.l	$48410241, $00FFD241, $D241B240, $625C675E, $20311000, $675847F1, $08004841, $7000301B
00080A2A B253 654C 43F3 08FE 45E9+  	dc.l	$B253654C, $43F308FE, $45E9FFFC, $E248C042, $B2730000, $65146204, $D6C0601A, $47F30004
00080A4A 200A 908B 6AE6 594B 600C+  	dc.l	$200A908B, $6AE6594B, $600C45F3, $00FC200A, $908B6AD8, $47D2925B, $7400341B, $D3C24841
00080A6A 4241 4841 D283 7000 4E75+  	dc.l	$42414841, $D2837000, $4E7570FF, $4E754841, $70003001, $D6805283, $323CFFFF, $48415941
00080A8A 6A8E 70FF 4E75 47FA 0530+  	dc.l	$6A8E70FF, $4E7547FA, $05300C5B, $DEB2664A, $D6D37800, $72007400, $45D351CC, $00061619
00080AAA 7807 D603 D341 5242 B252+  	dc.l	$7807D603, $D3415242, $B252620A, $65ECB42A, $00026712, $65E4584A, $B25262FA, $65DCB42A
00080ACA 0002 65D6 66F0 10EA 0003+  	dc.l	$000265D6, $66F010EA, $0003670A, $51CFFFC6, $4E9464C0, $4E755348, $4E757000, $4E754EFA
00080AEA 0024 4EFA 0018 760F 3401+  	dc.l	$00244EFA, $0018760F, $3401E84A, $C44310FB, $205E51CF, $004C4E94, $64464E75, $48416104
00080B0A 654A 4841 7404 760F E579+  	dc.l	$654A4841, $7404760F, $E5791801, $C84310FB, $403E51CF, $00044E94, $6532E579, $1801C843
00080B2A 10FB 402C 51CF 0004 4E94+  	dc.l	$10FB402C, $51CF0004, $4E946520, $E5791801, $C84310FB, $401A51CF, $00044E94, $650EE579
00080B4A C243 10FB 100A 51CF 0004+  	dc.l	$C24310FB, $100A51CF, $00044ED4, $4E753031, $32333435, $36373839, $41424344, $45464EFA
00080B6A 0026 4EFA 001A 7407 7018+  	dc.l	$00264EFA, $001A7407, $7018D201, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754841
00080B8A 6104 6518 4841 740F 7018+  	dc.l	$61046518, $4841740F, $7018D241, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754EFA
00080BAA 0010 4EFA 0048 47FA 009A+  	dc.l	$00104EFA, $004847FA, $009A0241, $00FF6004, $47FA008C, $42007609, $381B3403, $924455CA
00080BCA FFFC D244 9443 4442 8002+  	dc.l	$FFFCD244, $94434442, $8002670E, $06020030, $10C251CF, $00064E94, $6510381B, $6ADC0601
00080BEA 0030 10C1 51CF 0004 4ED4+  	dc.l	$003010C1, $51CF0004, $4ED44E75, $47FA002E, $42007609, $281B3403, $928455CA, $FFFCD284
00080C0A 9443 4442 8002 670E 0602+  	dc.l	$94434442, $8002670E, $06020030, $10C251CF, $00064E94, $65D4281B, $6ADC609E, $3B9ACA00
00080C2A 05F5 E100 0098 9680 000F+  	dc.l	$05F5E100, $00989680, $000F4240, $000186A0, $00002710, $FFFF03E8, $0064000A, $FFFF2710
00080C4A 03E8 0064 000A FFFF 48C1+  	dc.l	$03E80064, $000AFFFF, $48C16008, $4EFA0006, $488148C1, $48E75060, $4EBAFD94, $66182E81
00080C6A 4EBA FE24 4CDF 060A 650A+  	dc.l	$4EBAFE24, $4CDF060A, $650A0803, $00036604, $4EFA00B6, $4E754CDF, $060A0803, $00026708
00080C8A 47FA 000A 4EFA 00B4 70FF+  	dc.l	$47FA000A, $4EFA00B4, $70FF60DE, $3C756E6B, $6E6F776E, $3E0010FC, $002B51CF, $00064E94
00080CAA 65D2 4841 4A41 6700 FE5A+  	dc.l	$65D24841, $4A416700, $FE5A6000, $FE520803, $000366C0, $4EFAFE46, $48E7F810, $10D95FCF
00080CCA FFFC 6E14 6718 1620 7470+  	dc.l	$FFFC6E14, $67181620, $7470C403, $4EBB201A, $64EA4CDF, $081F4E75, $4E9464E0, $60F45348
00080CEA 4E94 4CDF 081F 4E75 47FA+  	dc.l	$4E944CDF, $081F4E75, $47FAFDF4, $B702D402, $4EFB205A, $4E714E71, $47FAFEA4, $B702D402
00080D0A 4EFB 204A 4E71 4E71 47FA+  	dc.l	$4EFB204A, $4E714E71, $47FAFE54, $B702D402, $4EFB203A, $53484E75, $47FAFF2E, $14030242
00080D2A 0003 D442 4EFB 2026 4A40+  	dc.l	$0003D442, $4EFB2026, $4A406B08, $4A816716, $4EFAFF64, $4EFAFF78, $265A10DB, $57CFFFFC
00080D4A 67D2 4E94 64F4 4E75 5248+  	dc.l	$67D24E94, $64F44E75, $5248603C, $504B321A, $4ED3584B, $221A4ED3, $52486022, $504B321A
00080D6A 6004 584B 221A 6A08 4481+  	dc.l	$6004584B, $221A6A08, $448110FC, $002D6004, $10FC002B, $51CF0006, $4E9465CA, $4ED351CF
00080D8A 0006 4E94 65C0 10D9 51CF+  	dc.l	$00064E94, $65C010D9, $51CFFFBC, $4ED44BF9, $00C00004, $4DEDFFFC, $4A516B10, $2A9941D2
00080DAA 3818 4EBA 01F8 43E9 0020+  	dc.l	$38184EBA, $01F843E9, $002060EC, $544941FA, $00482ABC, $C0000000, $70007603, $3C803419
00080DCA 3C82 3419 6AFA 7200 4EB0+  	dc.l	$3C823419, $6AFA7200, $4EB02010, $51CBFFEE, $2A194E63, $26C526D9, $26D936FC, $5D002A85
00080DEA 7000 3219 6112 2ABC 4000+  	dc.l	$70003219, $61122ABC, $40000000, $72006108, $3ABC8174, $2A854E75, $2C802C80, $2C802C80
00080E0A 2C80 2C80 2C80 2C80 51C9+  	dc.l	$2C802C80, $2C802C80, $51C9FFEE, $4E754CAF, $00030004, $48E76010, $4E6B0C2B, $005D000C
00080E2A 661A 3413 0242 E000 C2EB+  	dc.l	$661A3413, $0242E000, $C2EB000A, $D441D440, $D4403682, $23DB00C0, $000436DB, $4CDF0806
00080E4A 4E75 2F0B 4E6B 0C2B 005D+  	dc.l	$4E752F0B, $4E6B0C2B, $005D000C, $66127200, $32130241, $1FFF82EB, $000A2001, $4840E248
00080E6A 265F 4E75 2F0B 4E6B 0C2B+  	dc.l	$265F4E75, $2F0B4E6B, $0C2B005D, $000C6618, $3F003013, $D06B000A, $02405FFF, $368023DB
00080E8A 00C0 0004 36DB 301F 265F+  	dc.l	$00C00004, $36DB301F, $265F4E75, $2F0B4E6B, $0C2B005D, $000C6604, $37410008, $265F4E75
00080EAA 2F0B 4E6B 0C2B 005D 000C+  	dc.l	$2F0B4E6B, $0C2B005D, $000C6606, $584B36C1, $36C1265F, $4E7561D4, $487AFFAA, $48E77E12
00080ECA 4E6B 0C2B 005D 000C 661C+  	dc.l	$4E6B0C2B, $005D000C, $661C2A1B, $4C93005C, $48464DF9, $00C00000, $72001218, $6E0E6B28
00080EEA 4893 001C 2705 4CDF 487E+  	dc.l	$4893001C, $27054CDF, $487E4E75, $51CB000E, $D642DA86, $0885001D, $2D450004, $D2443C81
00080F0A 7200 1218 6EE6 67D8 0241+  	dc.l	$72001218, $6EE667D8, $0241001E, $4EFB1002, $DA86721D, $03856020, $6026602A, $6032603A
00080F2A 1418 6014 1818 60D8 6036+  	dc.l	$14186014, $181860D8, $60361218, $D2417680, $4843CA83, $48418A81, $36022D45, $000460C0
00080F4A 0244 07FF 60BA 0244 07FF+  	dc.l	$024407FF, $60BA0244, $07FF0044, $200060B0, $024407FF, $00444000, $60A60044, $600060A0
00080F6A 3F04 1E98 381F 6098 487A+  	dc.l	$3F041E98, $381F6098, $487AFEFA, $2F0C49FA, $00164FEF, $FFF041D7, $7E0E4EBA, $FD3C4FEF
00080F8A 0010 285F 4E75 4218 4447+  	dc.l	$0010285F, $4E754218, $44470647, $000F90C7, $2F084EBA, $FF28205F, $7E0E4E75, $741E1018
00080FAA 1200 E609 C242 3CB1 1000+  	dc.l	$1200E609, $C2423CB1, $1000D000, $C0423CB1, $000051CC, $FFEA4E75
00080FC2                            
00080FC2                            ; ---------------------------------------------------------------
00080FC2                            ; WARNING!
00080FC2                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
00080FC2                            ;	Symbol data should be appended here after ROM is compiled
00080FC2                            ;	by ConvSym utility, otherwise debugger modules won't be able
00080FC2                            ;	to resolve symbol names.
00080FC2                            ; ---------------------------------------------------------------
00080FC2                            ; ---------------------------------------------------------------
