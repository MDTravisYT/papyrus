00000000                            		include		"Debugger.asm"
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ;
00000000                            ; (c) 2016-2023, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugger customization
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; Enable debugger extensions
00000000                            ; Pressing A/B/C on the exception screen can open other debuggers
00000000                            ; Pressing Start or unmapped button returns to the exception
00000000 =00000001                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON
00000000                            
00000000                            ; Debuggers mapped to pressing A/B/C on the exception screen
00000000                            ; Use 0 to disable button, use debugger's entry point otherwise.
00000000                            DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		Debugger_AddressRegisters	; display address register symbols
00000000                            DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		Debugger_Backtrace			; display exception backtrace
00000000 =00000000                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Creates assertions for debugging
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash!
00000000                            ;	assert.w	d5, eq			; d5 must be $0000!
00000000                            ;	assert.l	a1, hi, a0		; asert a1 > a0, or else crash!
00000000                            ;	assert.b	MemFlag, ne		; MemFlag must be non-zero!
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            assert	macro	src, cond, dest
00000000                            	; Assertions only work in DEBUG builds
00000000                            	if def(__DEBUG__)
00000000                            	if narg=3
00000000                            		cmp.\0	\dest, \src
00000000                            	else narg=2
00000000                            		tst.\0	\src
00000000                            	endc
00000000                            		b\cond\.s	@skip\@
00000000                            		RaiseError	"Assertion failed:%<endl>\src \cond \dest"
00000000                            	@skip\@:
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Raises an error with the given message
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	RaiseError	"Something is wrong"
00000000                            ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
00000000                            ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            	pea		*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		__global__ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			jsr		\console_program										; ... an aligned "jsr" instruction that calls console program itself
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            		endc
00000000                            	else
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)			; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            			even								; ... in case \opts argument is empty or skipped
00000000                            		endc
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Console interface
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	Console.Run	YourConsoleProgram
00000000                            ;	Console.Write "Hello "
00000000                            ;	Console.WriteLine "...world!"
00000000                            ;	Console.SetXY #1, #4
00000000                            ;	Console.WriteLine "Your data is %<.b d0>"
00000000                            ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            Console &
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__Console_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","run")|strcmp("\0","Run")
00000000                            		jsr		__global__ErrorHandler_ConsoleOnly
00000000                            		jsr		\1
00000000                            		bra.s	*
00000000                            	elseif strcmp("\0","clear")|strcmp("\0","Clear")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_ClearConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","pause")|strcmp("\0","Pause")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_PauseConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","sleep")|strcmp("\0","Sleep")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	d0, -(sp)
00000000                            		move.l	a0, -(sp)
00000000                            		move.w	\1, d0
00000000                            		subq.w	#1, d0
00000000                            		bcs.s	@sleep_done\@
00000000                            		@sleep_loop\@:
00000000                            			jsr		__global__VSync
00000000                            			dbf		d0, @sleep_loop\@
00000000                            	@sleep_done\@:
00000000                            		move.l	(sp)+, a0
00000000                            		move.w	(sp)+, d0
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","setxy")|strcmp("\0","SetXY")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		__global__Console_SetPosAsXY_Stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__Console_StartNewLine
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            KDebug &
00000000                            	if def(__DEBUG__)	; KDebug interface is only available in DEBUG builds
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__KDebug_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__KDebug_FlushLine
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","starttimer")|strcmp("\0","StartTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9FC0, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","endtimer")|strcmp("\0","EndTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9F00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakpoint")|strcmp("\0","BreakPoint")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9D00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""KDebug"""
00000000                            	endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		__global__ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even													; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController	; ... extensions controller
00000000                            		else
00000000                            			dc.b	\opts+0
00000000                            			even
00000000                            		endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	__stack:set		0						; size of actual stack
00000000                            	__sp:	set		0						; stack displacement
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            	__lpos:	set		1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	while (__pos)
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."    
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			
00000000                            			; Validate format setting ("param")
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			elseif strcmp("\__param","signed")
00000000                            				__param: substr ,,"hex+signed"	; if param is "signed", correct it to "hex+signed"
00000000                            			endc
00000000                            			if (\__param < $80)
00000000                            				inform	2,"Illegal operand format setting: ""\__param\"". Expected ""hex"", ""dec"", ""bin"", ""sym"", ""str"" or their derivatives."
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            		__lpos:	set		__endpos+1
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            		include		"SRC/SYSTEM/RAM.I"
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A10000                  IO_PCBVER	    =	$A10000
00000000 =00A10001                  VERSION     	=	$A10001
00000000 =00A10002                  IO_CT1_DATA	    =	$A10002
00000000 =00A10003                  IODATA1     	=	$A10003
00000000 =00A10006                  IO_EXT_DATA	    =	$A10006
00000000 =00A10008                  IOCTRL1     	=	$A10008
00000000 =00A1000A                  IO_CT2_CTRL 	=	$A1000A
00000000 =00A1000C                  IOCTRL3     	=	$A1000C
00000000 =00A1000E                  IO_CT1_RX	    =	$A1000E
00000000 =00A10010                  IO_CT1_TX	    =	$A10010
00000000 =00A10012                  IO_CT1_SMODE	=	$A10012
00000000 =00A10014                  IO_CT2_RX	    =	$A10014
00000000 =00A10016                  IO_CT2_TX	    =	$A10016
00000000 =00A10018                  IO_CT2_SMODE	=	$A10018
00000000 =00A1001A                  IO_EXT_RX	    =	$A1001A
00000000 =00A1001C                  IO_EXT_TX	    =	$A1001C
00000000 =00A1001E                  IO_EXT_SMODE	=	$A1001E
00000000 =00A00000                  z80_ram:		equ $A00000	
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A11100                  Z80BUS			=	$A11100
00000000 =00A11200                  Z80_RESET		=	$A11200
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A14000                  SEGATMSS		=	$A14000
00000000                            
00000000 =00008000                  PLANE_A			=	$8000
00000000 =0000A000                  PLANE_B			=	$A000
00000000 =0000C000                  PLANE_W			=	$C000
00000000                            
00000000 =00C00000                  VDPDATA			=	$C00000
00000000 =00C00004                  VDPCTRL			=	$C00004
00000000 =00C00011                  psg_input:		equ $C00011
00000000 =40000000                  VRAMWRITE       =	$40000000
00000000 =40000010                  VSRAMWRITE      =	$40000010
00000000 =40000080                  VRAMDMA         =	$40000080
00000000 =40000090                  VSRAMDMA        =	$40000090
00000000 =C0000000                  CRAMWRITE       =	$C0000000
00000000 =C0000080                  CRAMDMA         =	$C0000080
00000000                            
00000000 =FFFFAC00                  SPRITES			=	$FFFFAC00
00000000 =FFFFCC00                  HSCROLLTABLE	=	$FFFFCC00
00000000 =FFFFD000                  OBJSLOT00		=	$FFFFD000
00000000 =FFFFD040                  OBJSLOT01		=	$FFFFD040
00000000 =FFFFD080                  OBJSLOT02		=	$FFFFD080
00000000 =FFFFD0C0                  OBJSLOT03		=	$FFFFD0C0
00000000 =FFFFD100                  OBJSLOT04		=	$FFFFD100
00000000 =FFFFD140                  OBJSLOT05		=	$FFFFD140
00000000 =FFFFD180                  OBJSLOT06		=	$FFFFD180
00000000 =FFFFD1C0                  OBJSLOT07		=	$FFFFD1C0
00000000 =FFFFD200                  OBJSLOT08		=	$FFFFD200
00000000 =FFFFD240                  OBJSLOT09		=	$FFFFD240
00000000 =FFFFD280                  OBJSLOT0A		=	$FFFFD280
00000000 =FFFFD2C0                  OBJSLOT0B		=	$FFFFD2C0
00000000 =FFFFD300                  OBJSLOT0C		=	$FFFFD300
00000000 =FFFFD340                  OBJSLOT0D		=	$FFFFD340
00000000 =FFFFD380                  OBJSLOT0E		=	$FFFFD380
00000000 =FFFFD3C0                  OBJSLOT0F		=	$FFFFD3C0
00000000 =FFFFD400                  OBJSLOT10		=	$FFFFD400
00000000 =FFFFD440                  OBJSLOT11		=	$FFFFD440
00000000 =FFFFD480                  OBJSLOT12		=	$FFFFD480
00000000 =FFFFD4C0                  OBJSLOT13		=	$FFFFD4C0
00000000 =FFFFD500                  OBJSLOT14		=	$FFFFD500
00000000 =FFFFD540                  OBJSLOT15		=	$FFFFD540
00000000 =FFFFD580                  OBJSLOT16		=	$FFFFD580
00000000 =FFFFD5C0                  OBJSLOT17		=	$FFFFD5C0
00000000 =FFFFD600                  OBJSLOT18		=	$FFFFD600
00000000 =FFFFD640                  OBJSLOT19		=	$FFFFD640
00000000 =FFFFD680                  OBJSLOT1A		=	$FFFFD680
00000000 =FFFFD6C0                  OBJSLOT1B		=	$FFFFD6C0
00000000 =FFFFD700                  OBJSLOT1C		=	$FFFFD700
00000000 =FFFFD740                  OBJSLOT1D		=	$FFFFD740
00000000 =FFFFD780                  OBJSLOT1E		=	$FFFFD780
00000000 =FFFFD7C0                  OBJSLOT1F		=	$FFFFD7C0
00000000 =FFFFF600                  GAMEMODE		=	$FFFFF600
00000000 =FFFFF604                  JOYPAD			=	$FFFFF604
00000000 =FFFFF605                  JOYPADPRESS		=	$FFFFF605
00000000 =FFFFF606                  JOYPAD2			=	$FFFFF606
00000000 =FFFFF607                  JOYPAD2PRESS	=	$FFFFF607
00000000 =FFFFF60C                  VDPBUFFER		=	$FFFFF60C
00000000 =FFFFF614                  TIMER			=	$FFFFF614
00000000 =FFFFF616                  VDP_SCREENPOSY	=	$FFFFF616
00000000 =FFFFF61A                  VDP_SCREENPOSX	=	$FFFFF61A
00000000 =FFFFF626                  PALFADEARGS		=	$FFFFF626
00000000 =FFFFF627                  PALFADESIZE		=	$FFFFF627
00000000 =FFFFF62C                  SPRITECOUNT		=	$FFFFF62C
00000000 =FFFFF632                  PALCYCCURRENT	=	$FFFFF632
00000000 =FFFFF700                  SCROLL_FGPOSX	=	$FFFFF700
00000000 =FFFFF704                  SCROLL_FGPOSY	=	$FFFFF704
00000000 =FFFFF708                  SCROLL_BGPOSX	=	$FFFFF708
00000000 =FFFFF710                  SCROLL_BG2POSX	=	$FFFFF710
00000000 =FFFFF718                  SCROLL_BG3POSX	=	$FFFFF718
00000000 =FFFFF756                  SCROLL_BG1FLAGS	=	$FFFFF756
00000000 =FFFFF754                  SCROLL_FGFLAGS	=	$FFFFF754
00000000 =FFFFF758                  SCROLL_BG2FLAGS	=	$FFFFF758
00000000 =FFFFF634                  PALCYCTIMER		=	$FFFFF634
00000000 =FFFFF62A                  VBLANKCMD		=	$FFFFF62A
00000000 =FFFFF644                  VDPBUFFER2		=	$FFFFF644
00000000 =FFFFF648                  HBLANKFLAG		=	$FFFFF648
00000000 =FFFFF800                  SPRITETABLE		=	$FFFFF800
00000000 =FFFFFB00                  PALETTE			=	$FFFFFB00
00000000 =FFFFFB80                  PALFADEBUFFER	=	$FFFFFB80
00000000 =FFFFFE0C                  VBLANKCOUNTER	=	$FFFFFE0C
00000000 =FFFFF009                  SOUNDPOKE		= 	$FFFFF009
00000000 =FFFFFFF8                  HARDWAREVERSION	=	$FFFFFFF8
00000000                            
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000 =00000000                  OBJ.ID          =	$00
00000000 =00000001                  OBJ.RENDERFLAGS =	$01
00000000 =00000002                  OBJ.TILE        =	$02
00000000 =00000004                  OBJ.MAP         =	$04
00000000 =00000008                  OBJ.X           =	$08
00000000 =0000000A                  OBJ.YSCR        =	$0A
00000000 =0000000C                  OBJ.Y           =	$0C
00000000 =0000000E                  OBJ.YSUB        =	$0E
00000000 =00000010                  OBJ.XSPEED      =	$10
00000000 =00000012                  OBJ.YSPEED      =	$12
00000000 =00000014                  OBJ.INERTIA     =	$14
00000000 =00000016                  OBJ.YRAD        =	$16
00000000 =00000017                  OBJ.XRAD        =	$17
00000000 =00000018                  OBJ.XDISP       =	$18
00000000 =00000019                  OBJ.PRIORITY    =	$19
00000000 =0000001A                  OBJ.FRAME       =	$1A
00000000 =0000001B                  OBJ.ANIMFRAME   =	$1B
00000000 =0000001C                  OBJ.ANIM        =	$1C
00000000 =0000001D                  OBJ.ANIMPREVIOUS=	$1D
00000000 =0000001E                  OBJ.FRAMETIMER  =	$1E
00000000 =0000001F                  OBJ.USER_1F     =	$1F
00000000 =00000020                  OBJ.COLLISION   =	$20
00000000 =00000021                  OBJ.COLPROP     =	$21
00000000 =00000022                  OBJ.STATUS      =	$22
00000000 =00000023                  OBJ.RESPAWN     =	$23
00000000 =00000024                  OBJ.ACTION      =	$24
00000000 =00000025                  OBJ.SUBACTION   =	$25
00000000 =00000026                  OBJ.ANGLE       =	$26
00000000 =00000027                  OBJ.FIELD_27    =	$27
00000000 =00000028                  OBJ.ARGUMENT    =	$28
00000000 =00000029                  OBJ.FIELD_29    =	$29
00000000 =0000002A                  OBJ.FIELD_2A    =	$2A
00000000 =0000002B                  OBJ.FIELD_2B    =	$2B
00000000 =0000002C                  OBJ.FIELD_2C    =	$2C
00000000 =0000002D                  OBJ.FIELD_2D    =	$2D
00000000 =0000002E                  OBJ.FIELD_2E    =	$2E
00000000 =0000002F                  OBJ.FIELD_2F    =	$2F
00000000 =00000030                  OBJ.FIELD_30    =	$30
00000000 =00000031                  OBJ.FIELD_31    =	$31
00000000 =00000032                  OBJ.FIELD_32    =	$32
00000000 =00000033                  OBJ.FIELD_33    =	$33
00000000 =00000034                  OBJ.FIELD_34    =	$34
00000000 =00000035                  OBJ.FIELD_35    =	$35
00000000 =00000036                  OBJ.FIELD_36    =	$36
00000000 =00000037                  OBJ.FIELD_37    =	$37
00000000 =00000038                  OBJ.FIELD_38    =	$38
00000000 =00000039                  OBJ.FIELD_39    =	$39
00000000 =0000003A                  OBJ.FIELD_3A    =	$3A
00000000 =0000003B                  OBJ.FIELD_3B    =	$3B
00000000 =0000003C                  OBJ.FIELD_3C    =	$3C
00000000 =0000003D                  OBJ.FIELD_3D    =	$3D
00000000 =0000003E                  OBJ.FIELD_3E    =	$3E
00000000 =0000003F                  OBJ.FIELD_3F    =	$3F
00000000 =00000040                  OBJ.SIZE        =	$40
00000000 =00000040                  OBJ.SIZE        =	$40
00000000                            		include		"SOUND/SOUNDRAM.I"
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses TrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000 =FFFFF000                  v_snddriver_ram	= 	$FFFFF000 
00000000                            
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_A5:		equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_AB:		equ ((ptr_sndAB-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            		include		"SRC/SYSTEM/MACRO.I"
00000000                            ALIGN	MACRO
00000000                            		DCB.B (\1-(*%\1))%\1,0
00000000                            		ENDM
00000000                            		
00000000                            COPYTILEMAP		MACRO	source,loc,width,height
00000000                            		lea		(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr		DrawTileMap
00000000                            		endm
00000000                            		
00000000                            WRITEVRAM	MACRO	LOC
00000000                            		MOVE.L	#VRAMWRITE+((LOC&$3FFF)<<16)+((LOC&$C000)>>14),	(VDPCTRL)
00000000                            		ENDM
00000000                            		
00000000                            startZ80:       macro
00000000                            		move.w	#0,(Z80BUS).l
00000000                            		endm
00000000                            		
00000000                            stopZ80:        macro
00000000                            		move.w	#$100,(Z80BUS).l
00000000                            		endm
00000000                            		
00000000                            waitZ80:	macro
00000000                            .wait:		btst	#0,(Z80BUS).l
00000000                            		bne.s	.wait
00000000                            		endm
00000000                            		
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(Z80_RESET).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(Z80_RESET).l
00000000                            		endm
00000000                            		endm
00000000                            		include		"SRC/SYSTEM/HEADER.ASM"
00000000 00FF FE00                  		DC.L	$00FFFE00
00000004 0000 0000                  		DC.L	START
00000008 0000 0000                  		DC.L 	BusError		; Bus error
0000000C 0000 0000                  		DC.L 	AddressError	; Address error (4)
00000010 0000 0000                  		DC.L 	IllegalInstr	; Illegal instruction
00000014 0000 0000                  		DC.L 	ZeroDivide		; Division by zero
00000018 0000 0000                  		DC.L 	ChkInstr		; CHK exception
0000001C 0000 0000                  		DC.L 	TrapvInstr		; TRAPV exception (8)
00000020 0000 0000                  		DC.L 	PrivilegeViol	; Privilege violation
00000024 0000 0000                  		DC.L 	Trace			; TRACE exception
00000028 0000 0000                  		DC.L 	Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		DC.L 	Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		DC.L	ERROR
00000034 0000 0000                  		DC.L	ERROR
00000038 0000 0000                  		DC.L	ERROR
0000003C 0000 0000                  		DC.L	ERROR
00000040 0000 0000                  		DC.L	ERROR
00000044 0000 0000                  		DC.L	ERROR
00000048 0000 0000                  		DC.L	ERROR
0000004C 0000 0000                  		DC.L	ERROR
00000050 0000 0000                  		DC.L	ERROR
00000054 0000 0000                  		DC.L	ERROR
00000058 0000 0000                  		DC.L	ERROR
0000005C 0000 0000                  		DC.L	ERROR
00000060 0000 0000                  		DC.L	ERROR
00000064 0000 0000                  		DC.L	INT
00000068 0000 0000                  		DC.L	INT
0000006C 0000 0000                  		DC.L	INT
00000070 0000 0000                  		DC.L	HBLANK
00000074 0000 0000                  		DC.L	INT
00000078 0000 0000                  		DC.L	VBLANK
0000007C 0000 0000                  		DC.L	INT
00000080 0000 0000                  		DC.L	ERROR
00000084 0000 0000                  		DC.L	ERROR
00000088 0000 0000                  		DC.L	ERROR
0000008C 0000 0000                  		DC.L	ERROR
00000090 0000 0000                  		DC.L	ERROR
00000094 0000 0000                  		DC.L	ERROR
00000098 0000 0000                  		DC.L	ERROR
0000009C 0000 0000                  		DC.L	ERROR
000000A0 0000 0000                  		DC.L	ERROR
000000A4 0000 0000                  		DC.L	ERROR
000000A8 0000 0000                  		DC.L	ERROR
000000AC 0000 0000                  		DC.L	ERROR
000000B0 0000 0000                  		DC.L	ERROR
000000B4 0000 0000                  		DC.L	ERROR
000000B8 0000 0000                  		DC.L	ERROR
000000BC 0000 0000                  		DC.L	ERROR
000000C0 0000 0000                  		DC.L	ERROR
000000C4 0000 0000                  		DC.L	ERROR
000000C8 0000 0000                  		DC.L	ERROR
000000CC 0000 0000                  		DC.L	ERROR
000000D0 0000 0000                  		DC.L	ERROR
000000D4 0000 0000                  		DC.L	ERROR
000000D8 0000 0000                  		DC.L	ERROR
000000DC 0000 0000                  		DC.L	ERROR
000000E0 0000 0000                  		DC.L	ERROR
000000E4 0000 0000                  		DC.L	ERROR
000000E8 0000 0000                  		DC.L	ERROR
000000EC 0000 0000                  		DC.L	ERROR
000000F0 0000 0000                  		DC.L	ERROR
000000F4 0000 0000                  		DC.L	ERROR
000000F8 0000 0000                  		DC.L	ERROR
000000FC 0000 0000                  		DC.L	ERROR
00000100 5345 4741 204D 4547 4120+  		DC.B	'SEGA MEGA DRIVE '		;	SYSTEM
00000110 4D44 5452 4156 4953 2032+  		DC.B	'MDTRAVIS 2024   '		;	DATE
00000120 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	DOMESTIC TITLE
00000130 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000140 2020 2020 2020 2020 2020+  		DC.B	'                '
00000150 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	INTERNATIONAL TITLE
00000160 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000170 2020 2020 2020 2020 2020+  		DC.B	'                '
00000180 474D 2058 5858 5858 5858+  		DC.B	'GM XXXXXXXX-XX',0,0	;	SERIAL
00000190 4A20 2020 2020 2020 2020+  		DC.B	'J               '		;	I/O SUPPORT JOYPAD
000001A0 0000 0000                  		DC.L	$00000000				;	ROM START
000001A4 0007 FFFF                  		DC.L	$0007FFFF				;	ROM END
000001A8 00FF 0000                  		DC.L	$00FF0000				;	RAM START
000001AC 00FF FFFF                  		DC.L	$00FFFFFF				;	RAM END
000001B0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001C0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001D0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001E0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
00000200                            		
00000200                            INT:
00000200                            ERROR:
00000200 23FC C000 0000 00C0 0004   		move.l	#CRAMWRITE,	(VDPCTRL)		;	Set VDP control mode to manually write a palette to CRAM
0000020A 33FC 000E 00C0 0000        		move.w	#$000E,		VDPDATA			;	Palleting...
00000212 60EC                       		BRA.S		INT
00000214                            		
00000214                            		INCLUDE		"SRC/SYSTEM/HBLANK.ASM"
00000214                            HBLANK:
00000214 4A79 FFFF F648             		TST.W	HBLANKFLAG
0000021A 6700                       		BEQ.S	.EXIT
0000021C 48E7 8084                  		MOVEM.L	D0/A0/A5,-(SP)
00000220 33FC 0000 FFFF F648        		MOVE.W	#0,	HBLANKFLAG
00000228 33FC 8405 00C0 0004        		MOVE.W	#$8405,	(VDPCTRL).L
00000230 33FC 857C 00C0 0004        		MOVE.W	#$857C,	(VDPCTRL).L
00000238 23FC 7800 0003 00C0 0004   		MOVE.L	#$78000003,	(VDPCTRL).L
00000242 41F9 FFFF F800             		LEA		SPRITETABLE,	A0
00000248 4BF9 00C0 0000             		LEA		(VDPDATA).L,	A5
0000024E 303C 009F                  		MOVE.W	#$9F,	D0
00000252                            		
00000252                            	.SPRITE:
00000252 2A98                       		MOVE.L	(A0)+,	(A5)
00000254 51C8 FFFC                  		DBF		D0,	.SPRITE
00000258 4CDF 2101                  		MOVEM.L	(SP)+,	D0/A0/A5
0000025C                            		
0000025C                            	.EXIT:
0000025C 4E73                       		RTE
0000025C 4E73                       		RTE
0000025E                            		INCLUDE		"SRC/SYSTEM/VBLANK.ASM"
0000025E                            VBLANK:
0000025E 48E7 FFFE                  		MOVEM.L	D0-D7/A0-A6,	-(SP)
00000262 4A39 FFFF F62A             		TST.B	VBLANKCMD
00000268 6700                       		BEQ.S	.END
0000026A 3039 00C0 0004             		MOVE.W	(VDPCTRL).L,	D0
00000270 23FC 4000 0010 00C0 0004   		MOVE.L	#$40000010,	(VDPCTRL).L
0000027A 23F9 FFFF F616 00C0 0000   		MOVE.L	VDP_SCREENPOSY,	(VDPDATA).L
00000284 0839 0006 FFFF FFF8        		BTST	#6,	HARDWAREVERSION
0000028C 6700                       		BEQ.S	.NTSC
0000028E 303C 0700                  		MOVE.W	#$700,	D0
00000292                            		
00000292                            	.PAL:
00000292 51C8 FFFE                  		DBF	D0,	.PAL
00000296                            		
00000296                            	.NTSC:
00000296 1039 FFFF F62A             		MOVE.B	VBLANKCMD,	D0
0000029C 13FC 0000 FFFF F62A        		MOVE.B	#0,	VBLANKCMD
000002A4 33FC 0001 FFFF F648        		MOVE.W	#1,	HBLANKFLAG
000002AC 0240 003E                  		ANDI.W	#%111110,	D0
000002B0 303B 0000                  		MOVE.W	.INDEX(PC,D0.W),	D0
000002B4 4EBB 0000                  		JSR		.INDEX(PC,D0.W)
000002B8                            		
000002B8                            	.END:
000002B8 4EB9 0000 0000             		JSR		UpdateMusic
000002BE 52B9 FFFF FE0C             		ADDQ.L	#1,	VBLANKCOUNTER
000002C4                            	;	JSR		
000002C4 4CDF 7FFF                  		MOVEM.L	(SP)+,	D0-D7/A0-A6
000002C8 4E73                       		RTE
000002CA                            		
000002CA                            	VBL_INVALID:
000002CA 4E75                       		RTS
000002CC                            		
000002CC                            	.INDEX:
000002CC 0000                       		DC.W	VBL_DEFAULT-.INDEX	;	0
000002CE FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	2
000002D0 FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	4
000002D2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	6
000002D4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	8
000002D6 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	A
000002D8 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	C
000002DA FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	E
000002DC FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	10
000002DE 0000                       		DC.W	VBL_PALETTE-.INDEX  ;	12
000002E0 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	14
000002E2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	16
000002E4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	18
000002E6 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1A
000002E8 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1C
000002EA FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1E
000002EC                            		
000002EC                            VBL_DEFAULT:
000002EC 4EB9 0000 0000             		JSR		READJOYPADS
000002F2 6100 0000                  		BSR.W	REFRESH_VDP_BUFFERS
000002F6 4A78 F614                  		TST.W	(TIMER).W
000002FA 6700 0000                  		BEQ.W	@STOP
000002FE 5378 F614                  		SUBQ.W	#1,	(TIMER).W
00000302                            	@STOP:	
00000302 4E75                       		RTS
00000304                            		
00000304                            VBL_PALETTE:
00000304                            		
00000304                            REFRESH_VDP_BUFFERS:
00000304                            ;		MOVE.W	#$100,	(Z80BUS).L
00000304                            ;		
00000304                            ;	@LOOP:
00000304                            ;		BTST	#0,	(Z80BUS).L
00000304                            ;		BNE.S	@LOOP
00000304                            		
00000304 4BF9 00C0 0004             		LEA	(VDPCTRL).L,	A5
0000030A 2ABC 9400 9340                     move.l  #$94009340,(a5)
00000310 2ABC 96FD 9580                     move.l  #$96FD9580,(a5)
00000316 3ABC 977F                          move.w  #$977F,(a5)
0000031A 3ABC C000                          move.w  #$C000,(a5)
0000031E 31FC 0080 F644                     move.w  #$80,(VDPBUFFER2).w
00000324 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000328 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
0000032E 2ABC 9401 9340                     move.l  #$94019340,(a5)
00000334 2ABC 96FC 9500                     move.l  #$96FC9500,(a5)
0000033A 3ABC 977F                          move.w  #$977F,(a5)
0000033E 3ABC 7800                          move.w  #$7800,(a5)
00000342 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
00000348 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
0000034C 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
00000352                            
00000352                            loc_EDC:
00000352 2ABC 9401 93C0                     move.l  #$940193C0,(a5)
00000358 2ABC 96E6 9500                     move.l  #$96E69500,(a5)
0000035E 3ABC 977F                          move.w  #$977F,(a5)
00000362 3ABC 7C00                          move.w  #$7C00,(a5)
00000366 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
0000036C 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000370 33FC 0000 00A1 1100                move.w  #0,(Z80BUS).l
00000378 4E75                               rts
00000378 4E75                               rts
0000037A                            		INCLUDE		"SRC/SYSTEM/SETUP.ASM"
0000037A 8000                       SetupValues:	dc.w $8000		; VDP register start number
0000037C 3FFF                       		dc.w $3FFF		; size of RAM/4
0000037E 0100                       		dc.w $100		; VDP register diff
00000380                            
00000380 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
00000384 00A1 1100                  		dc.l Z80BUS	; Z80 bus request
00000388 00A1 1200                  		dc.l Z80_RESET		; Z80 reset
0000038C 00C0 0000                  		dc.l VDPDATA	; VDP data
00000390 00C0 0004                  		dc.l VDPCTRL	; VDP control
00000394                            
00000394 04                         		dc.b 4			; VDP $80 - 8-colour mode
00000395 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
00000396 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
00000397 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
00000398 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
00000399 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
0000039A 00                         		dc.b 0			; VDP $86 - unused
0000039B 00                         		dc.b 0			; VDP $87 - background colour
0000039C 00                         		dc.b 0			; VDP $88 - unused
0000039D 00                         		dc.b 0			; VDP $89 - unused
0000039E FF                         		dc.b 255		; VDP $8A - HBlank register
0000039F 00                         		dc.b 0			; VDP $8B - full screen scroll
000003A0 81                         		dc.b $81		; VDP $8C - 40 cell display
000003A1 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000003A2 00                         		dc.b 0			; VDP $8E - unused
000003A3 01                         		dc.b 1			; VDP $8F - VDP increment
000003A4 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000003A5 00                         		dc.b 0			; VDP $91 - window h position
000003A6 00                         		dc.b 0			; VDP $92 - window v position
000003A7 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000003A9 0000                       		dc.w 0			; VDP $95/96 - DMA source
000003AB 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000003AC 4000 0080                  		dc.l $40000080		; VRAM address 0
000003B0                            
000003B0 AF                         		dc.b $AF		; xor	a
000003B1 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000003B4 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000003B7 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000003BA F9                         		dc.b $F9		; ld	sp,hl
000003BB 77                         		dc.b $77		; ld	(hl),a
000003BC EDB0                       		dc.b $ED, $B0		; ldir
000003BE DDE1                       		dc.b $DD, $E1		; pop	ix
000003C0 FDE1                       		dc.b $FD, $E1		; pop	iy
000003C2 ED47                       		dc.b $ED, $47		; ld	i,a
000003C4 ED4F                       		dc.b $ED, $4F		; ld	r,a
000003C6 D1                         		dc.b $D1		; pop	de
000003C7 E1                         		dc.b $E1		; pop	hl
000003C8 F1                         		dc.b $F1		; pop	af
000003C9 08                         		dc.b $08		; ex	af,af'
000003CA D9                         		dc.b $D9		; exx
000003CB C1                         		dc.b $C1		; pop	bc
000003CC D1                         		dc.b $D1		; pop	de
000003CD E1                         		dc.b $E1		; pop	hl
000003CE F1                         		dc.b $F1		; pop	af
000003CF F9                         		dc.b $F9		; ld	sp,hl
000003D0 F3                         		dc.b $F3		; di
000003D1 ED56                       		dc.b $ED, $56		; im1
000003D3 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000003D5 E9                         		dc.b $E9		; jp	(hl)
000003D6                            
000003D6 8104                       		dc.w $8104		; VDP display mode
000003D8 8F02                       		dc.w $8F02		; VDP increment
000003DA C000 0000                  		dc.l $C0000000		; CRAM write mode
000003DE 4000 0010                  		dc.l $40000010		; VSRAM address 0
000003E2                            
000003E2 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000003E2 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000003E6                            		
000003E6                            START:
000003E6 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
000003EC 6600                       		bne.s	PortA_Ok
000003EE 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
000003F4                            PortA_Ok:
000003F4                            PortA_Ok:
000003F4 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
000003F6 4BFA FF82                  		lea	SetupValues(pc),a5	; Load setup values array address.
000003FA 4C9D 00E0                  		movem.w	(a5)+,d5-d7
000003FE 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000402 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000406 0200 000F                  		andi.b	#$F,d0
0000040A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000040C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000414                            SkipSecurity:
00000414                            SkipSecurity:
00000414 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000416 7000                       		moveq	#0,d0	; clear d0
00000418 2C40                       		movea.l	d0,a6	; clear a6
0000041A 4E66                       		move.l	a6,usp	; set usp to $0
0000041C                            		moveq	#$17,d1
0000041C 7217                       		moveq	#$17,d1
0000041E                            VDPInitLoop:
0000041E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000420 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000422 DA47                       		add.w	d7,d5		; next register
00000424 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000428                            		
00000428 289D                       		move.l	(a5)+,(a4)
0000042A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000042C 3287                       		move.w	d7,(a1)		; stop the Z80
0000042E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000430                            WaitForZ80:
00000430                            WaitForZ80:
00000430 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000432 66FC                       		bne.s	WaitForZ80	; if not, branch
00000434                            		moveq	#$25,d2
00000434 7425                       		moveq	#$25,d2
00000436                            Z80InitLoop:
00000436 10DD                       		move.b	(a5)+,(a0)+
00000438 51CA FFFC                  		dbf	d2,Z80InitLoop
0000043C                            		
0000043C 3480                       		move.w	d0,(a2)
0000043E 3280                       		move.w	d0,(a1)		; start	the Z80
00000440 3487                       		move.w	d7,(a2)		; reset	the Z80
00000442                            ClrRAMLoop:
00000442                            ClrRAMLoop:
00000442 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000444 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000448 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000044A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000044C                            		moveq	#$1F,d3	; set repeat times
0000044C 761F                       		moveq	#$1F,d3	; set repeat times
0000044E                            ClrCRAMLoop:
0000044E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000450 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000454 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000456                            		moveq	#$13,d4
00000456 7813                       		moveq	#$13,d4
00000458                            ClrVSRAMLoop:
00000458 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000045A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000045E 7A03                       		moveq	#3,d5
00000460                            PSGInitLoop:
00000460                            PSGInitLoop:
00000460 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000464 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000468 3480                       		move.w	d0,(a2)
0000046A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000046E 46FC 2700                  		move	#$2700,sr
00000472                            SkipSetup:
00000472                            SkipSetup:
00000472 4DF9 00FF 0000             		LEA		$FF0000,	A6
00000478 7E00                       		MOVEQ	#0,	D7
0000047A 3C3C 3F7F                  		MOVE.W	#($FE00/4)-1,	D6
0000047E                            		
0000047E                            	@CLEARRAM:
0000047E 2CC7                       		MOVE.L	D7,	(A6)+
00000480 51CE FFFC                  		DBF		D6,	@CLEARRAM
00000484 6100 0000                  		BSR.W	INITVDP
00000488 6100 0000                  		BSR.W	INITSOUND
0000048C 6100 0000                  		BSR.W	INITJOYPADS
00000490 11FC 0000 F600             		MOVE.B	#0*4,	(GAMEMODE).W
00000496                            		
00000496                            MAINLOOP:
00000496 1038 F600                  		MOVE.B	(GAMEMODE).W,	D0
0000049A 0240 001C                  		ANDI.W	#%00011100,	D0
0000049E 4EBB 0000                  		JSR		@INDEX(PC,D0.W)
000004A2 60F2                       		BRA.S	MAINLOOP
000004A4                            		
000004A4                            	@INDEX:
000004A4 6000 0000                  		BRA.W	LOGO
000004A8 6000 0000                  		BRA.W	MAIN
000004AC 4E75                       		RTS
000004AE                            		
000004AE                            		INCLUDE		"SRC/SYSTEM/INITVDP.ASM"
000004AE                            INITVDP:
000004AE 33FC 8004 00C0 0004        		MOVE.W	#$8000+%00000100,(VDPCTRL)		;	MODE REGISTER 1
000004B6 33FC 8174 00C0 0004        		MOVE.W	#$8100+%01110100,(VDPCTRL)      ;	MODE REGISTER 2
000004BE 33FC 8220 00C0 0004        		MOVE.W	#$8200+(PLANE_A>>10),(VDPCTRL)  ;	PLANE A LOCATION
000004C6 33FC 8330 00C0 0004        		MOVE.W	#$8300+(PLANE_W>>10),(VDPCTRL)  ;	PLANE W LOCATION
000004CE 33FC 8405 00C0 0004        		MOVE.W	#$8400+(PLANE_B>>13),(VDPCTRL)  ;	PLANE B LOCATION
000004D6 33FC 857C 00C0 0004        		MOVE.W	#$8500+%01111100,(VDPCTRL)      ;	SPRITE TABLE LOCATION
000004DE 33FC 8600 00C0 0004        		MOVE.W	#$8600+%00000000,(VDPCTRL)      ;	
000004E6 33FC 8720 00C0 0004        		MOVE.W	#$8700+%00100000,(VDPCTRL)      ;	BACKGROUND COLOR
000004EE 33FC 8800 00C0 0004        		MOVE.W	#$8800+%00000000,(VDPCTRL)      ;	MASTER SYSTEM H-SCROLL
000004F6 33FC 8900 00C0 0004        		MOVE.W	#$8900+%00000000,(VDPCTRL)      ;	MASTER SYSTEM V-SCROLL
000004FE 33FC 8A00 00C0 0004        		MOVE.W	#$8A00+%00000000,(VDPCTRL)      ;	H-INT COUNTER
00000506 33FC 8B00 00C0 0004        		MOVE.W	#$8B00+%00000000,(VDPCTRL)      ;	MODE REGISTER 3
0000050E 33FC 8C81 00C0 0004        		MOVE.W	#$8C00+%10000001,(VDPCTRL)      ;	MODE REGISTER 4
00000516 33FC 8D3F 00C0 0004        		MOVE.W	#$8D00+%00111111,(VDPCTRL)      ;	H-SCROLL DATA LOCATION
0000051E 33FC 8E00 00C0 0004        		MOVE.W	#$8E00+%00000000,(VDPCTRL)      ;	
00000526 33FC 8F02 00C0 0004        		MOVE.W	#$8F00+%00000010,(VDPCTRL)      ;	AUTO-INCREMENT VALUE
0000052E 33FC 9001 00C0 0004        		MOVE.W	#$9000+%00000001,(VDPCTRL)      ;	PLANE SIZE
00000536 33FC 9100 00C0 0004        		MOVE.W	#$9100+%00000000,(VDPCTRL)      ;	WINDOW PLANE HORIZONTAL
0000053E 33FC 9200 00C0 0004        		MOVE.W	#$9200+%00000000,(VDPCTRL)      ;	WINDOW PLANE VERTICAL
00000546 4E75                       		RTS
00000546 4E75                       		RTS
00000548                            		INCLUDE		"SRC/SYSTEM/INITSOUND.ASM"
00000548                            INITSOUND:
00000548 4E71                       		nop	
0000054A 33FC 0100 00A1 1100        		stopZ80
00000552 33FC 0100 00A1 1200        		resetZ80
0000055A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00000560 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00000566 6100 0000                  		bsr.w	KosDec		; decompress
0000056A 33FC 0000 00A1 1200        		resetZ80a
00000572 4E71                       		nop	
00000574 4E71                       		nop	
00000576 4E71                       		nop	
00000578 4E71                       		nop	
0000057A 33FC 0100 00A1 1200        		resetZ80
00000582 33FC 0000 00A1 1100        		startZ80
0000058A 4E75                       		rts	
0000058C                            ; End of function SoundDriverLoad
0000058C                            ; End of function SoundDriverLoad
0000058C                            		INCLUDE		"SRC/SYSTEM/INITJOYPADS.ASM"
0000058C                            INITJOYPADS:
0000058C 33FC 0100 00A1 1100        		stopZ80
00000594 0839 0000 00A1 1100 66F6   		waitZ80
0000059E 7040                       		MOVEQ	#$40,	D0
000005A0 13C0 00A1 0009             		MOVE.B	D0,	(IOCTRL1+1).L
000005A6 13C0 00A1 000B             		MOVE.B	D0,	(IO_CT2_CTRL+1).L
000005AC 13C0 00A1 000D             		MOVE.B	D0,	(IOCTRL3+1).L
000005B2 33FC 0000 00A1 1100        		startZ80
000005BA 4E75                       		RTS
000005BA 4E75                       		RTS
000005BC                            		
000005BC                            		INCLUDE		"SRC/SYSTEM/Kosinski.ASM"
000005BC                            ; ---------------------------------------------------------------------------
000005BC                            ; Kosinski decompression algorithm
000005BC                            
000005BC                            ; input:
000005BC                            ;	a0 = source address
000005BC                            ;	a1 = destination address
000005BC                            
000005BC                            ; usage:
000005BC                            ;	lea	(source).l,a0
000005BC                            ;	lea	(destination).l,a1
000005BC                            ;	bsr.w	KosDec
000005BC                            ; ---------------------------------------------------------------------------
000005BC                            
000005BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BC                            
000005BC                            
000005BC                            KosDec:
000005BC                            
000005BC 558F                       		subq.l	#2,sp	; make space for 2 bytes on the stack
000005BE 1F58 0001                  		move.b	(a0)+,1(sp)
000005C2 1E98                       		move.b	(a0)+,(sp)
000005C4 3A17                       		move.w	(sp),d5	; get first description field
000005C6 780F                       		moveq	#$F,d4	; set to loop for 16 bits
000005C8                            
000005C8                            Kos_Loop:
000005C8 E24D                       		lsr.w	#1,d5	; shift bit into the c flag
000005CA 40C6                       		move	sr,d6
000005CC 51CC 0000                  		dbf	d4,@chkbit
000005D0 1F58 0001                  		move.b	(a0)+,1(sp)
000005D4 1E98                       		move.b	(a0)+,(sp)
000005D6 3A17                       		move.w	(sp),d5
000005D8 780F                       		moveq	#$F,d4
000005DA                            
000005DA                            	@chkbit:
000005DA 44C6                       		move	d6,ccr	; was the bit set?
000005DC 6400                       		bcc.s	Kos_RLE	; if not, branch
000005DE                            
000005DE 12D8                       		move.b	(a0)+,(a1)+ ; copy byte as-is
000005E0 60E6                       		bra.s	Kos_Loop
000005E2                            ; ===========================================================================
000005E2                            
000005E2                            Kos_RLE:
000005E2 7600                       		moveq	#0,d3
000005E4 E24D                       		lsr.w	#1,d5	; get next bit
000005E6 40C6                       		move	sr,d6
000005E8 51CC 0000                  		dbf	d4,@chkbit
000005EC 1F58 0001                  		move.b	(a0)+,1(sp)
000005F0 1E98                       		move.b	(a0)+,(sp)
000005F2 3A17                       		move.w	(sp),d5
000005F4 780F                       		moveq	#$F,d4
000005F6                            
000005F6                            	@chkbit:
000005F6 44C6                       		move	d6,ccr	; was the bit set?
000005F8 6500                       		bcs.s	Kos_SeparateRLE ; if yes, branch
000005FA                            
000005FA E24D                       		lsr.w	#1,d5	; shift bit into the x flag
000005FC 51CC 0000                  		dbf	d4,@loop1
00000600 1F58 0001                  		move.b	(a0)+,1(sp)
00000604 1E98                       		move.b	(a0)+,(sp)
00000606 3A17                       		move.w	(sp),d5
00000608 780F                       		moveq	#$F,d4
0000060A                            
0000060A                            	@loop1:
0000060A E353                       		roxl.w	#1,d3	; get high repeat count bit
0000060C E24D                       		lsr.w	#1,d5
0000060E 51CC 0000                  		dbf	d4,@loop2
00000612 1F58 0001                  		move.b	(a0)+,1(sp)
00000616 1E98                       		move.b	(a0)+,(sp)
00000618 3A17                       		move.w	(sp),d5
0000061A 780F                       		moveq	#$F,d4
0000061C                            
0000061C                            	@loop2:
0000061C E353                       		roxl.w	#1,d3	; get low repeat count bit
0000061E 5243                       		addq.w	#1,d3	; increment repeat count
00000620 74FF                       		moveq	#-1,d2
00000622 1418                       		move.b	(a0)+,d2 ; calculate offset
00000624 6000                       		bra.s	Kos_RLELoop
00000626                            ; ===========================================================================
00000626                            
00000626                            Kos_SeparateRLE:
00000626 1018                       		move.b	(a0)+,d0 ; get first byte
00000628 1218                       		move.b	(a0)+,d1 ; get second byte
0000062A 74FF                       		moveq	#-1,d2
0000062C 1401                       		move.b	d1,d2
0000062E EB4A                       		lsl.w	#5,d2
00000630 1400                       		move.b	d0,d2	; calculate offset
00000632 0241 0007                  		andi.w	#7,d1	; does a third byte need to be read?
00000636 6700                       		beq.s	Kos_SeparateRLE2 ; if yes, branch
00000638 1601                       		move.b	d1,d3	; copy repeat count
0000063A 5243                       		addq.w	#1,d3	; increment
0000063C                            
0000063C                            Kos_RLELoop:
0000063C 1031 2000                  		move.b	(a1,d2.w),d0 ; copy appropriate byte
00000640 12C0                       		move.b	d0,(a1)+ ; repeat
00000642 51CB FFF8                  		dbf	d3,Kos_RLELoop
00000646 6080                       		bra.s	Kos_Loop
00000648                            ; ===========================================================================
00000648                            
00000648                            Kos_SeparateRLE2:
00000648 1218                       		move.b	(a0)+,d1
0000064A 6700                       		beq.s	Kos_Done ; 0 indicates end of compressed data
0000064C 0C01 0001                  		cmpi.b	#1,d1
00000650 6700 FF76                  		beq.w	Kos_Loop ; 1 indicates new description to be read
00000654 1601                       		move.b	d1,d3	; otherwise, copy repeat count
00000656 60E4                       		bra.s	Kos_RLELoop
00000658                            ; ===========================================================================
00000658                            
00000658                            Kos_Done:
00000658 548F                       		addq.l	#2,sp	; restore stack pointer
0000065A 4E75                       		rts	
0000065C                            ; End of function KosDec
0000065C                            ; End of function KosDec
0000065C                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
0000065C                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
0000065C                            READJOYPADS:
0000065C 41F8 F604                  		LEA		(JOYPAD).W,	A0
00000660 43F9 00A1 0003             		LEA		(IODATA1).L,	A1
00000666 6100                       		BSR.S	@READPAD
00000668 5449                       		ADDQ.W	#2,	A1
0000066A 6100                       		BSR.S	@READPAD
0000066C 4E75                       		RTS
0000066E                            		
0000066E                            	@READPAD:
0000066E 12BC 0000                  		MOVE.B  #0,(A1)
00000672 4E71                       		NOP
00000674 4E71                       		NOP
00000676 1011                       		MOVE.B  (A1),D0
00000678 E508                       		LSL.B   #2,D0
0000067A 0200 00C0                  		ANDI.B  #$C0,D0
0000067E 12BC 0040                  		MOVE.B  #$40,(A1) ; '@'
00000682 4E71                       		NOP
00000684 4E71                       		NOP
00000686 1211                       		MOVE.B  (A1),D1
00000688 0201 003F                  		ANDI.B  #$3F,D1 ; '?'
0000068C 8001                       		OR.B    D1,D0
0000068E 4600                       		NOT.B   D0
00000690 1210                       		MOVE.B  (A0),D1
00000692 B101                       		EOR.B   D0,D1
00000694 10C0                       		MOVE.B  D0,(A0)+
00000696 C200                       		AND.B   D0,D1
00000698 10C1                       		MOVE.B  D1,(A0)+
0000069A 4E75                       		RTS
0000069A 4E75                       		RTS
0000069C                            		INCLUDE		"SRC/SUB/CLEARSCREEN.ASM"
0000069C                            CLEARSCREEN:                            ; ...
0000069C 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
000006A2 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000006A6 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000006AC                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000006AC 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000006B0                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000006B0                                                                    ; SET_VRAM_FILL_DMA_MODE
000006B0 2ABC 4000 0082                             MOVE.L  #$40000082,(A5) ; DO_WRITE_TO_VRAM_AT_$C000_ADDR
000006B6                                                                    ; DO_OPERATION_USING_DMA
000006B6 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000006BE                            
000006BE                            @WAITFGCLEAR:                          ; ...
000006BE 3215                                       MOVE.W  (A5),D1
000006C0 0801 0001                                  BTST    #1,D1
000006C4 66F8                                       BNE.S   @WAITFGCLEAR
000006C6 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000006CA 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
000006D0 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000006D4 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000006DA                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000006DA 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000006DE                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000006DE                                                                    ; SET_VRAM_FILL_DMA_MODE
000006DE 2ABC 6000 0082                             MOVE.L  #$60000082,(A5) ; DO_WRITE_TO_VRAM_AT_$E000_ADDR
000006E4                                                                    ; DO_OPERATION_USING_DMA
000006E4 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000006EC                            
000006EC                            @WAITBGCLEAR:                          ; ...
000006EC 3215                                       MOVE.W  (A5),D1
000006EE 0801 0001                                  BTST    #1,D1
000006F2 66F8                                       BNE.S   @WAITBGCLEAR
000006F4 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000006F8 21FC 0000 0000 F616                        MOVE.L  #0,(VDP_SCREENPOSY).W
00000700 21FC 0000 0000 F61A                        MOVE.L  #0,(VDP_SCREENPOSX).W
00000708 43F8 F800                                  LEA     (SPRITETABLE).W,A1
0000070C 7000                                       MOVEQ   #0,D0
0000070E 323C 00A0                                  MOVE.W  #$A0,D1
00000712                            
00000712                            @CLEARSPRITES:                         ; ...
00000712 22C0                                       MOVE.L  D0,(A1)+
00000714 51C9 FFFC                                  DBF     D1,@CLEARSPRITES
00000718 43F8 CC00                                  LEA     (HSCROLLTABLE).W,A1
0000071C 7000                                       MOVEQ   #0,D0
0000071E 323C 0100                                  MOVE.W  #$100,D1
00000722                            
00000722                            @CLEARHSCROLL:                         ; ...
00000722 22C0                                       MOVE.L  D0,(A1)+
00000724 51C9 FFFC                                  DBF     D1,@CLEARHSCROLL
00000728 4E75                                       RTS
0000072A                            ; END OF FUNCTION CLEARSCREEN
0000072A                            ; END OF FUNCTION CLEARSCREEN
0000072A                            		INCLUDE		"SRC/SUB/DRAWTILEMAP.ASM"
0000072A                            DrawTileMap:		;	SUBROUTINE
0000072A 4DF9 00C0 0000                             lea     VDPDATA,a6
00000730 283C 0080 0000                             move.l  #$800000,d4
00000736                            
00000736                            .LoopRow:                           
00000736 2D40 0004                                  move.l  d0,4(a6)    ; VDPCTRL
0000073A 3601                                       move.w  d1,d3
0000073C                            
0000073C                            .LoopColumn: 
0000073C 3C99                                       move.w  (a1)+,(a6)
0000073E 51CB FFFC                                  dbf     d3,.LoopColumn
00000742 D084                                       add.l   d4,d0
00000744 51CA FFF0                                  dbf     d2,.LoopRow
00000748 4E75                                       rts
00000748 4E75                                       rts
0000074A                            		INCLUDE		"SRC/SUB/VSYNC.ASM"
0000074A                            VSYNC:
0000074A 46FC 2300                  		MOVE	#$2300,	SR
0000074E                            	@WAIT:
0000074E 4A38 F62A                  		TST.B	(VBLANKCMD).W
00000752 66FA                       		BNE.S	@WAIT
00000754 4E75                       		RTS
00000754 4E75                       		RTS
00000756                            		INCLUDE		"SRC/SUB/PLAYSOUND.ASM"
00000756                            PlaySound:
00000756 13C0 FFFF F009             		move.b	d0,SOUNDPOKE
0000075C 4E75                       		rts	
0000075C 4E75                       		rts	
0000075E                            		INCLUDE		"SRC/SUB/PALFADEIN.ASM"
0000075E                            PALFADEIN:
0000075E 31FC 003F F626             		               MOVE.W  #63,(PALFADEARGS).W
00000764                            
00000764                            PALFADEIN_USERARGS:		     ; ...
00000764 7000                       		MOVEQ   #0,D0
00000766 41F8 FB00                  		LEA     (PALETTE).W,A0
0000076A 1038 F626                  		MOVE.B  (PALFADEARGS).W,D0
0000076E D0C0                       		ADDA.W  D0,A0
00000770 7200                       		MOVEQ   #0,D1
00000772 1038 F627                  		MOVE.B  (PALFADESIZE).W,D0
00000776                            
00000776                            @FILLBLACK:		            ; ...
00000776 30C1                       		MOVE.W  D1,(A0)+
00000778 51C8 FFFC                  		DBF     D0,@FILLBLACK
0000077C 383C 0014                  		MOVE.W  #$14,D4
00000780                            
00000780                            @LOOP:				 ; ...
00000780 11FC 0012 F62A             		MOVE.B  #$12,(VBLANKCMD).W
00000786 6100 FFC2                  		BSR.W   VSYNC
0000078A 6100                       		BSR.S   @DOFADECALC
0000078C                            	;	BSR.W   PROCESSARTLOADING
0000078C 51CC FFF2                  		DBF     D4,@LOOP
00000790 4E75                       		RTS
00000792                            ; ---------------------------------------------------------------------------
00000792                            
00000792                            @DOFADECALC:		           ; ...
00000792 7000                       		MOVEQ   #0,D0
00000794 41F8 FB00                  		LEA     (PALETTE).W,A0
00000798 43F8 FB80                  		LEA     (PALFADEBUFFER).W,A1
0000079C 1038 F626                  		MOVE.B  (PALFADEARGS).W,D0
000007A0 D0C0                       		ADDA.W  D0,A0
000007A2 D2C0                       		ADDA.W  D0,A1
000007A4 1038 F627                  		MOVE.B  (PALFADESIZE).W,D0
000007A8                            
000007A8                            @DOREQUESTEDSIZE:		      ; ...
000007A8 6100                       		BSR.S   @CALCCOLOR
000007AA 51C8 FFFC                  		DBF     D0,@DOREQUESTEDSIZE
000007AE 4E75                       		RTS
000007B0                            ; ---------------------------------------------------------------------------
000007B0                            
000007B0                            @CALCCOLOR:		            ; ...
000007B0 3419                       		MOVE.W  (A1)+,D2
000007B2 3610                       		MOVE.W  (A0),D3
000007B4 B642                       		CMP.W   D2,D3
000007B6 6700                       		BEQ.S   @NEXTCOLOR
000007B8 3203                       		MOVE.W  D3,D1
000007BA 0641 0200                  		ADDI.W  #$200,D1
000007BE B242                       		CMP.W   D2,D1
000007C0 6200                       		BHI.S   @ADDGREEN
000007C2 30C1                       		MOVE.W  D1,(A0)+
000007C4 4E75                       		RTS
000007C6                            ; ---------------------------------------------------------------------------
000007C6                            
000007C6                            @ADDGREEN:		             ; ...
000007C6 3203                       		MOVE.W  D3,D1
000007C8 0641 0020                  		ADDI.W  #$20,D1 ; ' '
000007CC B242                       		CMP.W   D2,D1
000007CE 6200                       		BHI.S   @ADDRED
000007D0 30C1                       		MOVE.W  D1,(A0)+
000007D2 4E75                       		RTS
000007D4                            ; ---------------------------------------------------------------------------
000007D4                            
000007D4                            @ADDRED:		               ; ...
000007D4 5458                       		ADDQ.W  #2,(A0)+
000007D6 4E75                       		RTS
000007D8                            ; ---------------------------------------------------------------------------
000007D8                            
000007D8                            @NEXTCOLOR:		            ; ...
000007D8 5448                       		ADDQ.W  #2,A0
000007DA 4E75                       		RTS
000007DC                            ; END OF FUNCTION PALFADEIN
000007DC                            ; END OF FUNCTION PALFADEIN
000007DC                            		INCLUDE		"SRC/SUB/PALFADEOUT.ASM"
000007DC                            PALFADEOUT:		             ; ...
000007DC 31FC 003F F626             		MOVE.W  #$3F,(PALFADEARGS).W ; '?'
000007E2 383C 0014                  		MOVE.W  #20,D4
000007E6                            
000007E6                            @LOOP:				 ; ...
000007E6 11FC 0012 F62A             		MOVE.B  #$12,(VBLANKCMD).W
000007EC 6100 FF5C                  		BSR.W   VSYNC
000007F0 6100                       		BSR.S   _LEVELDOFADECALC
000007F2                            	;	BSR.W   PROCESSARTLOADING
000007F2 51CC FFF2                  		DBF     D4,@LOOP
000007F6 4E75                       		RTS
000007F8                            ; ---------------------------------------------------------------------------
000007F8                            
000007F8                            _LEVELDOFADECALC:		       ; ...
000007F8                            @DOFADECALC:
000007F8 7000                       		MOVEQ   #0,D0
000007FA 41F8 FB00                  		LEA     (PALETTE).W,A0
000007FE 1038 F626                  		MOVE.B  (PALFADEARGS).W,D0
00000802 D0C0                       		ADDA.W  D0,A0
00000804 1038 F627                  		MOVE.B  (PALFADESIZE).W,D0
00000808                            
00000808                            LOC_1A02:		               ; ...
00000808 6100                       		BSR.S   LOC_1A0A
0000080A 51C8 FFFC                  		DBF     D0,LOC_1A02
0000080E 4E75                       		RTS
00000810                            ; ---------------------------------------------------------------------------
00000810                            
00000810                            LOC_1A0A:		               ; ...
00000810 3410                       		MOVE.W  (A0),D2
00000812 6700                       		BEQ.S   LOC_1A36
00000814 3202                       		MOVE.W  D2,D1
00000816 0241 000E                  		ANDI.W  #$E,D1
0000081A 6700                       		BEQ.S   LOC_1A1A
0000081C 5558                       		SUBQ.W  #2,(A0)+
0000081E 4E75                       		RTS
00000820                            ; ---------------------------------------------------------------------------
00000820                            
00000820                            LOC_1A1A:		               ; ...
00000820 3202                       		MOVE.W  D2,D1
00000822 0241 00E0                  		ANDI.W  #$E0,D1
00000826 6700                       		BEQ.S   LOC_1A28
00000828 0458 0020                  		SUBI.W  #$20,(A0)+ ; ' '
0000082C 4E75                       		RTS
0000082E                            ; ---------------------------------------------------------------------------
0000082E                            
0000082E                            LOC_1A28:		               ; ...
0000082E 3202                       		MOVE.W  D2,D1
00000830 0241 0E00                  		ANDI.W  #$E00,D1
00000834 6700                       		BEQ.S   LOC_1A36
00000836 0458 0200                  		SUBI.W  #$200,(A0)+
0000083A 4E75                       		RTS
0000083C                            ; ---------------------------------------------------------------------------
0000083C                            
0000083C                            LOC_1A36:		               ; ...
0000083C 5448                       		ADDQ.W  #2,A0
0000083E 4E75                       		RTS
00000840                            ; END OF FUNCTION PALFADEOUT
00000840                            ; END OF FUNCTION PALFADEOUT
00000840                            		INCLUDE		"SRC/SUB/PROCESSSPRITES.ASM"
00000840                            DWORD_8796:
00000840 0000 0000                  		DC.L	0
00000844 FFFF F700                  		DC.L	SCROLL_FGPOSX
00000848 FFFF F704                  		DC.L	SCROLL_FGPOSY
0000084C FFFF F718                  		DC.L	SCROLL_BG3POSX
00000850                            
00000850                            PROCESSSPRITES:
00000850 45F8 F800                                  LEA     (SPRITETABLE).W,A2
00000854 7A00                                       MOVEQ   #0,D5
00000856 49F8 AC00                                  LEA     (SPRITES).W,A4
0000085A 7E07                                       MOVEQ   #7,D7
0000085C                            
0000085C                            @PRIORITY:                             ; ...
0000085C 4A54                                       TST.W   (A4)
0000085E 6700 0000                                  BEQ.W   @NEXTPRIORITYLEVEL
00000862 7C02                                       MOVEQ   #2,D6
00000864                            
00000864                            @OBJECT:                               ; ...
00000864 3074 6000                                  MOVEA.W (A4,D6.W),A0
00000868 4A10                                       TST.B   (A0)
0000086A 6700 0000                                  BEQ.W   @SKIPOBJECT
0000086E 08A8 0007 0001                             BCLR    #7,OBJ.RENDERFLAGS(A0)
00000874 1028 0001                                  MOVE.B  OBJ.RENDERFLAGS(A0),D0
00000878 1800                                       MOVE.B  D0,D4
0000087A 0240 000C                                  ANDI.W  #%1100,D0
0000087E 6700                                       BEQ.S   @DRAWFIXED
00000880 227B 00BE                                  MOVEA.L DWORD_8796(PC,D0.W),A1
00000884 7000                                       MOVEQ   #0,D0
00000886 1028 0018                                  MOVE.B  OBJ.XDISP(A0),D0
0000088A 3628 0008                                  MOVE.W  OBJ.X(A0),D3
0000088E 9651                                       SUB.W   (A1),D3
00000890 3203                                       MOVE.W  D3,D1
00000892 D240                                       ADD.W   D0,D1
00000894 6B00 0000                                  BMI.W   @SKIPOBJECT
00000898 3203                                       MOVE.W  D3,D1
0000089A 9240                                       SUB.W   D0,D1
0000089C 0C41 0140                                  CMPI.W  #$140,D1
000008A0 6C00                                       BGE.S   @SKIPOBJECT
000008A2 0643 0080                                  ADDI.W  #$80,D3
000008A6 0804 0004                                  BTST    #4,D4
000008AA 6700                                       BEQ.S   @ASSUMEHEIGHT
000008AC 7000                                       MOVEQ   #0,D0
000008AE 1028 0016                                  MOVE.B  OBJ.YRAD(A0),D0
000008B2 3428 000C                                  MOVE.W  OBJ.Y(A0),D2
000008B6 9469 0004                                  SUB.W   OBJ.MAP(A1),D2
000008BA 3202                                       MOVE.W  D2,D1
000008BC D240                                       ADD.W   D0,D1
000008BE 6B00                                       BMI.S   @SKIPOBJECT
000008C0 3202                                       MOVE.W  D2,D1
000008C2 9240                                       SUB.W   D0,D1
000008C4 0C41 00E0                                  CMPI.W  #$E0,D1
000008C8 6C00                                       BGE.S   @SKIPOBJECT
000008CA 0642 0080                                  ADDI.W  #$80,D2
000008CE 6000                                       BRA.S   @DRAWOBJECT
000008D0                            ; ---------------------------------------------------------------------------
000008D0                            
000008D0                            @DRAWFIXED:                            ; ...
000008D0 3428 000A                                  MOVE.W  OBJ.YSCR(A0),D2
000008D4 3628 0008                                  MOVE.W  OBJ.X(A0),D3
000008D8 6000                                       BRA.S   @DRAWOBJECT
000008DA                            ; ---------------------------------------------------------------------------
000008DA                            
000008DA                            @ASSUMEHEIGHT:                         ; ...
000008DA 3428 000C                                  MOVE.W  OBJ.Y(A0),D2
000008DE 9469 0004                                  SUB.W   OBJ.MAP(A1),D2
000008E2 0642 0080                                  ADDI.W  #128,D2
000008E6 0C42 0060                                  CMPI.W  #96,D2
000008EA 6500                                       BCS.S   @SKIPOBJECT
000008EC 0C42 0180                                  CMPI.W  #384,D2
000008F0 6400                                       BCC.S   @SKIPOBJECT
000008F2                            
000008F2                            @DRAWOBJECT:                           ; ...
000008F2 2268 0004                                  MOVEA.L OBJ.MAP(A0),A1
000008F6 7200                                       MOVEQ   #0,D1
000008F8 0804 0005                                  BTST    #5,D4
000008FC 6600                                       BNE.S   @STATICMAP
000008FE 1228 001A                                  MOVE.B  OBJ.FRAME(A0),D1
00000902 D201                                       ADD.B   D1,D1
00000904 D2F1 1000                                  ADDA.W  (A1,D1.W),A1
00000908 1219                                       MOVE.B  (A1)+,D1
0000090A 5301                                       SUBQ.B  #1,D1
0000090C 6B00                                       BMI.S   @SETVISIBLE
0000090E                            
0000090E                            @STATICMAP:                            ; ...
0000090E 6100 0000                                  BSR.W   BUILDSPRITETOBUFFER
00000912                            
00000912                            @SETVISIBLE:                           ; ...
00000912 08E8 0007 0001                             BSET    #7,OBJ.RENDERFLAGS(A0)
00000918                            
00000918                            @SKIPOBJECT:                           ; ...
00000918 5446                                       ADDQ.W  #2,D6
0000091A 5554                                       SUBQ.W  #2,(A4)
0000091C 6600 FF46                                  BNE.W   @OBJECT
00000920                            
00000920                            @NEXTPRIORITYLEVEL:                    ; ...
00000920 49EC 0080                                  LEA     $80(A4),A4
00000924 51CF FF36                                  DBF     D7,@PRIORITY
00000928 11C5 F62C                                  MOVE.B  D5,(SPRITECOUNT).W
0000092C 0C05 0050                                  CMPI.B  #80,D5
00000930 6700                                       BEQ.S   @LIMITREACHED
00000932 24BC 0000 0000                             MOVE.L  #0,(A2)
00000938 4E75                                       RTS
0000093A                            ; ---------------------------------------------------------------------------
0000093A                            
0000093A                            @LIMITREACHED:                         ; ...
0000093A 157C 0000 FFFB                             MOVE.B  #0,-5(A2)
00000940 4E75                                       RTS
00000942                            ; END OF FUNCTION PROCESSSPRITES
00000942                            
00000942                            BUILDSPRITETOBUFFER:                    ; ...
00000942 3668 0002                                  MOVEA.W OBJ.TILE(A0),A3
00000946 0804 0000                                  BTST    #0,D4
0000094A 6600                                       BNE.S   _BUILDSPRITEXFLIP
0000094C 0804 0001                                  BTST    #1,D4
00000950 6600 0000                                  BNE.W   _BUILDSPRITEYFLIP
00000954                            ; END OF FUNCTION BUILDSPRITETOBUFFER
00000954                            
00000954                            
00000954                            ; =============== S U B R O U T I N E =======================================
00000954                            
00000954                            
00000954                            _BUILDSPRITE:                           ; ...
00000954 0C05 0050                                  CMPI.B  #80,D5
00000958 6700                                       BEQ.S   @LIMITREACHED
0000095A 1019                                       MOVE.B  (A1)+,D0
0000095C 4880                                       EXT.W   D0
0000095E D042                                       ADD.W   D2,D0
00000960 34C0                                       MOVE.W  D0,(A2)+
00000962 14D9                                       MOVE.B  (A1)+,(A2)+
00000964 5205                                       ADDQ.B  #1,D5
00000966 14C5                                       MOVE.B  D5,(A2)+
00000968 1019                                       MOVE.B  (A1)+,D0
0000096A E148                                       LSL.W   #8,D0
0000096C 1019                                       MOVE.B  (A1)+,D0
0000096E D04B                                       ADD.W   A3,D0
00000970 34C0                                       MOVE.W  D0,(A2)+
00000972 1019                                       MOVE.B  (A1)+,D0
00000974 4880                                       EXT.W   D0
00000976 D043                                       ADD.W   D3,D0
00000978 0240 01FF                                  ANDI.W  #$1FF,D0
0000097C 6600                                       BNE.S   @WRITEX
0000097E 5240                                       ADDQ.W  #1,D0
00000980                            
00000980                            @WRITEX:                               ; ...
00000980 34C0                                       MOVE.W  D0,(A2)+
00000982 51C9 FFD0                                  DBF     D1,_BUILDSPRITE
00000986                            
00000986                            @LIMITREACHED:                         ; ...
00000986 4E75                                       RTS
00000988                            ; END OF FUNCTION _BUILDSPRITE
00000988                            
00000988                            _BUILDSPRITEXFLIP:                      ; ...
00000988 0804 0001                                  BTST    #1,D4
0000098C 6600 0000                                  BNE.W   _BUILDSPRITEXYFLIPPED
00000990                            
00000990                            @LOOP:                                 ; ...
00000990 0C05 0050                                  CMPI.B  #$50,D5 ; 'P'
00000994 6700                                       BEQ.S   @LIMITREACHED
00000996 1019                                       MOVE.B  (A1)+,D0
00000998 4880                                       EXT.W   D0
0000099A D042                                       ADD.W   D2,D0
0000099C 34C0                                       MOVE.W  D0,(A2)+
0000099E 1819                                       MOVE.B  (A1)+,D4
000009A0 14C4                                       MOVE.B  D4,(A2)+
000009A2 5205                                       ADDQ.B  #1,D5
000009A4 14C5                                       MOVE.B  D5,(A2)+
000009A6 1019                                       MOVE.B  (A1)+,D0
000009A8 E148                                       LSL.W   #8,D0
000009AA 1019                                       MOVE.B  (A1)+,D0
000009AC D04B                                       ADD.W   A3,D0
000009AE 0A40 0800                                  EORI.W  #$800,D0
000009B2 34C0                                       MOVE.W  D0,(A2)+
000009B4 1019                                       MOVE.B  (A1)+,D0
000009B6 4880                                       EXT.W   D0
000009B8 4440                                       NEG.W   D0
000009BA D804                                       ADD.B   D4,D4
000009BC 0244 0018                                  ANDI.W  #$18,D4
000009C0 5044                                       ADDQ.W  #8,D4
000009C2 9044                                       SUB.W   D4,D0
000009C4 D043                                       ADD.W   D3,D0
000009C6 0240 01FF                                  ANDI.W  #$1FF,D0
000009CA 6600                                       BNE.S   @WRITEX
000009CC 5240                                       ADDQ.W  #1,D0
000009CE                            
000009CE                            @WRITEX:                               ; ...
000009CE 34C0                                       MOVE.W  D0,(A2)+
000009D0 51C9 FFBE                                  DBF     D1,@LOOP
000009D4                            
000009D4                            @LIMITREACHED:                         ; ...
000009D4 4E75                                       RTS
000009D6                            ; END OF FUNCTION _BUILDSPRITEXFLIP
000009D6                            
000009D6                            
000009D6                            ; =============== S U B R O U T I N E =======================================
000009D6                            
000009D6                            
000009D6                            _BUILDSPRITEYFLIP:                      ; ...
000009D6 0C05 0050                                  CMPI.B  #$50,D5 ; 'P'
000009DA 6700                                       BEQ.S   @LIMITREACHED
000009DC 1019                                       MOVE.B  (A1)+,D0
000009DE 1811                                       MOVE.B  (A1),D4
000009E0 4880                                       EXT.W   D0
000009E2 4440                                       NEG.W   D0
000009E4 E70C                                       LSL.B   #3,D4
000009E6 0244 0018                                  ANDI.W  #$18,D4
000009EA 5044                                       ADDQ.W  #8,D4
000009EC 9044                                       SUB.W   D4,D0
000009EE D042                                       ADD.W   D2,D0
000009F0 34C0                                       MOVE.W  D0,(A2)+
000009F2 14D9                                       MOVE.B  (A1)+,(A2)+
000009F4 5205                                       ADDQ.B  #1,D5
000009F6 14C5                                       MOVE.B  D5,(A2)+
000009F8 1019                                       MOVE.B  (A1)+,D0
000009FA E148                                       LSL.W   #8,D0
000009FC 1019                                       MOVE.B  (A1)+,D0
000009FE D04B                                       ADD.W   A3,D0
00000A00 0A40 1000                                  EORI.W  #$1000,D0
00000A04 34C0                                       MOVE.W  D0,(A2)+
00000A06 1019                                       MOVE.B  (A1)+,D0
00000A08 4880                                       EXT.W   D0
00000A0A D043                                       ADD.W   D3,D0
00000A0C 0240 01FF                                  ANDI.W  #$1FF,D0
00000A10 6600                                       BNE.S   @WRITEX
00000A12 5240                                       ADDQ.W  #1,D0
00000A14                            
00000A14                            @WRITEX:                               ; ...
00000A14 34C0                                       MOVE.W  D0,(A2)+
00000A16 51C9 FFBE                                  DBF     D1,_BUILDSPRITEYFLIP
00000A1A                            
00000A1A                            @LIMITREACHED:                         ; ...
00000A1A 4E75                                       RTS
00000A1C                            ; END OF FUNCTION _BUILDSPRITEYFLIP
00000A1C                            
00000A1C                            
00000A1C                            ; =============== S U B R O U T I N E =======================================
00000A1C                            
00000A1C                            
00000A1C                            _BUILDSPRITEXYFLIPPED:                  ; ...
00000A1C 0C05 0050                                  CMPI.B  #$50,D5 ; 'P'
00000A20 6700                                       BEQ.S   @LIMITREACHED
00000A22 1019                                       MOVE.B  (A1)+,D0
00000A24 1811                                       MOVE.B  (A1),D4
00000A26 4880                                       EXT.W   D0
00000A28 4440                                       NEG.W   D0
00000A2A E70C                                       LSL.B   #3,D4
00000A2C 0244 0018                                  ANDI.W  #$18,D4
00000A30 5044                                       ADDQ.W  #8,D4
00000A32 9044                                       SUB.W   D4,D0
00000A34 D042                                       ADD.W   D2,D0
00000A36 34C0                                       MOVE.W  D0,(A2)+
00000A38 1819                                       MOVE.B  (A1)+,D4
00000A3A 14C4                                       MOVE.B  D4,(A2)+
00000A3C 5205                                       ADDQ.B  #1,D5
00000A3E 14C5                                       MOVE.B  D5,(A2)+
00000A40 1019                                       MOVE.B  (A1)+,D0
00000A42 E148                                       LSL.W   #8,D0
00000A44 1019                                       MOVE.B  (A1)+,D0
00000A46 D04B                                       ADD.W   A3,D0
00000A48 0A40 1800                                  EORI.W  #$1800,D0
00000A4C 34C0                                       MOVE.W  D0,(A2)+
00000A4E 1019                                       MOVE.B  (A1)+,D0
00000A50 4880                                       EXT.W   D0
00000A52 4440                                       NEG.W   D0
00000A54 D804                                       ADD.B   D4,D4
00000A56 0244 0018                                  ANDI.W  #$18,D4
00000A5A 5044                                       ADDQ.W  #8,D4
00000A5C 9044                                       SUB.W   D4,D0
00000A5E D043                                       ADD.W   D3,D0
00000A60 0240 01FF                                  ANDI.W  #$1FF,D0
00000A64 6600                                       BNE.S   @WRITEX
00000A66 5240                                       ADDQ.W  #1,D0
00000A68                            
00000A68                            @WRITEX:                               ; ...
00000A68 34C0                                       MOVE.W  D0,(A2)+
00000A6A 51C9 FFB0                                  DBF     D1,_BUILDSPRITEXYFLIPPED
00000A6E                            
00000A6E                            @LIMITREACHED:                         ; ...
00000A6E 4E75                                       RTS
00000A70                            ; END OF FUNCTION _BUILDSPRITEXYFLIPPED
00000A70                            
00000A70                            _OBJECTDISPLAY:                         ; ...
00000A70 43F8 AC00                                  LEA     (SPRITES).W,A1
00000A74 1028 0019                                  MOVE.B  OBJ.PRIORITY(A0),D0
00000A78 0240 0007                                  ANDI.W  #7,D0
00000A7C EF48                                       LSL.W   #7,D0
00000A7E D2C0                                       ADDA.W  D0,A1
00000A80 0C51 007E                                  CMPI.W  #$7E,(A1) ; '~'
00000A84 6400                                       BCC.S   @EXIT
00000A86 5451                                       ADDQ.W  #2,(A1)
00000A88 D2D1                                       ADDA.W  (A1),A1
00000A8A 3288                                       MOVE.W  A0,(A1)
00000A8C                            
00000A8C                            @EXIT:                                 ; ...
00000A8C 4E75                                       RTS
00000A8C 4E75                                       RTS
00000A8E                            		INCLUDE		"SRC/SUB/RUNOBJECTS.ASM"
00000A8E                            RUNOBJECTS:                             ; ...
00000A8E 41F8 D000                                  LEA     (OBJSLOT00).W,A0
00000A92 7E7F                                       MOVEQ   #$80-1,D7
00000A94 7000                                       MOVEQ   #0,D0
00000A96                            
00000A96                            @PROCESSOBJLOOP:                       ; ...
00000A96 1028 0000                                  MOVE.B  OBJ.ID(A0),D0
00000A9A 6700                                       BEQ.S   @EMPTYSLOT
00000A9C D040                                       ADD.W   D0,D0
00000A9E D040                                       ADD.W   D0,D0
00000AA0 227B 0000                                  MOVEA.L OBJECTINDEX-4(PC,D0.W),A1 ; NO ZERO OFFSET - START AT 1
00000AA4 4E91                                       JSR     (A1)
00000AA6 7000                                       MOVEQ   #0,D0
00000AA8                            
00000AA8                            @EMPTYSLOT:                            ; ...
00000AA8 41E8 0040                                  LEA     OBJ.SIZE(A0),A0
00000AAC 51CF FFE8                                  DBF     D7,@PROCESSOBJLOOP
00000AB0 4E75                                       RTS
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            ; END OF FUNCTION RUNOBJECTS
00000AB2                            
00000AB2                            OBJECTINDEX:
00000AB2 0000 0000                  		DC.L	SOUL	;	01
00000AB6 0000 0000                  		DC.L	INTEGRITY  ;	02
00000ABA 0000 0000                  		DC.L	MENU_HANDLE  ;	03
00000ABE 0000 0000                  		DC.L	OBJNULL  ;	04
00000AC2 0000 0000                  		DC.L	OBJNULL  ;	05
00000AC6 0000 0000                  		DC.L	OBJNULL  ;	06
00000ACA 0000 0000                  		DC.L	OBJNULL  ;	07
00000ACE 0000 0000                  		DC.L	OBJNULL  ;	08
00000AD2 0000 0000                  		DC.L	OBJNULL  ;	09
00000AD6 0000 0000                  		DC.L	OBJNULL  ;	0A
00000ADA 0000 0000                  		DC.L	OBJNULL  ;	0B
00000ADE 0000 0000                  		DC.L	OBJNULL  ;	0C
00000AE2 0000 0000                  		DC.L	OBJNULL  ;	0D
00000AE6 0000 0000                  		DC.L	OBJNULL  ;	0E
00000AEA 0000 0000                  		DC.L	OBJNULL  ;	0F
00000AEE 0000 0000                  		DC.L	OBJNULL  ;	10
00000AF2                            		
00000AF2                            OBJNULL:
00000AF2 4E75                       		RTS
00000AF2 4E75                       		RTS
00000AF4                            		INCLUDE		"SRC/SUB/OBJECTFALL.ASM"
00000AF4                            OBJECTFALL:
00000AF4 2428 0008                  		MOVE.L  OBJ.X(A0),D2
00000AF8 2628 000C                  		MOVE.L  OBJ.Y(A0),D3
00000AFC 3028 0010                  		MOVE.W  OBJ.XSPEED(A0),D0
00000B00 48C0                       		EXT.L   D0
00000B02 E180                       		ASL.L   #8,D0
00000B04 D480                       		ADD.L   D0,D2
00000B06 3028 0012                  		MOVE.W  OBJ.YSPEED(A0),D0
00000B0A 0640 0010                  		ADDI.W  #$10,D0
00000B0E 3140 0012                  		MOVE.W  D0,OBJ.YSPEED(A0)
00000B12 48C0                       		EXT.L   D0
00000B14 E180                       		ASL.L   #8,D0
00000B16 D680                       		ADD.L   D0,D3
00000B18 2142 0008                  		MOVE.L  D2,OBJ.X(A0)
00000B1C 2143 000C                  		MOVE.L  D3,OBJ.Y(A0)
00000B20 4E75                       		RTS
00000B20 4E75                       		RTS
00000B22                            		
00000B22                            		INCLUDE		"SRC/GAMEMODE/LOGO.ASM"
00000B22                            LOGO:
00000B22 4EB9 0000 069C             		JSR		CLEARSCREEN
00000B28 23FC 4000 0000 00C0 0004   		move.l	#VRAMWRITE,	(VDPCTRL)
00000B32 41F9 0000 0000             		LEA		LOGOART,	A0
00000B38 43F9 00C0 0000             		LEA		VDPDATA,	A1
00000B3E 303C 061F                  		MOVE.W	#$61F,		D0
00000B42                            	@LOADGFX:
00000B42 3298                       		MOVE.W	(A0)+,	(A1)
00000B44 51C8 FFFC                  		DBF		D0,	@LOADGFX
00000B48                            		
00000B48 43F9 0000 0000 203C 661C+  	COPYTILEMAP		LOGOMAP,	$A61C,	11,	3
00000B5E 43F9 0000 0000 203C 461C+  	COPYTILEMAP		LOGOMAPB,	$861C,	11,	3
00000B74                            	
00000B74 103C 0000                  		move.b	#bgm_GHZ,d0
00000B78 6100 FBDC                  		bsr.w	PlaySound
00000B7C                            	
00000B7C 7000                       		MOVEQ	#0,	D0
00000B7E                            	;	BSR.W	PALLOAD
00000B7E 31FC 0070 F632             		MOVE.W	#112,	(PALCYCCURRENT).W
00000B84 33FC 0000 00FF F662        		MOVE.W	#0,	$FFF662
00000B8C 33FC 0000 00FF F660        		MOVE.W	#0,	$FFF660
00000B94 33FC 0104 FFFF F614        		MOVE.W	#260,	TIMER
00000B9C 3038 F60C                  		MOVE.W	(VDPBUFFER).W,	D0
00000BA0 0000 0040                  		ORI.B	#%1000000,	D0
00000BA4 33C0 00C0 0004             		MOVE.W	D0,	(VDPCTRL).L
00000BAA                            		
00000BAA                            	@LOOP:
00000BAA 11FC 0001 F62A             		MOVE.B	#1,	(VBLANKCMD).W
00000BB0 4EB9 0000 074A             		JSR		VSYNC
00000BB6 6100 0000                  		BSR.W	_LOGO_PALCYC
00000BBA 4A79 FFFF F614             		TST.W	TIMER
00000BC0 6700                       		BEQ.S	@EXIT
00000BC2 0239 0080 FFFF F605        		ANDI.B	#%10000000,	JOYPADPRESS
00000BCA 67DE                       		BEQ.S	@LOOP
00000BCC                            	@EXIT:
00000BCC                            	;	JSR		PALFADEOUT
00000BCC 13FC 0004 FFFF F600        		MOVE.B	#1*4,	GAMEMODE
00000BD4 4E75                       		RTS
00000BD6                            		
00000BD6                            _LOGO_PALCYC:
00000BD6 5379 FFFF F634             		SUBQ.W	#1,	PALCYCTIMER
00000BDC 6A00                       		BPL.S	@EXIT
00000BDE 33FC 0003 FFFF F634        		MOVE.W	#3,	PALCYCTIMER
00000BE6 3039 FFFF F632             		MOVE.W	PALCYCCURRENT,	D0
00000BEC 6B00                       		BMI.S	@EXIT
00000BEE 5579 FFFF F632             		SUBQ.W	#2,	PALCYCCURRENT
00000BF4 41F9 0000 0000             		LEA		LOGO_CYC,	A0
00000BFA 43F8 FB04                  		LEA		((PALETTE+$04)).W,	A1
00000BFE D0C0                       		ADDA.W	D0,	A0
00000C00 22D8                       		MOVE.L	(A0)+,(A1)+
00000C02 22D8                       		MOVE.L	(A0)+,(A1)+
00000C04 22D8                       		MOVE.L	(A0)+,(A1)+
00000C06 22D8                       		MOVE.L	(A0)+,(A1)+
00000C08 22D8                       		MOVE.L	(A0)+,(A1)+
00000C0A 22D8                       		MOVE.L	(A0)+,(A1)+
00000C0C 41F9 0000 0000             		LEA		LOGO_CYCB,	A0
00000C12 43F8 FB24                  		LEA		((PALETTE+$24)).W,	A1
00000C16 D0C0                       		ADDA.W	D0,	A0
00000C18 22D8                       		MOVE.L	(A0)+,(A1)+
00000C1A 22D8                       		MOVE.L	(A0)+,(A1)+
00000C1C 22D8                       		MOVE.L	(A0)+,(A1)+
00000C1E 22D8                       		MOVE.L	(A0)+,(A1)+
00000C20 22D8                       		MOVE.L	(A0)+,(A1)+
00000C22 22D8                       		MOVE.L	(A0)+,(A1)+
00000C24                            	@EXIT:
00000C24 4E75                       		RTS
00000C26                            		
00000C26                            LOGOART:	INCBIN		"ART/LOGO.UNC"
00001846                            LOGOMAP:	INCBIN		"MAP/LOGO.MAP"
000018A6                            LOGOMAPB:	INCBIN		"MAP/LOGOB.MAP"
00001906                            LOGO_CYC:
00001906 0000                       		DC.W $000
00001908 0000                       		DC.W $000
0000190A 0000                       		DC.W $000
0000190C 0000                       		DC.W $000
0000190E 0000                       		DC.W $000
00001910 0000                       		DC.W $000
00001912 0000                       		DC.W $000
00001914 0000                       		DC.W $000
00001916 0000                       		DC.W $000
00001918 0000                       		DC.W $000
0000191A 0000                       		DC.W $000
0000191C 0200                       		DC.W $200
0000191E 0400                       		DC.W $400
00001920 0600                       		DC.W $600
00001922 0800                       		DC.W $800
00001924 0A00                       		DC.W $A00
00001926 0C00                       		DC.W $C00
00001928 0E00                       		DC.W $E00
0000192A 0E20                       		DC.W $E20
0000192C 0E40                       		DC.W $E40
0000192E 0E60                       		DC.W $E60
00001930 0E80                       		DC.W $E80
00001932 0EA0                       		DC.W $EA0
00001934 0EC0                       		DC.W $EC0
00001936 0EA0                       		DC.W $EA0
00001938 0E80                       		DC.W $E80
0000193A 0E60                       		DC.W $E60
0000193C 0E40                       		DC.W $E40
0000193E 0E20                       		DC.W $E20
00001940 0E00                       		DC.W $E00
00001942 0C00                       		DC.W $C00
00001944 0A00                       		DC.W $A00
00001946 0800                       		DC.W $800
00001948 0600                       		DC.W $600
0000194A 0800                       		DC.W $800
0000194C 0A00                       		DC.W $A00
0000194E 0C00                       		DC.W $C00
00001950 0E00                       		DC.W $E00
00001952 0E20                       		DC.W $E20
00001954 0E40                       		DC.W $E40
00001956 0E60                       		DC.W $E60
00001958 0E80                       		DC.W $E80
0000195A 0EA0                       		DC.W $EA0
0000195C 0EC0                       		DC.W $EC0
0000195E 0EA0                       		DC.W $EA0
00001960 0E80                       		DC.W $E80
00001962 0E60                       		DC.W $E60
00001964 0E40                       		DC.W $E40
00001966 0E20                       		DC.W $E20
00001968 0E00                       		DC.W $E00
0000196A 0C00                       		DC.W $C00
0000196C 0A00                       		DC.W $A00
0000196E 0800                       		DC.W $800
00001970 0600                       		DC.W $600
00001972 0400                       		DC.W $400
00001974 0200                       		DC.W $200
00001976 0000                       		DC.W $000
00001978 0000                       		DC.W $000
0000197A 0000                       		DC.W $000
0000197C 0000                       		DC.W $000
0000197E 0000                       		DC.W $000
00001980 0000                       		DC.W $000
00001982 0000                       		DC.W $000
00001984 0000                       		DC.W $000
00001986 0000                       		DC.W $000
00001988 0000                       		DC.W $000
0000198A 0000                       		DC.W $000
0000198C                            LOGO_CYCB:
0000198C 0000                       		DC.W $000
0000198E 0000                       		DC.W $000
00001990 0000                       		DC.W $000
00001992 0000                       		DC.W $000
00001994 0000                       		DC.W $000
00001996 0000                       		DC.W $000
00001998 0000                       		DC.W $000
0000199A 0000                       		DC.W $000
0000199C 0000                       		DC.W $000
0000199E 0000                       		DC.W $000
000019A0 0000                       		DC.W $000
000019A2 0200                       		DC.W $200
000019A4 0422                       		DC.W $422
000019A6 0644                       		DC.W $644
000019A8 0866                       		DC.W $866
000019AA 0A88                       		DC.W $A88
000019AC 0CAA                       		DC.W $CAA
000019AE 0ECC                       		DC.W $ECC
000019B0 0EEE                       		DC.W $EEE
000019B2 0EEE                       		DC.W $EEE
000019B4 0EEE                       		DC.W $EEE
000019B6 0EEE                       		DC.W $EEE
000019B8 0EEE                       		DC.W $EEE
000019BA 0EEE                       		DC.W $EEE
000019BC 0EEE                       		DC.W $EEE
000019BE 0EEE                       		DC.W $EEE
000019C0 0EEE                       		DC.W $EEE
000019C2 0EEE                       		DC.W $EEE
000019C4 0EEE                       		DC.W $EEE
000019C6 0EEE                       		DC.W $EEE
000019C8 0EEE                       		DC.W $EEE
000019CA 0EEE                       		DC.W $EEE
000019CC 0EEE                       		DC.W $EEE
000019CE 0EEE                       		DC.W $EEE
000019D0 0EEE                       		DC.W $EEE
000019D2 0EEE                       		DC.W $EEE
000019D4 0EEE                       		DC.W $EEE
000019D6 0EEE                       		DC.W $EEE
000019D8 0EEE                       		DC.W $EEE
000019DA 0EEE                       		DC.W $EEE
000019DC 0EEE                       		DC.W $EEE
000019DE 0EEE                       		DC.W $EEE
000019E0 0EEE                       		DC.W $EEE
000019E2 0EEE                       		DC.W $EEE
000019E4 0EEE                       		DC.W $EEE
000019E6 0EEE                       		DC.W $EEE
000019E8 0EEE                       		DC.W $EEE
000019EA 0EEE                       		DC.W $EEE
000019EC 0EEE                       		DC.W $EEE
000019EE 0ECC                       		DC.W $ECC
000019F0 0CAA                       		DC.W $CAA
000019F2 0A88                       		DC.W $A88
000019F4 0866                       		DC.W $866
000019F6 0644                       		DC.W $644
000019F8 0422                       		DC.W $422
000019FA 0200                       		DC.W $200
000019FC 0000                       		DC.W $000
000019FE 0000                       		DC.W $000
00001A00 0000                       		DC.W $000
00001A02 0000                       		DC.W $000
00001A04 0000                       		DC.W $000
00001A06 0000                       		DC.W $000
00001A08 0000                       		DC.W $000
00001A0A 0000                       		DC.W $000
00001A0C 0000                       		DC.W $000
00001A0E 0000                       		DC.W $000
00001A10 0000                       		DC.W $000
00001A10 0000                       		DC.W $000
00001A12                            		INCLUDE		"SRC/GAMEMODE/MAIN.ASM"
00001A12                            MAIN:
00001A12 4EB9 0000 069C             		JSR		CLEARSCREEN
00001A18                            		
00001A18 23FC 4000 0000 00C0 0004   		move.l	#VRAMWRITE,	(VDPCTRL)
00001A22 41F9 0000 0000             		LEA		BATTLEART,		A0
00001A28 43F9 00C0 0000             		LEA		VDPDATA,	A1
00001A2E 303C 17FF                  		MOVE.W	#$17FF,		D0
00001A32                            	@LOADGFX:
00001A32 3298                       		MOVE.W	(A0)+,	(A1)
00001A34 51C8 FFFC                  		DBF		D0,	@LOADGFX
00001A38                            		
00001A38 41F9 0000 0000             		LEA		BATTLEPAL,	A0
00001A3E 43F9 FFFF FB80             		LEA		PALFADEBUFFER,	A1
00001A44 103C 0010                  		MOVE.B	#16,	D0
00001A48                            	@PALLOOP:
00001A48 22D8                       		MOVE.L	(A0)+,	(A1)+
00001A4A 51C8 FFFC                  		DBF		D0,	@PALLOOP
00001A4E                            		
00001A4E 43F9 0000 0000 203C 4084+  	COPYTILEMAP		BATTLEMAP,	$8084,	35,	25
00001A64                            	
00001A64 13FC 0001 FFFF D000        		MOVE.B	#$01,	(OBJSLOT00)
00001A6C 41F9 FFFF D000             		LEA		(OBJSLOT00),	A0
00001A72 317C 00A0 0008             		MOVE.W	#160,	OBJ.X(A0)
00001A78 317C 0070 000C             		MOVE.W	#112,	OBJ.Y(A0)
00001A7E                            		
00001A7E 4EB9 0000 075E             		JSR		PALFADEIN
00001A84                            	@loop:
00001A84 11FC 0001 F62A             		MOVE.B	#1,	(VBLANKCMD).W
00001A8A 4EB9 0000 074A             		jsr		VSYNC
00001A90 4EB9 0000 0A8E             		JSR		RUNOBJECTS
00001A96 4EB9 0000 0850             		JSR		PROCESSSPRITES
00001A9C 60E6                       		bra.s	@loop
00001A9E 4E75                       		rts
00001AA0                            		
00001AA0                            BATTLEPAL:	INCBIN		"PAL/BATTLE.PAL"
00001B20                            BATTLEMAP:	INCBIN		"MAP/BATTLE.MAP"
00002270                            BATTLEART:	INCBIN		"ART/BATTLE.UNC"
00002270                            BATTLEART:	INCBIN		"ART/BATTLE.UNC"
00003690                            		
00003690                            		INCLUDE		"SRC/OBJ/SOUL.ASM"
00003690                            SOUL:
00003690 7000                       		MOVEQ	#0,	D0
00003692 1028 0024                  		MOVE.B	OBJ.ACTION(A0),	D0
00003696 323B 0000                  		MOVE.W	@INDEX(PC,D0.W),	D1
0000369A 4EFB 1000                  		JMP		@INDEX(PC,D1.W)
0000369E                            		
0000369E                            	@INDEX:
0000369E 0000                       		DC.W	@init-@INDEX
000036A0 0000                       		DC.W	@do-@INDEX
000036A2                            	;	DC.W	@delete-@INDEX
000036A2                            	;	DC.W	@delete-@INDEX
000036A2                            		
000036A2                            	@init:
000036A2 5428 0024                  		ADDQ.B	#2,			OBJ.ACTION(A0)
000036A6 117C 0012 0016             		MOVE.B	#$12,		OBJ.YRAD(A0)
000036AC 117C 0009 0017             		MOVE.B	#9,			OBJ.XRAD(A0)
000036B2 217C 0000 0000 0004        		MOVE.L	#MAP_SOUL,	OBJ.MAP(A0)
000036BA 317C 0001 0002             		MOVE.W	#$1,		OBJ.TILE(A0)
000036C0 117C 0004 0001             		MOVE.B	#4,			OBJ.RENDERFLAGS(A0)
000036C6 117C 0002 0019             		MOVE.B	#2,			OBJ.PRIORITY(A0)
000036CC                            
000036CC                            	@do:
000036CC 7000                       		MOVEQ	#0,	D0
000036CE 7200                       		MOVEQ	#0,	D1
000036D0 1039 FFFF F604             		MOVE.B	JOYPAD,	D0
000036D6                            	@uptst:
000036D6 0800 0000                  		btst	#bitUp,D0
000036DA 6700                       		beq.s	@downtst
000036DC 0441 0001                  		subi.w	#1,D1
000036E0                            	@downtst:
000036E0 0800 0001                  		btst	#bitDn,D0
000036E4 6700                       		beq.s	@lefttst
000036E6 0641 0001                  		addi.w	#1,D1
000036EA                            	@lefttst:
000036EA E199                       		rol.l	#8,d1
000036EC E199                       		rol.l	#8,d1
000036EE 0800 0002                  		btst	#bitL,D0
000036F2 6700                       		beq.s	@righttst
000036F4 0441 0001                  		subi.w	#1,D1
000036F8                            	@righttst:
000036F8 0800 0003                  		btst	#bitR,D0
000036FC 6700                       		beq.s	@bluetst
000036FE 0641 0001                  		addi.w	#1,D1
00003702                            	@bluetst:
00003702 0200 0070                  		andi.b	#btnA+btnB+btnC,D0
00003706 6700                       		beq.s	@apply
00003708 117C 0000 0024             		move.b	#0,	OBJ.ACTION(A0)
0000370E 117C 0002 0000             		move.b	#2,	OBJ.ID(A0)
00003714 303C 00A0                  		move.w	#$A0,	D0
00003718 4EF9 0000 0756             		jmp		PlaySound
0000371E                            	@apply:
0000371E D368 0008                  		add.w	D1,OBJ.X(A0)
00003722 E199                       		rol.l	#8,d1
00003724 E199                       		rol.l	#8,d1
00003726 D368 000C                  		add.w	D1,OBJ.Y(A0)
0000372A 4EB9 0000 0A70             		JSR		_OBJECTDISPLAY
00003730 4E75                       		RTS
00003732                            		
00003732                            MAP_SOUL:
00003732                            		INCBIN	"SRC/OBJ/SOUL.MAP"
00003732                            		INCBIN	"SRC/OBJ/SOUL.MAP"
0000373A                            		INCLUDE		"SRC/OBJ/INTEGRITY.ASM"
0000373A                            INTEGRITY:
0000373A 7000                       		MOVEQ	#0,	D0
0000373C 1028 0024                  		MOVE.B	OBJ.ACTION(A0),	D0
00003740 323B 0000                  		MOVE.W	@INDEX(PC,D0.W),	D1
00003744 4EFB 1000                  		JMP		@INDEX(PC,D1.W)
00003748                            		
00003748                            	@INDEX:
00003748 0000                       		DC.W	@init-@INDEX	;	0
0000374A 0000                       		DC.W	@fall-@INDEX	;	2
0000374C 0000                       		DC.W	@ground-@INDEX	;	4
0000374E                            	;	DC.W	@delete-@INDEX
0000374E                            		
0000374E                            	@init:
0000374E 5428 0024                  		ADDQ.B	#2,			OBJ.ACTION(A0)
00003752 117C 0012 0016             		MOVE.B	#$12,		OBJ.YRAD(A0)
00003758 117C 0009 0017             		MOVE.B	#9,			OBJ.XRAD(A0)
0000375E 217C 0000 3732 0004        		MOVE.L	#MAP_SOUL,	OBJ.MAP(A0)
00003766 317C 2001 0002             		MOVE.W	#$2001,		OBJ.TILE(A0)
0000376C 117C 0004 0001             		MOVE.B	#4,			OBJ.RENDERFLAGS(A0)
00003772 117C 0002 0019             		MOVE.B	#2,			OBJ.PRIORITY(A0)
00003778                            		
00003778                            	@fall:
00003778 4EB9 0000 0AF4             		JSR		OBJECTFALL
0000377E 0C68 00A8 000C             		cmpi.w	#$A8,	OBJ.Y(A0)	;	bottom of playfield
00003784 6500                       		blo.s	@contfall
00003786 5428 0024                  		ADDQ.B	#2,			OBJ.ACTION(A0)
0000378A 317C 00A8 000C             		move.w	#$A8,	OBJ.Y(A0)
00003790                            	@contfall:
00003790                            		
00003790                            	@ground:
00003790 7000                       		MOVEQ	#0,	D0
00003792 7200                       		MOVEQ	#0,	D1
00003794 1039 FFFF F604             		MOVE.B	JOYPAD,	D0
0000379A                            	@uptst:
0000379A 0C28 0002 0024             		cmpi.b	#2,	OBJ.ACTION(A0)
000037A0 6700                       		beq.s	@lefttst
000037A2 0800 0000                  		btst	#bitUp,D0
000037A6 6700                       		beq.s	@lefttst
000037A8 5528 0024                  		SUBQ.B	#2,	OBJ.ACTION(A0)
000037AC 317C FDA8 0012             		move.w	#-600,	OBJ.YSPEED(A0)
000037B2                            	@lefttst:
000037B2 0800 0002                  		btst	#bitL,D0
000037B6 6700                       		beq.s	@righttst
000037B8 0441 0001                  		subi.w	#1,D1
000037BC                            	@righttst:
000037BC 0800 0003                  		btst	#bitR,D0
000037C0 6700                       		beq.s	@apply
000037C2 0641 0001                  		addi.w	#1,D1
000037C6                            	@apply:
000037C6 D368 0008                  		add.w	D1,OBJ.X(A0)
000037CA 4EB9 0000 0A70             		JSR		_OBJECTDISPLAY
000037D0 4E75                       		RTS
000037D0 4E75                       		RTS
000037D2                            		INCLUDE		"SRC/OBJ/MENU HANDLE.ASM"
000037D2                            MENU_HANDLE:
000037D2 4E75                       		RTS
000037D2 4E75                       		RTS
000037D4                            		
000037D4                            	ALIGN	$2000
00004000                            		include	"SOUND/driver.asm"
00004000                            ; ---------------------------------------------------------------------------
00004000                            ; Modified SMPS 68k Type 1b sound driver
00004000                            ; ---------------------------------------------------------------------------
00004000                            ; Go_SoundTypes:
00004000 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00004004                            ; Go_SoundD0:
00004004 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00004008 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0000400C 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00004010                            ; off_719A0:
00004010 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00004014 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00004018                            ; ---------------------------------------------------------------------------
00004018                            ; PSG instruments used in music
00004018                            ; ---------------------------------------------------------------------------
00004018                            PSG_Index:
00004018 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00004024 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00004030 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0000403C                            PSG1:		incbin	"sound/psg/psg1.bin"
00004053                            PSG2:		incbin	"sound/psg/psg2.bin"
0000405A                            PSG3:		incbin	"sound/psg/psg3.bin"
0000406B                            PSG4:		incbin	"sound/psg/psg4.bin"
00004076                            PSG6:		incbin	"sound/psg/psg6.bin"
00004085                            PSG5:		incbin	"sound/psg/psg5.bin"
000040AF                            PSG7:		incbin	"sound/psg/psg7.bin"
000040CB                            PSG8:		incbin	"sound/psg/psg8.bin"
000040F3                            PSG9:		incbin	"sound/psg/psg9.bin"
00004104                            ; ---------------------------------------------------------------------------
00004104                            ; New tempos for songs during speed shoes
00004104                            ; ---------------------------------------------------------------------------
00004104                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00004104                            ; tempos while speed shoes are active. If you don't want that, you should add
00004104                            ; their "correct" sped-up main tempos to the list.
00004104                            ; byte_71A94:
00004104                            SpeedUpIndex:
00004104 07                         		dc.b 7		; GHZ
00004105 72                         		dc.b $72	; LZ
00004106 73                         		dc.b $73	; MZ
00004107 26                         		dc.b $26	; SLZ
00004108 15                         		dc.b $15	; SYZ
00004109 08                         		dc.b 8		; SBZ
0000410A FF                         		dc.b $FF	; Invincibility
0000410B 05                         		dc.b 5		; Extra Life
0000410C                            		;dc.b ?		; Special Stage
0000410C                            		;dc.b ?		; Title Screen
0000410C                            		;dc.b ?		; Ending
0000410C                            		;dc.b ?		; Boss
0000410C                            		;dc.b ?		; FZ
0000410C                            		;dc.b ?		; Sonic Got Through
0000410C                            		;dc.b ?		; Game Over
0000410C                            		;dc.b ?		; Continue Screen
0000410C                            		;dc.b ?		; Credits
0000410C                            		;dc.b ?		; Drowning
0000410C                            		;dc.b ?		; Get Emerald
0000410C                            
0000410C                            ; ---------------------------------------------------------------------------
0000410C                            ; Music	Pointers
0000410C                            ; ---------------------------------------------------------------------------
0000410C                            MusicIndex:
0000410C 0000 0000                  ptr_mus81:	dc.l S81
00004110                            ptr_musend
00004110                            ; ---------------------------------------------------------------------------
00004110                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00004110                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00004110                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00004110                            ; any music or SFX can override it (as long as it can override whatever was
00004110                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00004110                            ; will only override special SFX and music will only override music.
00004110                            ; ---------------------------------------------------------------------------
00004110                            ; SoundTypes:
00004110                            SoundPriorities:
00004110 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
0000411F 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0000412F 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0000413F 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0000414F 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0000415F 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
0000416F 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00004174                            
00004174                            ; ---------------------------------------------------------------------------
00004174                            ; Subroutine to update music more than once per frame
00004174                            ; (Called by horizontal & vert. interrupts)
00004174                            ; ---------------------------------------------------------------------------
00004174                            
00004174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004174                            
00004174                            ; sub_71B4C:
00004174                            UpdateMusic:
00004174 33FC 0100 00A1 1100        		stopZ80
0000417C 4E71                       		nop	
0000417E 4E71                       		nop	
00004180 4E71                       		nop	
00004182                            ; loc_71B5A:
00004182                            @updateloop:
00004182 0839 0000 00A1 1100        		btst	#0,(Z80BUS).l		; Is the z80 busy?
0000418A 66F6                       		bne.s	@updateloop			; If so, wait
0000418C                            
0000418C 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00004194 6700                       		beq.s	@driverinput			; Branch if yes
00004196 33FC 0000 00A1 1100        		startZ80
0000419E 4E71                       		nop	
000041A0 4E71                       		nop	
000041A2 4E71                       		nop	
000041A4 4E71                       		nop	
000041A6 4E71                       		nop	
000041A8 60CA                       		bra.s	UpdateMusic
000041AA                            ; ===========================================================================
000041AA                            ; loc_71B82:
000041AA                            @driverinput:
000041AA 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000041B0 422E 000E                  		clr.b	f_voice_selector(a6)
000041B4 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000041B8 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000041BC 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
000041C0 6600                       		bne.s	@skipdelay
000041C2 4EBA 0000                  		jsr	TempoWait(pc)
000041C6                            ; loc_71B9E:
000041C6                            @skipdelay:
000041C6 102E 0004                  		move.b	v_fadeout_counter(a6),d0
000041CA 6700                       		beq.s	@skipfadeout
000041CC 4EBA 0000                  		jsr	DoFadeOut(pc)
000041D0                            ; loc_71BA8:
000041D0                            @skipfadeout:
000041D0 4A2E 0024                  		tst.b	f_fadein_flag(a6)
000041D4 6700                       		beq.s	@skipfadein
000041D6 4EBA 0000                  		jsr	DoFadeIn(pc)
000041DA                            ; loc_71BB2:
000041DA                            @skipfadein:
000041DA                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
000041DA 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for playing?
000041DE 6700                       		beq.s	@nosndinput		; if not, branch
000041E0 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000041E4                            ; loc_71BBC:
000041E4                            @nosndinput:
000041E4 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000041EA 6700                       		beq.s	@nonewsound		; If yes, branch
000041EC 4EBA 0000                  		jsr	PlaySoundID(pc)
000041F0                            ; loc_71BC8:
000041F0                            @nonewsound:
000041F0 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000041F4 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000041F6 6A00                       		bpl.s	@dacdone		; Branch if not
000041F8 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000041FC                            ; loc_71BD4:
000041FC                            @dacdone:
000041FC 422E 0008                  		clr.b	f_updating_dac(a6)
00004200 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00004202                            ; loc_71BDA:
00004202                            @bgmfmloop:
00004202 DAFC 0030                  		adda.w	#TrackSz,a5
00004206 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004208 6A00                       		bpl.s	@bgmfmnext		; Branch if not
0000420A 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0000420E                            ; loc_71BE6:
0000420E                            @bgmfmnext:
0000420E 51CF FFF2                  		dbf	d7,@bgmfmloop
00004212                            
00004212 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00004214                            ; loc_71BEC:
00004214                            @bgmpsgloop:
00004214 DAFC 0030                  		adda.w	#TrackSz,a5
00004218 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0000421A 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
0000421C 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00004220                            ; loc_71BF8:
00004220                            @bgmpsgnext:
00004220 51CF FFF2                  		dbf	d7,@bgmpsgloop
00004224                            
00004224 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
0000422A 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
0000422C                            ; loc_71C04:
0000422C                            @sfxfmloop:
0000422C DAFC 0030                  		adda.w	#TrackSz,a5
00004230 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004232 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00004234 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00004238                            ; loc_71C10:
00004238                            @sfxfmnext:
00004238 51CF FFF2                  		dbf	d7,@sfxfmloop
0000423C                            
0000423C 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
0000423E                            ; loc_71C16:
0000423E                            @sfxpsgloop:
0000423E DAFC 0030                  		adda.w	#TrackSz,a5
00004242 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004244 6A00                       		bpl.s	@sfxpsgnext		; Branch if not
00004246 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0000424A                            ; loc_71C22:
0000424A                            @sfxpsgnext:
0000424A 51CF FFF2                  		dbf	d7,@sfxpsgloop
0000424E                            		
0000424E 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00004254 DAFC 0030                  		adda.w	#TrackSz,a5
00004258 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0000425A 6A00                       		bpl.s	@specfmdone		; Branch if not
0000425C 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00004260                            ; loc_71C38:
00004260                            @specfmdone:
00004260 DAFC 0030                  		adda.w	#TrackSz,a5
00004264 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00004266 6A00                       		bpl.s	DoStartZ80		; Branch if not
00004268 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0000426C                            ; loc_71C44:
0000426C                            DoStartZ80:
0000426C 33FC 0000 00A1 1100        		startZ80
00004274 4E75                       		rts	
00004276                            ; End of function UpdateMusic
00004276                            
00004276                            
00004276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004276                            
00004276                            ; sub_71C4E: UpdateDAC:
00004276                            DACUpdateTrack:
00004276 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
0000427A 6600                       		bne.s	@locret				; Return if not
0000427C 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00004282                            ;DACDoNext:
00004282 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00004286                            ; loc_71C5E:
00004286                            @sampleloop:
00004286 7A00                       		moveq	#0,d5
00004288 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
0000428A 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0000428E 6500                       		blo.s	@notcoord	; Branch if not
00004290 4EBA 0000                  		jsr	CoordFlag(pc)
00004294 60F0                       		bra.s	@sampleloop
00004296                            ; ===========================================================================
00004296                            ; loc_71C6E:
00004296                            @notcoord:
00004296 4A05                       		tst.b	d5			; Is it a sample?
00004298 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
0000429A 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
0000429E 1A1C                       		move.b	(a4)+,d5		; Get another byte
000042A0 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
000042A2 534C                       		subq.w	#1,a4			; Put byte back
000042A4 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
000042AA 6000                       		bra.s	@gotsampleduration
000042AC                            ; ===========================================================================
000042AC                            ; loc_71C84:
000042AC                            @gotduration:
000042AC 4EBA 0000                  		jsr	SetDuration(pc)
000042B0                            ; loc_71C88:
000042B0                            @gotsampleduration:
000042B0 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
000042B4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000042B8 6600                       		bne.s	@locret			; Return if yes
000042BA 7000                       		moveq	#0,d0
000042BC 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
000042C0 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
000042C4 6700                       		beq.s	@locret			; Return if yes
000042C6 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
000042CA 6600                       		bne.s	@timpani		; Various timpani
000042CC 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
000042D2                            ; locret_71CAA:
000042D2                            @locret:
000042D2 4E75                       		rts	
000042D4                            ; ===========================================================================
000042D4                            ; loc_71CAC:
000042D4                            @timpani:
000042D4 0400 0088                  		subi.b	#$88,d0		; Convert into an index
000042D8 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
000042DC                            		; Warning: this affects the raw pitch of sample $83, meaning it will
000042DC                            		; use this value from then on.
000042DC 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
000042E2 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
000042EA 4E75                       		rts	
000042EC                            ; End of function DACUpdateTrack
000042EC                            
000042EC                            ; ===========================================================================
000042EC                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
000042EC                            ; Also, $8C-$8D are so slow you may want to skip them.
000042EC                            ; byte_71CC4:
000042EC 1215 1C1D FFFF             DAC_sample_rate: dc.b $12, $15, $1C, $1D, $FF, $FF
000042F2                            
000042F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042F2                            
000042F2                            ; sub_71CCA:
000042F2                            FMUpdateTrack:
000042F2 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
000042F6 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
000042F8 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000042FC 4EBA 0000                  		jsr	FMDoNext(pc)
00004300 4EBA 0000                  		jsr	FMPrepareNote(pc)
00004304 6000 0000                  		bra.w	FMNoteOn
00004308                            ; ===========================================================================
00004308                            ; loc_71CE0:
00004308                            @notegoing:
00004308 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
0000430C 4EBA 0000                  		jsr	DoModulation(pc)
00004310 6000 0000                  		bra.w	FMUpdateFreq
00004314                            ; End of function FMUpdateTrack
00004314                            
00004314                            
00004314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004314                            
00004314                            ; sub_71CEC:
00004314                            FMDoNext:
00004314 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00004318 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
0000431C                            ; loc_71CF4:
0000431C                            @noteloop:
0000431C 7A00                       		moveq	#0,d5
0000431E 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00004320 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00004324 6500                       		blo.s	@gotnote	; Branch if not
00004326 4EBA 0000                  		jsr	CoordFlag(pc)
0000432A 60F0                       		bra.s	@noteloop
0000432C                            ; ===========================================================================
0000432C                            ; loc_71D04:
0000432C                            @gotnote:
0000432C 4EBA 0000                  		jsr	FMNoteOff(pc)
00004330 4A05                       		tst.b	d5		; Is this a note?
00004332 6A00                       		bpl.s	@gotduration	; Branch if not
00004334 4EBA 0000                  		jsr	FMSetFreq(pc)
00004338 1A1C                       		move.b	(a4)+,d5	; Get another byte
0000433A 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
0000433C 534C                       		subq.w	#1,a4		; Otherwise, put it back
0000433E 6000 0000                  		bra.w	FinishTrackUpdate
00004342                            ; ===========================================================================
00004342                            ; loc_71D1A:
00004342                            @gotduration:
00004342 4EBA 0000                  		jsr	SetDuration(pc)
00004346 6000 0000                  		bra.w	FinishTrackUpdate
0000434A                            ; End of function FMDoNext
0000434A                            
0000434A                            
0000434A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000434A                            
0000434A                            ; sub_71D22:
0000434A                            FMSetFreq:
0000434A 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
0000434E 6700                       		beq.s	TrackSetRest
00004350 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00004354 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00004358 E34D                       		lsl.w	#1,d5
0000435A 41FA 0000                  		lea	FMFrequencies(pc),a0
0000435E 3C30 5000                  		move.w	(a0,d5.w),d6
00004362 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00004366 4E75                       		rts	
00004368                            ; End of function FMSetFreq
00004368                            
00004368                            
00004368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004368                            
00004368                            ; sub_71D40:
00004368                            SetDuration:
00004368 1005                       		move.b	d5,d0
0000436A 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
0000436E                            ; loc_71D46:
0000436E                            @multloop:
0000436E 5301                       		subq.b	#1,d1
00004370 6700                       		beq.s	@donemult
00004372 D005                       		add.b	d5,d0
00004374 60F8                       		bra.s	@multloop
00004376                            ; ===========================================================================
00004376                            ; loc_71D4E:
00004376                            @donemult:
00004376 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
0000437A 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
0000437E 4E75                       		rts	
00004380                            ; End of function SetDuration
00004380                            
00004380                            ; ===========================================================================
00004380                            ; loc_71D58:
00004380                            TrackSetRest:
00004380 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00004384 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00004388                            
00004388                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004388                            
00004388                            ; sub_71D60:
00004388                            FinishTrackUpdate:
00004388 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
0000438C 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00004392 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00004396 6600                       		bne.s	@locret				; If so, branch
00004398 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
0000439E 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
000043A2 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
000043A6 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
000043A8 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
000043AC 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
000043B0 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
000043B4 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
000043B8 1018                       		move.b	(a0)+,d0			; Get steps
000043BA E208                       		lsr.b	#1,d0				; Halve them
000043BC 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
000043C0 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
000043C4                            ; locret_71D9C:
000043C4                            @locret:
000043C4 4E75                       		rts	
000043C6                            ; End of function FinishTrackUpdate
000043C6                            
000043C6                            
000043C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043C6                            
000043C6                            ; sub_71D9E: NoteFillUpdate
000043C6                            NoteTimeoutUpdate:
000043C6 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
000043CA 6700                       		beq.s	@locret
000043CC 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
000043D0 6600                       		bne.s	@locret				; Return if it hasn't expired
000043D2 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
000043D6 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a PSG track?
000043DA 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
000043DE 4EBA 0000                  		jsr	FMNoteOff(pc)
000043E2 584F                       		addq.w	#4,sp				; Do not return to caller
000043E4 4E75                       		rts	
000043E6                            ; ===========================================================================
000043E6                            ; loc_71DBE:
000043E6                            @psgnoteoff:
000043E6 4EBA 0000                  		jsr	PSGNoteOff(pc)
000043EA 584F                       		addq.w	#4,sp		; Do not return to caller
000043EC                            ; locret_71DC4:
000043EC                            @locret:
000043EC 4E75                       		rts	
000043EE                            ; End of function NoteTimeoutUpdate
000043EE                            
000043EE                            
000043EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043EE                            
000043EE                            ; sub_71DC6:
000043EE                            DoModulation:
000043EE 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
000043F0 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
000043F4 6700                       		beq.s	@locret				; Return if not
000043F6 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
000043FA 6700                       		beq.s	@waitdone			; If yes, branch
000043FC 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00004400 4E75                       		rts	
00004402                            ; ===========================================================================
00004402                            ; loc_71DDA:
00004402                            @waitdone:
00004402 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00004406 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00004408 4E75                       		rts	
0000440A                            ; ===========================================================================
0000440A                            ; loc_71DE2:
0000440A                            @updatemodulation:
0000440A 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
0000440E 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00004414 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00004418 6600                       		bne.s	@calcfreq			; If nonzero, branch
0000441A 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00004420 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00004424 4E75                       		rts	
00004426                            ; ===========================================================================
00004426                            ; loc_71DFE:
00004426                            @calcfreq:
00004426 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
0000442A 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
0000442E 4886                       		ext.w	d6
00004430 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00004434 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00004438 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
0000443C 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
0000443E                            ; locret_71E16:
0000443E                            @locret:
0000443E 4E75                       		rts	
00004440                            ; End of function DoModulation
00004440                            
00004440                            
00004440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004440                            
00004440                            ; sub_71E18:
00004440                            FMPrepareNote:
00004440 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00004444 6600                       		bne.s	locret_71E48		; Return if so
00004446 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
0000444A 6700                       		beq.s	FMSetRest		; Branch if zero
0000444C                            ; loc_71E24:
0000444C                            FMUpdateFreq:
0000444C 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00004450 4880                       		ext.w	d0
00004452 DC40                       		add.w	d0,d6			; Add note frequency
00004454 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00004458 6600                       		bne.s	locret_71E48		; Return if so
0000445A 3206                       		move.w	d6,d1
0000445C E049                       		lsr.w	#8,d1
0000445E 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00004462 4EBA 0000                  		jsr	WriteFMIorII(pc)
00004466 1206                       		move.b	d6,d1
00004468 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
0000446C 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00004470                            ; locret_71E48:
00004470                            locret_71E48:
00004470 4E75                       		rts	
00004472                            ; ===========================================================================
00004472                            ; loc_71E4A:
00004472                            FMSetRest:
00004472 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00004476 4E75                       		rts	
00004478                            ; End of function FMPrepareNote
00004478                            
00004478                            ; ===========================================================================
00004478                            ; loc_71E50:
00004478                            PauseMusic:
00004478 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
0000447A 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00004480 6700 0000                  		beq.w	@unpausedallfm
00004484 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
0000448A 7602                       		moveq	#2,d3
0000448C 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00004490 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00004492                            ; loc_71E6A:
00004492                            @killpanloop:
00004492 4EBA 0000                  		jsr	WriteFMI(pc)
00004496 4EBA 0000                  		jsr	WriteFMII(pc)
0000449A 5200                       		addq.b	#1,d0
0000449C 51CB FFF4                  		dbf	d3,@killpanloop
000044A0                            
000044A0 7602                       		moveq	#2,d3
000044A2 7028                       		moveq	#$28,d0		; Key on/off register
000044A4                            ; loc_71E7C:
000044A4                            @noteoffloop:
000044A4 1203                       		move.b	d3,d1		; FM1, FM2, FM3
000044A6 4EBA 0000                  		jsr	WriteFMI(pc)
000044AA 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000044AC 4EBA 0000                  		jsr	WriteFMI(pc)
000044B0 51CB FFF2                  		dbf	d3,@noteoffloop
000044B4                            
000044B4 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000044B8 6000 FDB2                  		bra.w	DoStartZ80
000044BC                            ; ===========================================================================
000044BC                            ; loc_71E94:
000044BC                            @unpausemusic:
000044BC 422E 0003                  		clr.b	f_pausemusic(a6)
000044C0 7630                       		moveq	#TrackSz,d3
000044C2 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000044C6 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000044C8                            ; loc_71EA0:
000044C8                            @bgmfmloop:
000044C8 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000044CC 6700                       		beq.s	@bgmfmnext		; Branch if not
000044CE 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000044D2 6600                       		bne.s	@bgmfmnext		; Branch if yes
000044D4 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000044D8 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000044DC 4EBA 0000                  		jsr	WriteFMIorII(pc)
000044E0                            ; loc_71EB8:
000044E0                            @bgmfmnext:
000044E0 DAC3                       		adda.w	d3,a5
000044E2 51CC FFE4                  		dbf	d4,@bgmfmloop
000044E6                            
000044E6 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
000044EA 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
000044EC                            ; loc_71EC4:
000044EC                            @sfxfmloop:
000044EC 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000044F0 6700                       		beq.s	@sfxfmnext		; Branch if not
000044F2 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000044F6 6600                       		bne.s	@sfxfmnext		; Branch if yes
000044F8 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000044FC 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00004500 4EBA 0000                  		jsr	WriteFMIorII(pc)
00004504                            ; loc_71EDC:
00004504                            @sfxfmnext:
00004504 DAC3                       		adda.w	d3,a5
00004506 51CC FFE4                  		dbf	d4,@sfxfmloop
0000450A                            
0000450A 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
0000450E 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00004512 6700                       		beq.s	@unpausedallfm		; Branch if not
00004514 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00004518 6600                       		bne.s	@unpausedallfm		; Branch if yes
0000451A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0000451E 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00004522 4EBA 0000                  		jsr	WriteFMIorII(pc)
00004526                            ; loc_71EFE:
00004526                            @unpausedallfm:
00004526 6000 FD44                  		bra.w	DoStartZ80
0000452A                            
0000452A                            ; ---------------------------------------------------------------------------
0000452A                            ; Subroutine to	play a sound or	music track
0000452A                            ; ---------------------------------------------------------------------------
0000452A                            
0000452A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000452A                            
0000452A                            ; Sound_Play:
0000452A                            CycleSoundQueue:
0000452A 2079 0000 4000             		movea.l	(Go_SoundPriorities).l,a0
00004530 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00004534 162E 0000                  		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00004538 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
0000453A                            ; loc_71F12:
0000453A                            @inputloop:
0000453A 1011                       		move.b	(a1),d0			; move track number to d0
0000453C 1200                       		move.b	d0,d1
0000453E 4219                       		clr.b	(a1)+			; Clear entry
00004540 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00004544 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00004546 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
0000454C 6700                       		beq.s	@havesound		; If yes, branch
0000454E 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00004552 6000                       		bra.s	@nextinput
00004554                            ; ===========================================================================
00004554                            ; loc_71F2C:
00004554                            @havesound:
00004554 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00004558 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
0000455C B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
0000455E 6500                       		blo.s	@nextinput		; Branch if yes
00004560 1602                       		move.b	d2,d3			; Store new priority
00004562 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for playing
00004566                            ; loc_71F3E:
00004566                            @nextinput:
00004566 51CC FFD2                  		dbf	d4,@inputloop
0000456A                            
0000456A 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
0000456C 6B00                       		bmi.s	@locret
0000456E 1D43 0000                  		move.b	d3,v_sndprio(a6)	; Set new sound priority
00004572                            ; locret_71F4A:
00004572                            @locret:
00004572 4E75                       		rts	
00004574                            ; End of function CycleSoundQueue
00004574                            
00004574                            
00004574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004574                            
00004574                            ; Sound_ChkValue:
00004574                            PlaySoundID:
00004574 7E00                       		moveq	#0,d7
00004576 1E2E 0009                  		move.b	v_sound_id(a6),d7
0000457A 6700 0000                  		beq.w	StopAllSound
0000457E 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00004580 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00004586                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00004586                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00004586                            		; See LevSel_NoCheat for more.
00004586 0C07 0000                  		cmpi.b	#bgm__Last+$C,d7	; Is this music ($81-$9F)?
0000458A 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
0000458E 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00004592 6500 0000                  		blo.w	@locret			; Return if yes
00004596 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
0000459A 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
0000459E 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
000045A2 6500 0000                  		blo.w	@locret			; Return if yes
000045A6                            		; DANGER! Special SFXes end at $D0, yet this checks until $DF; attempting to
000045A6                            		; play sounds $D1-$DF will cause a crash! Remove the '+$10' and change the 'blo' to a 'bls'
000045A6                            		; and uncomment the two lines below to fix this.
000045A6 0C07 0000                  		cmpi.b	#spec__Last+$10,d7	; Is this special sfx ($D0-$DF)?
000045AA 6500 0000                  		blo.w	Sound_PlaySpecial	; Branch if yes
000045AE                            		;cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000045AE                            		;blo.w	@locret			; Return if yes
000045AE 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000045B2 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000045B4                            ; locret_71F8C:
000045B4                            @locret:
000045B4 4E75                       		rts	
000045B6                            ; ===========================================================================
000045B6                            
000045B6                            Sound_E0toE4:
000045B6 0407 00E0                  		subi.b	#flg__First,d7
000045BA E54F                       		lsl.w	#2,d7
000045BC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000045C0                            ; ===========================================================================
000045C0                            
000045C0                            Sound_ExIndex:
000045C0 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000045C4 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000045C8 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
000045CC 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
000045D0 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
000045D4                            ptr_flgend
000045D4                            ; ===========================================================================
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Play "Say-gaa" PCM sound
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Sound_E1: PlaySega:
000045D4                            PlaySegaSound:
000045D4 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
000045DC 33FC 0000 00A1 1100        		startZ80
000045E4 323C 0011                  		move.w	#$11,d1
000045E8                            ; loc_71FC0:
000045E8                            @busyloop_outer:
000045E8 303C FFFF                  		move.w	#-1,d0
000045EC                            ; loc_71FC4:
000045EC                            @busyloop:
000045EC 4E71                       		nop	
000045EE 51C8 FFFC                  		dbf	d0,@busyloop
000045F2                            
000045F2 51C9 FFF4                  		dbf	d1,@busyloop_outer
000045F6                            
000045F6 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000045F8 4E75                       		rts	
000045FA                            ; ===========================================================================
000045FA                            ; ---------------------------------------------------------------------------
000045FA                            ; Play music track $81-$9F
000045FA                            ; ---------------------------------------------------------------------------
000045FA                            ; Sound_81to9F:
000045FA                            Sound_PlayBGM:
000045FA                            ; loc_72024:
000045FA                            @bgmnot1up:
000045FA 422E 0027                  		clr.b	f_1up_playing(a6)
000045FE 422E 0026                  		clr.b	v_fadein_counter(a6)
00004602                            ; loc_7202C:
00004602                            @bgm_loadMusic:
00004602 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00004606 2879 0000 4010             		movea.l	(Go_SpeedUpIndex).l,a4
0000460C 0407 0081                  		subi.b	#bgm__First,d7
00004610 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00004616 2879 0000 4008             		movea.l	(Go_MusicIndex).l,a4
0000461C E54F                       		lsl.w	#2,d7
0000461E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00004622 7000                       		moveq	#0,d0
00004624 3014                       		move.w	(a4),d0			; load voice pointer
00004626 D08C                       		add.l	a4,d0			; It is a relative pointer
00004628 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
0000462C 102C 0005                  		move.b	5(a4),d0		; load tempo
00004630 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00004634 4A2E 002A                  		tst.b	f_speedup(a6)
00004638 6700                       		beq.s	@nospeedshoes
0000463A 102E 0029                  		move.b	v_speeduptempo(a6),d0
0000463E                            ; loc_72068:
0000463E                            @nospeedshoes:
0000463E 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00004642 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00004646 7200                       		moveq	#0,d1
00004648 264C                       		movea.l	a4,a3
0000464A 5C4C                       		addq.w	#6,a4			; Point past header
0000464C 7E00                       		moveq	#0,d7
0000464E 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00004652 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00004656 5307                       		subq.b	#1,d7
00004658 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
0000465C 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00004660 7C30                       		moveq	#TrackSz,d6
00004662 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00004666 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
0000466A 45FA 0000                  		lea	FMDACInitBytes(pc),a2
0000466E                            ; loc_72098:
0000466E                            @bgm_fmloadloop:
0000466E 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00004672 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00004676 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
0000467A 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
0000467E 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00004682 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00004686 7000                       		moveq	#0,d0
00004688 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
0000468A D08B                       		add.l	a3,d0				; Relative pointer
0000468C 2340 0004                  		move.l	d0,TrackDataPointer(a1)		; Store track pointer
00004690 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00004694 D2C6                       		adda.w	d6,a1
00004696 51CF FFD6                  		dbf	d7,@bgm_fmloadloop
0000469A                            		
0000469A 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000046A0 6600                       		bne.s	@silencefm6
000046A2 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000046A4 7200                       		moveq	#0,d1		; Disable DAC
000046A6 4EBA 0000                  		jsr	WriteFMI(pc)
000046AA 6000 0000                  		bra.w	@bgm_fmdone
000046AE                            ; ===========================================================================
000046AE                            ; loc_720D8:
000046AE                            @silencefm6:
000046AE 7028                       		moveq	#$28,d0		; Key on/off register
000046B0 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000046B2 4EBA 0000                  		jsr	WriteFMI(pc)
000046B6 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000046BA 727F                       		moveq	#$7F,d1		; Total silence
000046BC 4EBA 0000                  		jsr	WriteFMII(pc)
000046C0 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000046C4 727F                       		moveq	#$7F,d1		; Total silence
000046C6 4EBA 0000                  		jsr	WriteFMII(pc)
000046CA 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000046CE 727F                       		moveq	#$7F,d1		; Total silence
000046D0 4EBA 0000                  		jsr	WriteFMII(pc)
000046D4 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000046D8 727F                       		moveq	#$7F,d1		; Total silence
000046DA 4EBA 0000                  		jsr	WriteFMII(pc)
000046DE 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000046E2 123C 00C0                  		move.b	#$C0,d1		; Stereo
000046E6 4EBA 0000                  		jsr	WriteFMII(pc)
000046EA                            ; loc_72114:
000046EA                            @bgm_fmdone:
000046EA 7E00                       		moveq	#0,d7
000046EC 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000046F0 6700                       		beq.s	@bgm_psgdone	; branch if zero
000046F2 5307                       		subq.b	#1,d7
000046F4 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
000046F8 45FA 0000                  		lea	PSGInitBytes(pc),a2
000046FC                            ; loc_72126:
000046FC                            @bgm_psgloadloop:
000046FC 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00004700 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00004704 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00004708 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
0000470C 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00004710 7000                       		moveq	#0,d0
00004712 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00004714 D08B                       		add.l	a3,d0				; Relative pointer
00004716 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0000471A 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
0000471E 101C                       		move.b	(a4)+,d0			; load redundant byte
00004720 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00004724 D2C6                       		adda.w	d6,a1
00004726 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
0000472A                            ; loc_72154:
0000472A                            @bgm_psgdone:
0000472A 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
0000472E 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00004730                            ; loc_7215A:
00004730                            @sfxstoploop:
00004730 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00004732 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00004736 7000                       		moveq	#0,d0
00004738 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
0000473C 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
0000473E 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00004740 E508                       		lsl.b	#2,d0			; Convert to index
00004742 6000                       		bra.s	@gotchannelindex
00004744                            ; ===========================================================================
00004744                            ; loc_7216E:
00004744                            @sfxpsgchannel:
00004744 E608                       		lsr.b	#3,d0		; Convert to index
00004746                            ; loc_72170:
00004746                            @gotchannelindex:
00004746 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
0000474A 2070 0000                  		movea.l	(a0,d0.w),a0
0000474E 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00004752                            ; loc_7217C:
00004752                            @sfxnext:
00004752 D2C6                       		adda.w	d6,a1
00004754 51CF FFDA                  		dbf	d7,@sfxstoploop
00004758                            
00004758 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0000475C 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
0000475E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004764                            ; loc_7218E:
00004764                            @checkspecialpsg:
00004764 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00004768 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
0000476A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004770                            ; loc_7219A:
00004770                            @sendfmnoteoff:
00004770 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00004774 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00004776                            ; loc_721A0:
00004776                            @fmnoteoffloop:
00004776 4EBA 0000                  		jsr	FMNoteOff(pc)
0000477A DAC6                       		adda.w	d6,a5
0000477C 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00004780 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00004782                            ; loc_721AC:
00004782                            @psgnoteoffloop:
00004782 4EBA 0000                  		jsr	PSGNoteOff(pc)
00004786 DAC6                       		adda.w	d6,a5
00004788 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
0000478C                            ; loc_721B6:
0000478C                            @locdblret:
0000478C 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
0000478E 4E75                       		rts	
00004790                            ; ===========================================================================
00004790                            ; byte_721BA:
00004790 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00004798 00                         		even
00004798                            ; byte_721C2:
00004798 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
0000479C 00                         		even
0000479C                            ; ===========================================================================
0000479C                            ; ---------------------------------------------------------------------------
0000479C                            ; Play normal sound effect
0000479C                            ; ---------------------------------------------------------------------------
0000479C                            ; Sound_A0toCF:
0000479C                            Sound_PlaySFX:
0000479C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000047A0 6600 0000                  		bne.w	@clear_sndprio		; Exit is it is
000047A4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000047A8 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
000047AC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000047B0 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
000047B4 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
000047B8 6600                       		bne.s	@sfx_notPush		; if not, branch
000047BA 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
000047BE 6600 0000                  		bne.w	@locret			; Return if not
000047C2 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
000047C8                            ; Sound_notA7:
000047C8                            @sfx_notPush:
000047C8 2079 0000 400C             		movea.l	(Go_SoundIndex).l,a0
000047CE 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
000047D2 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
000047D4 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
000047D8 224B                       		movea.l	a3,a1
000047DA 7200                       		moveq	#0,d1
000047DC 3219                       		move.w	(a1)+,d1		; Voice pointer
000047DE D28B                       		add.l	a3,d1			; Relative pointer
000047E0 1A19                       		move.b	(a1)+,d5		; Dividing timing
000047E2                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
000047E2                            		; index entry is above $3F will cause a crash. This is actually the same way that
000047E2                            		; this bug is fixed in Ristar's driver.
000047E2 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
000047E4 5307                       		subq.b	#1,d7
000047E6 7C30                       		moveq	#TrackSz,d6
000047E8                            ; loc_72228:
000047E8                            @sfx_loadloop:
000047E8 7600                       		moveq	#0,d3
000047EA 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
000047EE 1803                       		move.b	d3,d4
000047F0 6B00                       		bmi.s	@sfxinitpsg	; Branch if PSG
000047F2 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
000047F4 E54B                       		lsl.w	#2,d3
000047F6 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000047FA 2A75 3000                  		movea.l	(a5,d3.w),a5
000047FE 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00004802 6000                       		bra.s	@sfxoverridedone
00004804                            ; ===========================================================================
00004804                            ; loc_72244:
00004804                            @sfxinitpsg:
00004804 E64B                       		lsr.w	#3,d3
00004806 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0000480A 2A75 3000                  		movea.l	(a5,d3.w),a5
0000480E 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00004812 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00004816 6600                       		bne.s	@sfxoverridedone	; Branch if not
00004818 1004                       		move.b	d4,d0
0000481A 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0000481E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00004824 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00004828 13C0 00C0 0011             		move.b	d0,(psg_input).l
0000482E                            ; loc_7226E:
0000482E                            @sfxoverridedone:
0000482E 2A7B 3000                  		movea.l	SFX_SFXChannelRAM(pc,d3.w),a5
00004832 244D                       		movea.l	a5,a2
00004834 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00004836                            ; loc_72276:
00004836                            @clearsfxtrackram:
00004836 429A                       		clr.l	(a2)+
00004838 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0000483C                            
0000483C 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
0000483E 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00004842 7000                       		moveq	#0,d0
00004844 3019                       		move.w	(a1)+,d0			; Track data pointer
00004846 D08B                       		add.l	a3,d0				; Relative pointer
00004848 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0000484C 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00004850 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00004856 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
0000485A 4A04                       		tst.b	d4				; Is this a PSG channel?
0000485C 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
0000485E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00004864 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00004868                            ; loc_722A8:
00004868                            @sfxpsginitdone:
00004868 51CF FF7E                  		dbf	d7,@sfx_loadloop
0000486C                            
0000486C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00004870 6A00                       		bpl.s	@doneoverride					; Branch if not
00004872 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004878                            ; loc_722B8:
00004878                            @doneoverride:
00004878 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0000487C 6A00                       		bpl.s	@locret						; Branch if not
0000487E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004884                            ; locret_722C4:
00004884                            @locret:
00004884 4E75                       		rts	
00004886                            ; ===========================================================================
00004886                            ; loc_722C6:
00004886                            @clear_sndprio:
00004886 422E 0000                  		clr.b	v_sndprio(a6)	; Clear priority
0000488A 4E75                       		rts	
0000488C                            ; ===========================================================================
0000488C                            ; ---------------------------------------------------------------------------
0000488C                            ; RAM addresses for FM and PSG channel variables used by the SFX
0000488C                            ; ---------------------------------------------------------------------------
0000488C                            ; dword_722CC: BGMChannelRAM:
0000488C                            SFX_BGMChannelRAM:
0000488C 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00004890 0000 0000                  		dc.l 0
00004894 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00004898 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0000489C 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
000048A0 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
000048A4 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
000048A8 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
000048AC                            ; dword_722EC: SFXChannelRAM:
000048AC                            SFX_SFXChannelRAM:
000048AC 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
000048B0 0000 0000                  		dc.l 0
000048B4 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000048B8 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
000048BC 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
000048C0 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
000048C4 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
000048C8 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
000048CC                            ; ===========================================================================
000048CC                            ; ---------------------------------------------------------------------------
000048CC                            ; Play GHZ waterfall sound
000048CC                            ; ---------------------------------------------------------------------------
000048CC                            ; Sound_D0toDF:
000048CC                            Sound_PlaySpecial:
000048CC 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000048D0 6600 0000                  		bne.w	@locret			; Return if so
000048D4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000048D8 6600 0000                  		bne.w	@locret			; Exit if it is
000048DC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000048E0 6600 0000                  		bne.w	@locret			; Exit if it is
000048E4 2079 0000 4004             		movea.l	(Go_SpecSoundIndex).l,a0
000048EA 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000048EE E54F                       		lsl.w	#2,d7
000048F0 2670 7000                  		movea.l	(a0,d7.w),a3
000048F4 224B                       		movea.l	a3,a1
000048F6 7000                       		moveq	#0,d0
000048F8 3019                       		move.w	(a1)+,d0			; Voice pointer
000048FA D08B                       		add.l	a3,d0				; Relative pointer
000048FC 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00004900 1A19                       		move.b	(a1)+,d5			; Dividing timing
00004902                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00004902                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00004902 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00004904 5307                       		subq.b	#1,d7
00004906 7C30                       		moveq	#TrackSz,d6
00004908                            ; loc_72348:
00004908                            @sfxloadloop:
00004908 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0000490C 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
0000490E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004914 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00004918 6000                       		bra.s	@sfxinitpsg
0000491A                            ; ===========================================================================
0000491A                            ; loc_7235A:
0000491A                            @sfxoverridepsg:
0000491A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004920 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00004924                            ; loc_72364:
00004924                            @sfxinitpsg:
00004924 244D                       		movea.l	a5,a2
00004926 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00004928                            ; loc_72368:
00004928                            @clearsfxtrackram:
00004928 429A                       		clr.l	(a2)+
0000492A 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0000492E                            
0000492E 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00004930 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00004934 7000                       		moveq	#0,d0
00004936 3019                       		move.w	(a1)+,d0			; Track data pointer
00004938 D08B                       		add.l	a3,d0				; Relative pointer
0000493A 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0000493E 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00004942 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00004948 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
0000494C 4A04                       		tst.b	d4				; Is this a PSG channel?
0000494E 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00004950 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00004956                            ; loc_72396:
00004956                            @sfxpsginitdone:
00004956 51CF FFB0                  		dbf	d7,@sfxloadloop
0000495A                            
0000495A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
0000495E 6A00                       		bpl.s	@doneoverride					; Branch if not
00004960 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004966                            ; loc_723A6:
00004966                            @doneoverride:
00004966 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
0000496A 6A00                       		bpl.s	@locret						; Branch if not
0000496C 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00004972 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00004976 13C4 00C0 0011             		move.b	d4,(psg_input).l
0000497C 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00004980 13C4 00C0 0011             		move.b	d4,(psg_input).l
00004986                            ; locret_723C6:
00004986                            @locret:
00004986 4E75                       		rts	
00004988                            ; End of function PlaySoundID
00004988                            
00004988                            ; ===========================================================================
00004988                            ; ---------------------------------------------------------------------------
00004988                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00004988                            ; ---------------------------------------------------------------------------
00004988                            ; The first block would have been used for overriding the music tracks
00004988                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00004988                            ; The third block would be used to set up the Special SFX
00004988                            ; The second block, however, is for the SFX tracks, which have a higher priority
00004988                            ; and would be checked for if they're currently playing
00004988                            ; If they are, then the third block would be used again, this time to mark
00004988                            ; the new tracks as 'currently playing'
00004988                            
00004988                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00004988                            
00004988                            ; BGMFM4PSG3RAM:
00004988                            ;SpecSFX_BGMChannelRAM:
00004988 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0000498C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00004990                            ; SFXFM4PSG3RAM:
00004990                            ;SpecSFX_SFXChannelRAM:
00004990 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00004994 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00004998                            ; SpecialSFXFM4PSG3RAM:
00004998                            ;SpecSFX_SpecSFXChannelRAM:
00004998 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
0000499C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
000049A0                            
000049A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049A0                            
000049A0                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
000049A0                            StopSFX:
000049A0 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
000049A4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000049A8 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
000049AA                            ; loc_723EA:
000049AA                            @trackloop:
000049AA 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
000049AC 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
000049B0 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000049B4 7600                       		moveq	#0,d3
000049B6 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
000049BA 6B00                       		bmi.s	@trackpsg			; Branch if PSG
000049BC 4EBA 0000                  		jsr	FMNoteOff(pc)
000049C0 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
000049C4 6600                       		bne.s	@getfmpointer					; Branch if not
000049C6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000049CA 6A00                       		bpl.s	@getfmpointer					; Branch if not
000049CC                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
000049CC                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
000049CC                            		; is playing its sound!
000049CC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000049D0 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
000049D4 6000                       		bra.s	@gotfmpointer
000049D6                            ; ===========================================================================
000049D6                            ; loc_72416:
000049D6                            @getfmpointer:
000049D6 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
000049D8 E50B                       		lsl.b	#2,d3
000049DA 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
000049DE 264D                       		movea.l	a5,a3
000049E0 2A70 3000                  		movea.l	(a0,d3.w),a5
000049E4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
000049E8                            ; loc_72428:
000049E8                            @gotfmpointer:
000049E8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000049EC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000049F0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000049F4 4EBA 0000                  		jsr	SetVoice(pc)
000049F8 2A4B                       		movea.l	a3,a5
000049FA 6000                       		bra.s	@nexttrack
000049FC                            ; ===========================================================================
000049FC                            ; loc_7243C:
000049FC                            @trackpsg:
000049FC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00004A00 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00004A04 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00004A08 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00004A0A 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00004A0E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00004A10 E60B                       		lsr.b	#3,d3
00004A12 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00004A16 2070 3000                  		movea.l	(a0,d3.w),a0
00004A1A                            ; loc_7245A:
00004A1A                            @gotpsgpointer:
00004A1A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00004A1E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00004A22 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00004A28 6600                       		bne.s	@nexttrack			; Branch if not
00004A2A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00004A32                            ; loc_72472:
00004A32                            @nexttrack:
00004A32 DAFC 0030                  		adda.w	#TrackSz,a5
00004A36 51CF FF72                  		dbf	d7,@trackloop
00004A3A                            
00004A3A 4E75                       		rts	
00004A3C                            ; End of function StopSFX
00004A3C                            
00004A3C                            
00004A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A3C                            
00004A3C                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00004A3C                            StopSpecialSFX:
00004A3C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00004A40 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004A42 6A00                       		bpl.s	@fadedfm		; Branch if not
00004A44 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00004A48 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00004A4C 6600                       		bne.s	@fadedfm		; Branch if not
00004A4E 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00004A52 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00004A56 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00004A5A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00004A5E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004A60 6A00                       		bpl.s	@fadedfm		; Branch if not
00004A62 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00004A66 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00004A6A 4EBA 0000                  		jsr	SetVoice(pc)
00004A6E                            ; loc_724AE:
00004A6E                            @fadedfm:
00004A6E 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00004A72 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004A74 6A00                       		bpl.s	@fadedpsg		; Branch if not
00004A76 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00004A7A 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00004A7E 6600                       		bne.s	@fadedpsg		; Return if not
00004A80 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00004A84 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00004A88 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00004A8C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00004A90 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004A92 6A00                       		bpl.s	@fadedpsg		; Return if not
00004A94 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00004A9A 6600                       		bne.s	@fadedpsg			; Return if not
00004A9C 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00004AA4                            ; locret_724E4:
00004AA4                            @fadedpsg:
00004AA4 4E75                       		rts	
00004AA6                            ; End of function StopSpecialSFX
00004AA6                            
00004AA6                            ; ===========================================================================
00004AA6                            ; ---------------------------------------------------------------------------
00004AA6                            ; Fade out music
00004AA6                            ; ---------------------------------------------------------------------------
00004AA6                            ; Sound_E0:
00004AA6                            FadeOutMusic:
00004AA6 4EBA FEF8                  		jsr	StopSFX(pc)
00004AAA 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00004AAE 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00004AB4 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00004ABA 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00004ABE 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00004AC2 4E75                       		rts	
00004AC4                            
00004AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004AC4                            
00004AC4                            ; sub_72504:
00004AC4                            DoFadeOut:
00004AC4 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00004AC8 6700                       		beq.s	@continuefade		; Branch if yes
00004ACA 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00004ACE 4E75                       		rts	
00004AD0                            ; ===========================================================================
00004AD0                            ; loc_72510:
00004AD0                            @continuefade:
00004AD0 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00004AD4 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00004AD8 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00004ADE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00004AE2 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00004AE4                            ; loc_72524:
00004AE4                            @fmloop:
00004AE4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004AE6 6A00                       		bpl.s	@nextfm			; Branch if not
00004AE8 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00004AEC 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00004AEE 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00004AF2 6000                       		bra.s	@nextfm
00004AF4                            ; ===========================================================================
00004AF4                            ; loc_72534:
00004AF4                            @sendfmtl:
00004AF4 4EBA 0000                  		jsr	SendVoiceTL(pc)
00004AF8                            ; loc_72538:
00004AF8                            @nextfm:
00004AF8 DAFC 0030                  		adda.w	#TrackSz,a5
00004AFC 51CF FFE6                  		dbf	d7,@fmloop
00004B00                            
00004B00 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00004B02                            ; loc_72542:
00004B02                            @psgloop:
00004B02 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004B04 6A00                       		bpl.s	@nextpsg		; branch if not
00004B06 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00004B0A 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00004B10 6500                       		blo.s	@sendpsgvol		; Branch if not
00004B12 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00004B16 6000                       		bra.s	@nextpsg
00004B18                            ; ===========================================================================
00004B18                            ; loc_72558:
00004B18                            @sendpsgvol:
00004B18 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00004B1C 4EBA 0000                  		jsr	SetPSGVolume(pc)
00004B20                            ; loc_72560:
00004B20                            @nextpsg:
00004B20 DAFC 0030                  		adda.w	#TrackSz,a5
00004B24 51CF FFDC                  		dbf	d7,@psgloop
00004B28                            
00004B28 4E75                       		rts	
00004B2A                            ; End of function DoFadeOut
00004B2A                            
00004B2A                            
00004B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B2A                            
00004B2A                            ; sub_7256A:
00004B2A                            FMSilenceAll:
00004B2A 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00004B2C 7028                       		moveq	#$28,d0		; FM key on/off register
00004B2E                            ; loc_7256E:
00004B2E                            @noteoffloop:
00004B2E 1203                       		move.b	d3,d1
00004B30 4EBA 0000                  		jsr	WriteFMI(pc)
00004B34 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00004B36 4EBA 0000                  		jsr	WriteFMI(pc)
00004B3A 51CB FFF2                  		dbf	d3,@noteoffloop
00004B3E                            
00004B3E 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00004B40 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00004B42 7802                       		moveq	#2,d4		; ... for all 3 channels...
00004B44                            ; loc_72584:
00004B44                            @channelloop:
00004B44 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00004B46                            ; loc_72586:
00004B46                            @channeltlloop:
00004B46 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00004B4A 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00004B4E 5840                       		addq.w	#4,d0		; Next TL operator
00004B50 51CB FFF4                  		dbf	d3,@channeltlloop
00004B54                            
00004B54 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00004B58 51CC FFEA                  		dbf	d4,@channelloop
00004B5C                            
00004B5C 4E75                       		rts	
00004B5E                            ; End of function FMSilenceAll
00004B5E                            
00004B5E                            ; ===========================================================================
00004B5E                            ; ---------------------------------------------------------------------------
00004B5E                            ; Stop music
00004B5E                            ; ---------------------------------------------------------------------------
00004B5E                            ; Sound_E4: StopSoundAndMusic:
00004B5E                            StopAllSound:
00004B5E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00004B60 123C 0080                  		move.b	#$80,d1		; Enable DAC
00004B64 4EBA 0000                  		jsr	WriteFMI(pc)
00004B68 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00004B6A 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00004B6C 4EBA 0000                  		jsr	WriteFMI(pc)
00004B70 204E                       		movea.l	a6,a0
00004B72                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00004B72                            		; Remove the '-$10' to fix this.
00004B72 303C 00E3                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables-$10)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00004B76                            ; loc_725B6:
00004B76                            @clearramloop:
00004B76 4298                       		clr.l	(a0)+
00004B78 51C8 FFFC                  		dbf	d0,@clearramloop
00004B7C                            
00004B7C 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00004B82 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00004B86 6000 0000                  		bra.w	PSGSilenceAll
00004B8A                            
00004B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B8A                            
00004B8A                            ; sub_725CA:
00004B8A                            InitMusicPlayback:
00004B8A 204E                       		movea.l	a6,a0
00004B8C                            		; Save several values
00004B8C 122E 0000                  		move.b	v_sndprio(a6),d1
00004B90 142E 0027                  		move.b	f_1up_playing(a6),d2
00004B94 162E 002A                  		move.b	f_speedup(a6),d3
00004B98 182E 0026                  		move.b	v_fadein_counter(a6),d4
00004B9C                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00004B9C 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00004BA0 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00004BA4                            ; loc_725E4:
00004BA4                            @clearramloop:
00004BA4 4298                       		clr.l	(a0)+
00004BA6 51C8 FFFC                  		dbf	d0,@clearramloop
00004BAA                            
00004BAA                            		; Restore the values saved above
00004BAA 1D41 0000                  		move.b	d1,v_sndprio(a6)
00004BAE 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00004BB2 1D43 002A                  		move.b	d3,f_speedup(a6)
00004BB6 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00004BBA 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00004BBE 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00004BC4                            		; DANGER! This silences ALL channels, even the ones being used
00004BC4                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00004BC4                            		; doesn't affect SFX channels, either.
00004BC4                            		; This should be replaced with an 'rts'.
00004BC4 4EBA FF64                  		jsr	FMSilenceAll(pc)
00004BC8 6000 0000                  		bra.w	PSGSilenceAll
00004BCC                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00004BCC                            		; don't do a very good job of setting up the music tracks.
00004BCC                            		; Tracks that aren't defined in a music file's header don't have
00004BCC                            		; their channels defined, meaning @sendfmnoteoff won't silence
00004BCC                            		; hardware properly. In combination with removing the above
00004BCC                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00004BCC                            		; notes.
00004BCC                            		; To fix this, I suggest using this code, instead of an 'rts':
00004BCC                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00004BCC                            		;lea	FMDACInitBytes(pc),a2
00004BCC                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00004BCC                            		;bsr.s	@writeloop
00004BCC                            		;lea	PSGInitBytes(pc),a2
00004BCC                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00004BCC                            
00004BCC                            ;@writeloop:
00004BCC                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00004BCC                            		;lea	TrackSz(a1),a1		; Next track
00004BCC                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00004BCC                            
00004BCC                            		;rts
00004BCC                            	
00004BCC                            ; End of function InitMusicPlayback
00004BCC                            
00004BCC                            
00004BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BCC                            
00004BCC                            ; sub_7260C:
00004BCC                            TempoWait:
00004BCC 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00004BD2 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00004BD6 7030                       		moveq	#TrackSz,d0
00004BD8 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00004BDA                            ; loc_7261A:
00004BDA                            @tempoloop:
00004BDA 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00004BDC D0C0                       		adda.w	d0,a0	; Advance to next track
00004BDE 51C9 FFFA                  		dbf	d1,@tempoloop
00004BE2                            
00004BE2 4E75                       		rts	
00004BE4                            ; End of function TempoWait
00004BE4                            
00004BE4                            ; ===========================================================================
00004BE4                            ; ---------------------------------------------------------------------------
00004BE4                            ; Speed	up music
00004BE4                            ; ---------------------------------------------------------------------------
00004BE4                            ; Sound_E2:
00004BE4                            SpeedUpMusic:
00004BE4 4A2E 0027                  		tst.b	f_1up_playing(a6)
00004BE8 6600                       		bne.s	@speedup_1up
00004BEA 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00004BF0 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00004BF6 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00004BFC 4E75                       		rts	
00004BFE                            ; ===========================================================================
00004BFE                            ; loc_7263E:
00004BFE                            @speedup_1up:
00004BFE 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00004C04 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00004C0A 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00004C10 4E75                       		rts	
00004C12                            ; ===========================================================================
00004C12                            ; ---------------------------------------------------------------------------
00004C12                            ; Change music back to normal speed
00004C12                            ; ---------------------------------------------------------------------------
00004C12                            ; Sound_E3:
00004C12                            SlowDownMusic:
00004C12 4A2E 0027                  		tst.b	f_1up_playing(a6)
00004C16 6600                       		bne.s	@slowdown_1up
00004C18 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00004C1E 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00004C24 422E 002A                  		clr.b	f_speedup(a6)
00004C28 4E75                       		rts	
00004C2A                            ; ===========================================================================
00004C2A                            ; loc_7266A:
00004C2A                            @slowdown_1up:
00004C2A 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00004C30 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00004C36 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00004C3A 4E75                       		rts	
00004C3C                            
00004C3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C3C                            
00004C3C                            ; sub_7267C:
00004C3C                            DoFadeIn:
00004C3C 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00004C40 6700                       		beq.s	@continuefade		; Branch if yes
00004C42 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00004C46 4E75                       		rts	
00004C48                            ; ===========================================================================
00004C48                            ; loc_72688:
00004C48                            @continuefade:
00004C48 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00004C4C 6700                       		beq.s	@fadedone		; Branch if yes
00004C4E 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00004C52 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00004C58 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00004C5C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00004C5E                            ; loc_7269E:
00004C5E                            @fmloop:
00004C5E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004C60 6A00                       		bpl.s	@nextfm			; Branch if not
00004C62 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00004C66 4EBA 0000                  		jsr	SendVoiceTL(pc)
00004C6A                            ; loc_726AA:
00004C6A                            @nextfm:
00004C6A DAFC 0030                  		adda.w	#TrackSz,a5
00004C6E 51CF FFEE                  		dbf	d7,@fmloop
00004C72 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00004C74                            ; loc_726B4:
00004C74                            @psgloop:
00004C74 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00004C76 6A00                       		bpl.s	@nextpsg		; Branch if not
00004C78 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00004C7C 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00004C80 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00004C84 6500                       		blo.s	@sendpsgvol		; Branch if yes
00004C86 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00004C88                            ; loc_726C8:
00004C88                            @sendpsgvol:
00004C88 4EBA 0000                  		jsr	SetPSGVolume(pc)
00004C8C                            ; loc_726CC:
00004C8C                            @nextpsg:
00004C8C DAFC 0030                  		adda.w	#TrackSz,a5
00004C90 51CF FFE2                  		dbf	d7,@psgloop
00004C94 4E75                       		rts	
00004C96                            ; ===========================================================================
00004C96                            ; loc_726D6:
00004C96                            @fadedone:
00004C96 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00004C9C 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00004CA0 4E75                       		rts	
00004CA2                            ; End of function DoFadeIn
00004CA2                            
00004CA2                            ; ===========================================================================
00004CA2                            ; loc_726E2:
00004CA2                            FMNoteOn:
00004CA2 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00004CA6 6600                       		bne.s	@locret		; Return if so
00004CA8 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00004CAC 6600                       		bne.s	@locret		; Return if so
00004CAE 7028                       		moveq	#$28,d0		; Note on/off register
00004CB0 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00004CB4 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00004CB8 6000 0000                  		bra.w	WriteFMI
00004CBC                            ; ===========================================================================
00004CBC                            ; locret_726FC:
00004CBC                            @locret:
00004CBC 4E75                       		rts	
00004CBE                            
00004CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CBE                            
00004CBE                            ; sub_726FE:
00004CBE                            FMNoteOff:
00004CBE 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00004CC2 6600                       		bne.s	locret_72714	; Return if yes
00004CC4 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00004CC8 6600                       		bne.s	locret_72714	; Return if yes
00004CCA                            ; loc_7270A:
00004CCA                            SendFMNoteOff:
00004CCA 7028                       		moveq	#$28,d0		; Note on/off register
00004CCC 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00004CD0 6000 0000                  		bra.w	WriteFMI
00004CD4                            ; ===========================================================================
00004CD4                            
00004CD4                            locret_72714:
00004CD4 4E75                       		rts	
00004CD6                            ; End of function FMNoteOff
00004CD6                            
00004CD6                            ; ===========================================================================
00004CD6                            ; loc_72716:
00004CD6                            WriteFMIorIIMain:
00004CD6 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00004CDA 6600                       		bne.s	@locret		; Return if yes
00004CDC 6000 0000                  		bra.w	WriteFMIorII
00004CE0                            ; ===========================================================================
00004CE0                            ; locret_72720:
00004CE0                            @locret:
00004CE0 4E75                       		rts	
00004CE2                            
00004CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CE2                            
00004CE2                            ; sub_72722:
00004CE2                            WriteFMIorII:
00004CE2 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00004CE8 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00004CEA D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00004CEE                            ; End of function WriteFMIorII
00004CEE                            
00004CEE                            
00004CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CEE                            
00004CEE                            ; Strangely, despite this driver being SMPS 68k Type 1b,
00004CEE                            ; WriteFMI and WriteFMII are the Type 1a versions.
00004CEE                            ; In Sonic 1's prototype, they were the Type 1b versions.
00004CEE                            ; I wonder why they were changed?
00004CEE                            
00004CEE                            ; sub_7272E:
00004CEE                            WriteFMI:
00004CEE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00004CF4 0802 0007                  		btst	#7,d2		; Is FM busy?
00004CF8 66F4                       		bne.s	WriteFMI	; Loop if so
00004CFA 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00004D00 4E71                       		nop	
00004D02 4E71                       		nop	
00004D04 4E71                       		nop	
00004D06                            ; loc_72746:
00004D06                            @waitloop:
00004D06 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00004D0C 0802 0007                  		btst	#7,d2		; Is FM busy?
00004D10 66F4                       		bne.s	@waitloop	; Loop if so
00004D12                            
00004D12 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00004D18 4E75                       		rts	
00004D1A                            ; End of function WriteFMI
00004D1A                            
00004D1A                            ; ===========================================================================
00004D1A                            ; loc_7275A:
00004D1A                            WriteFMIIPart:
00004D1A 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00004D1E 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00004D22 D002                       		add.b	d2,d0			; Add in to destination register
00004D24                            
00004D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D24                            
00004D24                            ; sub_72764:
00004D24                            WriteFMII:
00004D24 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00004D2A 0802 0007                  		btst	#7,d2		; Is FM busy?
00004D2E 66F4                       		bne.s	WriteFMII	; Loop if so
00004D30 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00004D36 4E71                       		nop	
00004D38 4E71                       		nop	
00004D3A 4E71                       		nop	
00004D3C                            ; loc_7277C:
00004D3C                            @waitloop:
00004D3C 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00004D42 0802 0007                  		btst	#7,d2		; Is FM busy?
00004D46 66F4                       		bne.s	@waitloop	; Loop if so
00004D48                            
00004D48 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00004D4E 4E75                       		rts	
00004D50                            ; End of function WriteFMII
00004D50                            
00004D50                            ; ===========================================================================
00004D50                            ; ---------------------------------------------------------------------------
00004D50                            ; FM Note Values: b-0 to a#8
00004D50                            ;
00004D50                            ; Each row is an octave, starting with B and ending with A-sharp/B-flat.
00004D50                            ; Notably, this differs from the PSG frequency table, which starts with C and
00004D50                            ; ends with B. This is caused by 'FMSetFreq' subtracting $80 from the note
00004D50                            ; instead of $81, meaning that the first frequency in the table ironically
00004D50                            ; corresponds to the 'rest' note. The only way to use this frequency in a
00004D50                            ; real note is to transpose the channel to a lower semitone.
00004D50                            ;
00004D50                            ; Rather than use a complete lookup table, other SMPS drivers such as
00004D50                            ; Sonic 3's compute the octave, and only store a single octave's worth of
00004D50                            ; notes in the table.
00004D50                            ;
00004D50                            ; Invalid transposition values will cause this table to be overflowed,
00004D50                            ; resulting in garbage data being used as frequency values. In drivers that
00004D50                            ; compute the octave instead, invalid transposition values merely cause the
00004D50                            ; notes to wrap-around (the note below the lowest note will be the highest
00004D50                            ; note). It's important to keep this in mind when porting buggy songs.
00004D50                            ; ---------------------------------------------------------------------------
00004D50                            ; word_72790: FM_Notes:
00004D50                            FMFrequencies:
00004D50 025E 0284 02AB 02D3 02FE+  		dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00004D68 0A5E 0A84 0AAB 0AD3 0AFE+  		dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00004D80 125E 1284 12AB 12D3 12FE+  		dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00004D98 1A5E 1A84 1AAB 1AD3 1AFE+  		dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00004DB0 225E 2284 22AB 22D3 22FE+  		dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00004DC8 2A5E 2A84 2AAB 2AD3 2AFE+  		dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00004DE0 325E 3284 32AB 32D3 32FE+  		dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00004DF8 3A5E 3A84 3AAB 3AD3 3AFE+  		dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00004E10                            
00004E10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E10                            
00004E10                            ; sub_72850:
00004E10                            PSGUpdateTrack:
00004E10 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00004E14 6600                       		bne.s	@notegoing
00004E16 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00004E1A 4EBA 0000                  		jsr	PSGDoNext(pc)
00004E1E 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00004E22 6000 0000                  		bra.w	PSGDoVolFX
00004E26                            ; ===========================================================================
00004E26                            ; loc_72866:
00004E26                            @notegoing:
00004E26 4EBA F59E                  		jsr	NoteTimeoutUpdate(pc)
00004E2A 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00004E2E 4EBA F5BE                  		jsr	DoModulation(pc)
00004E32 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00004E36 4E75                       		rts
00004E38                            ; End of function PSGUpdateTrack
00004E38                            
00004E38                            
00004E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E38                            
00004E38                            ; sub_72878:
00004E38                            PSGDoNext:
00004E38 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00004E3C 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00004E40                            ; loc_72880:
00004E40                            @noteloop:
00004E40 7A00                       		moveq	#0,d5
00004E42 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00004E44 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00004E48 6500                       		blo.s	@gotnote	; Branch if not
00004E4A 4EBA 0000                  		jsr	CoordFlag(pc)
00004E4E 60F0                       		bra.s	@noteloop
00004E50                            ; ===========================================================================
00004E50                            ; loc_72890:
00004E50                            @gotnote:
00004E50 4A05                       		tst.b	d5		; Is it a note?
00004E52 6A00                       		bpl.s	@gotduration	; Branch if not
00004E54 4EBA 0000                  		jsr	PSGSetFreq(pc)
00004E58 1A1C                       		move.b	(a4)+,d5	; Get another byte
00004E5A 4A05                       		tst.b	d5		; Is it a duration?
00004E5C 6A00                       		bpl.s	@gotduration	; Branch if yes
00004E5E 534C                       		subq.w	#1,a4		; Put byte back
00004E60 6000 F526                  		bra.w	FinishTrackUpdate
00004E64                            ; ===========================================================================
00004E64                            ; loc_728A4:
00004E64                            @gotduration:
00004E64 4EBA F502                  		jsr	SetDuration(pc)
00004E68 6000 F51E                  		bra.w	FinishTrackUpdate
00004E6C                            ; End of function PSGDoNext
00004E6C                            
00004E6C                            
00004E6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E6C                            
00004E6C                            ; sub_728AC:
00004E6C                            PSGSetFreq:
00004E6C 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00004E70 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00004E72 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00004E76 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00004E7A E34D                       		lsl.w	#1,d5
00004E7C 41FA 0000                  		lea	PSGFrequencies(pc),a0
00004E80 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00004E86 6000 F500                  		bra.w	FinishTrackUpdate
00004E8A                            ; ===========================================================================
00004E8A                            ; loc_728CA:
00004E8A                            @restpsg:
00004E8A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00004E8E 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00004E94 4EBA F4F2                  		jsr	FinishTrackUpdate(pc)
00004E98 6000 0000                  		bra.w	PSGNoteOff
00004E9C                            ; End of function PSGSetFreq
00004E9C                            
00004E9C                            
00004E9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E9C                            
00004E9C                            ; sub_728DC:
00004E9C                            PSGDoNoteOn:
00004E9C 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00004EA0 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00004EA2                            ; End of function PSGDoNoteOn
00004EA2                            
00004EA2                            
00004EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EA2                            
00004EA2                            ; sub_728E2:
00004EA2                            PSGUpdateFreq:
00004EA2 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00004EA6 4880                       		ext.w	d0
00004EA8 DC40                       		add.w	d0,d6		; Add to frequency
00004EAA 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00004EAE 6600                       		bne.s	@locret		; Return if yes
00004EB0 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00004EB4 6600                       		bne.s	@locret		; Return if yes
00004EB6 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00004EBA 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00004EBE 6600                       		bne.s	@notnoise	; Branch if not
00004EC0 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00004EC4                            ; loc_72904:
00004EC4                            @notnoise:
00004EC4 3206                       		move.w	d6,d1
00004EC6 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00004ECA 8001                       		or.b	d1,d0		; Latch tone data to channel
00004ECC E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00004ECE 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00004ED2 13C0 00C0 0011             		move.b	d0,(psg_input).l
00004ED8 13C6 00C0 0011             		move.b	d6,(psg_input).l
00004EDE                            ; locret_7291E:
00004EDE                            @locret:
00004EDE 4E75                       		rts	
00004EE0                            ; End of function PSGUpdateFreq
00004EE0                            
00004EE0                            ; ===========================================================================
00004EE0                            ; loc_72920:
00004EE0                            PSGSetRest:
00004EE0 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00004EE4 4E75                       		rts	
00004EE6                            
00004EE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EE6                            
00004EE6                            ; sub_72926:
00004EE6                            PSGUpdateVolFX:
00004EE6 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00004EEA 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00004EEE                            ; loc_7292E:
00004EEE                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00004EEE 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00004EF2 7000                       		moveq	#0,d0
00004EF4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00004EF8 6700                       		beq.s	SetPSGVolume
00004EFA 2079 0000 4014             		movea.l	(Go_PSGIndex).l,a0
00004F00 5340                       		subq.w	#1,d0
00004F02 E548                       		lsl.w	#2,d0
00004F04 2070 0000                  		movea.l	(a0,d0.w),a0
00004F08 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00004F0C 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00004F10 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00004F14 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00004F18 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00004F1A 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00004F1E 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00004F20                            ; loc_72960:
00004F20                            @gotflutter:
00004F20 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00004F22 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00004F26 6500                       		blo.s	SetPSGVolume	; Branch if not
00004F28 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00004F2A                            ; End of function PSGUpdateVolFX
00004F2A                            
00004F2A                            
00004F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F2A                            
00004F2A                            ; sub_7296A:
00004F2A                            SetPSGVolume:
00004F2A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00004F2E 6600                       		bne.s	locret_7298A	; Return if so
00004F30 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00004F34 6600                       		bne.s	locret_7298A	; Return if so
00004F36 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00004F3A 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00004F3C                            ; loc_7297C:
00004F3C                            PSGSendVolume:
00004F3C 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00004F40 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00004F44 13C6 00C0 0011             		move.b	d6,(psg_input).l
00004F4A                            
00004F4A                            locret_7298A:
00004F4A 4E75                       		rts	
00004F4C                            ; ===========================================================================
00004F4C                            ; loc_7298C: PSGCheckNoteFill:
00004F4C                            PSGCheckNoteTimeout:
00004F4C 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00004F50 67EA                       		beq.s	PSGSendVolume			; Branch if not
00004F52 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00004F56 66E4                       		bne.s	PSGSendVolume			; Branch if not
00004F58 4E75                       		rts	
00004F5A                            ; End of function SetPSGVolume
00004F5A                            
00004F5A                            ; ===========================================================================
00004F5A                            ; loc_7299A: FlutterDone:
00004F5A                            VolEnvHold:
00004F5A 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00004F5E 4E75                       		rts	
00004F60                            
00004F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F60                            
00004F60                            ; sub_729A0:
00004F60                            PSGNoteOff:
00004F60 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00004F64 6600                       		bne.s	locret_729B4	; Return if so
00004F66                            ; loc_729A6:
00004F66                            SendPSGNoteOff:
00004F66 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00004F6A 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00004F6E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00004F74                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00004F74                            		; risk of music accidentally playing noise because it can't detect if
00004F74                            		; the PSG4/noise channel needs muting on track initialisation.
00004F74                            		; S&K's driver fixes it by doing this:
00004F74                            		;cmpi.b	#$DF,d0				; Are stopping PSG3?
00004F74                            		;bne.s	locret_729B4
00004F74                            		;move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00004F74                            
00004F74                            locret_729B4:
00004F74 4E75                       		rts	
00004F76                            ; End of function PSGNoteOff
00004F76                            
00004F76                            
00004F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F76                            
00004F76                            ; sub_729B6:
00004F76                            PSGSilenceAll:
00004F76 41F9 00C0 0011             		lea	(psg_input).l,a0
00004F7C 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00004F80 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00004F84 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00004F88 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00004F8C 4E75                       		rts	
00004F8E                            ; End of function PSGSilenceAll
00004F8E                            
00004F8E                            ; ===========================================================================
00004F8E                            ; ---------------------------------------------------------------------------
00004F8E                            ; PSG Note Values: c-1 to a-6
00004F8E                            ;
00004F8E                            ; Each row is an octave, starting with C and ending with B. Sonic 3's driver
00004F8E                            ; adds another octave at the start, as well as two more notes and the end to
00004F8E                            ; complete the last octave. Notably, a-6 is changed from 0 to $10. These
00004F8E                            ; changes need to be applied here in order for ports of songs from Sonic 3
00004F8E                            ; and later to sound correct.
00004F8E                            ;
00004F8E                            ; Here is what Sonic 3's version of this table looks like:
00004F8E                            ;	dc.w $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3F7, $3BE, $388
00004F8E                            ;	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
00004F8E                            ;	dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00004F8E                            ;	dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
00004F8E                            ;	dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00004F8E                            ;	dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
00004F8E                            ;	dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,  $10,    0,    0
00004F8E                            ; ---------------------------------------------------------------------------
00004F8E                            ; word_729CE:
00004F8E                            PSGFrequencies:
00004F8E 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
00004FA6 01AB 0193 017D 0167 0153+  		dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00004FBE 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
00004FD6 006B 0065 005F 005A 0055+  		dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00004FEE 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
00005006 001B 001A 0018 0017 0016+  		dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,    0
0000501A                            
0000501A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000501A                            
0000501A                            ; sub_72A5A:
0000501A                            CoordFlag:
0000501A 0445 00E0                  		subi.w	#$E0,d5
0000501E E54D                       		lsl.w	#2,d5
00005020 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00005024                            ; End of function CoordFlag
00005024                            
00005024                            ; ===========================================================================
00005024                            ; loc_72A64:
00005024                            coordflagLookup:
00005024 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00005028                            ; ===========================================================================
00005028 6000 0000                  		bra.w	cfDetune		; $E1
0000502C                            ; ===========================================================================
0000502C 6000 0000                  		bra.w	cfSetCommunication	; $E2
00005030                            ; ===========================================================================
00005030 6000 0000                  		bra.w	cfJumpReturn		; $E3
00005034                            ; ===========================================================================
00005034 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00005038                            ; ===========================================================================
00005038 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
0000503C                            ; ===========================================================================
0000503C 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00005040                            ; ===========================================================================
00005040 6000 0000                  		bra.w	cfHoldNote		; $E7
00005044                            ; ===========================================================================
00005044 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00005048                            ; ===========================================================================
00005048 6000 0000                  		bra.w	cfChangeTransposition	; $E9
0000504C                            ; ===========================================================================
0000504C 6000 0000                  		bra.w	cfSetTempo		; $EA
00005050                            ; ===========================================================================
00005050 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00005054                            ; ===========================================================================
00005054 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00005058                            ; ===========================================================================
00005058 6000 0000                  		bra.w	cfClearPush		; $ED
0000505C                            ; ===========================================================================
0000505C 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00005060                            ; ===========================================================================
00005060 6000 0000                  		bra.w	cfSetVoice		; $EF
00005064                            ; ===========================================================================
00005064 6000 0000                  		bra.w	cfModulation		; $F0
00005068                            ; ===========================================================================
00005068 6000 0000                  		bra.w	cfEnableModulation	; $F1
0000506C                            ; ===========================================================================
0000506C 6000 0000                  		bra.w	cfStopTrack		; $F2
00005070                            ; ===========================================================================
00005070 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00005074                            ; ===========================================================================
00005074 6000 0000                  		bra.w	cfDisableModulation	; $F4
00005078                            ; ===========================================================================
00005078 6000 0000                  		bra.w	cfSetPSGTone		; $F5
0000507C                            ; ===========================================================================
0000507C 6000 0000                  		bra.w	cfJumpTo		; $F6
00005080                            ; ===========================================================================
00005080 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00005084                            ; ===========================================================================
00005084 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00005088                            ; ===========================================================================
00005088 6000 0000                  		bra.w	cfOpF9			; $F9
0000508C                            ; ===========================================================================
0000508C                            ; loc_72ACC:
0000508C                            cfPanningAMSFMS:
0000508C 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
0000508E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00005092 6B00                       		bmi.s	locret_72AEA		; Return if yes
00005094 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00005098 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0000509C 8200                       		or.b	d0,d1			; Mask in new value
0000509E 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
000050A2 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000050A6 6000 FC2E                  		bra.w	WriteFMIorIIMain
000050AA                            ; ===========================================================================
000050AA                            
000050AA                            locret_72AEA:
000050AA 4E75                       		rts	
000050AC                            ; ===========================================================================
000050AC                            ; loc_72AEC: cfAlterNotes:
000050AC                            cfDetune:
000050AC 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
000050B0 4E75                       		rts	
000050B2                            ; ===========================================================================
000050B2                            ; loc_72AF2: cfUnknown1:
000050B2                            cfSetCommunication:
000050B2 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
000050B6 4E75                       		rts	
000050B8                            ; ===========================================================================
000050B8                            ; loc_72AF8:
000050B8                            cfJumpReturn:
000050B8 7000                       		moveq	#0,d0
000050BA 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
000050BE 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
000050C2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
000050CA 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
000050CC 5800                       		addq.b	#4,d0			; Actually 'pop' value
000050CE 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
000050D2 4E75                       		rts	
000050D4                            ; ===========================================================================
000050D4                            ; loc_72B14:
000050D4                            cfFadeInToPrevious:
000050D4 204E                       		movea.l	a6,a0
000050D6 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000050DA 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000050DE                            ; loc_72B1E:
000050DE                            @restoreramloop:
000050DE 20D9                       		move.l	(a1)+,(a0)+
000050E0 51C8 FFFC                  		dbf	d0,@restoreramloop
000050E4                            
000050E4 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000050EA 264D                       		movea.l	a5,a3
000050EC 1C3C 0028                  		move.b	#$28,d6
000050F0 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000050F4 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000050F6 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000050FA                            ; loc_72B3A:
000050FA                            @fmloop:
000050FA 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000050FE 6700                       		beq.s	@nextfm		; Branch if not
00005100 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00005104 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00005108 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0000510C 6600                       		bne.s	@nextfm		; Branch if yes
0000510E 7000                       		moveq	#0,d0
00005110 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00005114 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00005118 4EBA 0000                  		jsr	SetVoice(pc)
0000511C                            ; loc_72B5C:
0000511C                            @nextfm:
0000511C DAFC 0030                  		adda.w	#TrackSz,a5
00005120 51CF FFD8                  		dbf	d7,@fmloop
00005124                            
00005124 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00005126                            ; loc_72B66:
00005126                            @psgloop:
00005126 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0000512A 6700                       		beq.s	@nextpsg	; Branch if not
0000512C 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00005130 4EBA FE2E                  		jsr	PSGNoteOff(pc)
00005134 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00005138                            ; loc_72B78:
00005138                            @nextpsg:
00005138 DAFC 0030                  		adda.w	#TrackSz,a5
0000513C 51CF FFE8                  		dbf	d7,@psgloop
00005140                            		
00005140 2A4B                       		movea.l	a3,a5
00005142 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00005148 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
0000514E 422E 0027                  		clr.b	f_1up_playing(a6)
00005152 33FC 0000 00A1 1100        		startZ80
0000515A 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
0000515C 4E75                       		rts	
0000515E                            ; ===========================================================================
0000515E                            ; loc_72B9E:
0000515E                            cfSetTempoDivider:
0000515E 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00005162 4E75                       		rts	
00005164                            ; ===========================================================================
00005164                            ; loc_72BA4: cfSetVolume:
00005164                            cfChangeFMVolume:
00005164 101C                       		move.b	(a4)+,d0		; Get parameter
00005166 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
0000516A 6000 0000                  		bra.w	SendVoiceTL
0000516E                            ; ===========================================================================
0000516E                            ; loc_72BAE: cfPreventAttack:
0000516E                            cfHoldNote:
0000516E 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00005172 4E75                       		rts	
00005174                            ; ===========================================================================
00005174                            ; loc_72BB4: cfNoteFill
00005174                            cfNoteTimeout:
00005174 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00005178 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
0000517C 4E75                       		rts	
0000517E                            ; ===========================================================================
0000517E                            ; loc_72BBE: cfAddKey:
0000517E                            cfChangeTransposition:
0000517E 101C                       		move.b	(a4)+,d0		; Get parameter
00005180 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            ; loc_72BC6:
00005186                            cfSetTempo:
00005186 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
0000518A 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
0000518E 4E75                       		rts	
00005190                            ; ===========================================================================
00005190                            ; loc_72BD0: cfSetTempoMod:
00005190                            cfSetTempoDividerAll:
00005190 41EE 0040                  		lea	v_music_track_ram(a6),a0
00005194 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00005196 7230                       		moveq	#TrackSz,d1
00005198 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
0000519A                            ; loc_72BDA:
0000519A                            @trackloop:
0000519A 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
0000519E D0C1                       		adda.w	d1,a0
000051A0 51CA FFF8                  		dbf	d2,@trackloop
000051A4                            
000051A4 4E75                       		rts	
000051A6                            ; ===========================================================================
000051A6                            ; loc_72BE6: cfChangeVolume:
000051A6                            cfChangePSGVolume:
000051A6 101C                       		move.b	(a4)+,d0		; Get volume change
000051A8 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
000051AC 4E75                       		rts	
000051AE                            ; ===========================================================================
000051AE                            ; loc_72BEE:
000051AE                            cfClearPush:
000051AE 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
000051B2 4E75                       		rts	
000051B4                            ; ===========================================================================
000051B4                            ; loc_72BF4:
000051B4                            cfStopSpecialFM4:
000051B4 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000051B8 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
000051BC 4EBA FB00                  		jsr	FMNoteOff(pc)
000051C0 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
000051C4 6B00                       		bmi.s	@locexit					; Branch if yes
000051C6 264D                       		movea.l	a5,a3
000051C8 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000051CC 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000051D0 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000051D4 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000051D8 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000051DC 4EBA 0000                  		jsr	SetVoice(pc)
000051E0 2A4B                       		movea.l	a3,a5
000051E2                            ; loc_72C22:
000051E2                            @locexit:
000051E2 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
000051E4 4E75                       		rts	
000051E6                            ; ===========================================================================
000051E6                            ; loc_72C26:
000051E6                            cfSetVoice:
000051E6 7000                       		moveq	#0,d0
000051E8 101C                       		move.b	(a4)+,d0		; Get new voice
000051EA 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
000051EE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
000051F2 6600 0000                  		bne.w	locret_72CAA		; Return if yes
000051F6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
000051FA 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
000051FE 6700                       		beq.s	SetVoice		; If yes, branch
00005200 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00005204 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00005208 6B00                       		bmi.s	SetVoice		; If yes, branch
0000520A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
0000520E                            
0000520E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000520E                            
0000520E                            ; sub_72C4E:
0000520E                            SetVoice:
0000520E 5340                       		subq.w	#1,d0
00005210 6B00                       		bmi.s	@havevoiceptr
00005212 323C 0019                  		move.w	#25,d1
00005216                            ; loc_72C56:
00005216                            @voicemultiply:
00005216 D2C1                       		adda.w	d1,a1
00005218 51C8 FFFC                  		dbf	d0,@voicemultiply
0000521C                            ; loc_72C5C:
0000521C                            @havevoiceptr:
0000521C 1219                       		move.b	(a1)+,d1		; feedback/algorithm
0000521E 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00005222 1801                       		move.b	d1,d4
00005224 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00005228 4EBA FAB8                  		jsr	WriteFMIorII(pc)
0000522C 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00005230 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00005232                            ; loc_72C72:
00005232                            @sendvoiceloop:
00005232 101A                       		move.b	(a2)+,d0
00005234 1219                       		move.b	(a1)+,d1
00005236 4EBA FAAA                  		jsr	WriteFMIorII(pc)
0000523A 51CB FFF6                  		dbf	d3,@sendvoiceloop
0000523E                            
0000523E 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00005240 0244 0007                  		andi.w	#7,d4			; Get algorithm
00005244 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00005248 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
0000524C                            ; loc_72C8C:
0000524C                            @sendtlloop:
0000524C 101A                       		move.b	(a2)+,d0
0000524E 1219                       		move.b	(a1)+,d1
00005250 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00005252 6400                       		bcc.s	@sendtl		; Branch if not
00005254 D203                       		add.b	d3,d1		; Include additional attenuation
00005256                            ; loc_72C96:
00005256                            @sendtl:
00005256 4EBA FA8A                  		jsr	WriteFMIorII(pc)
0000525A 51CD FFF0                  		dbf	d5,@sendtlloop
0000525E                            		
0000525E 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00005262 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00005266 4EBA FA7A                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
0000526A                            
0000526A                            locret_72CAA:
0000526A 4E75                       		rts	
0000526C                            ; End of function SetVoice
0000526C                            
0000526C                            ; ===========================================================================
0000526C                            ; byte_72CAC:
0000526C 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00005274                            
00005274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005274                            
00005274                            ; sub_72CB4:
00005274                            SendVoiceTL:
00005274 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00005278 6600                       		bne.s	@locret		; Return if so
0000527A 7000                       		moveq	#0,d0
0000527C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00005280 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00005284 4A2E 000E                  		tst.b	f_voice_selector(a6)
00005288 6700                       		beq.s	@gotvoiceptr
0000528A                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
0000528A                            		; of a6!
0000528A 226E 0020                  		movea.l	TrackVoicePtr(a6),a1
0000528E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00005292 6B00                       		bmi.s	@gotvoiceptr
00005294 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00005298                            ; loc_72CD8:
00005298                            @gotvoiceptr:
00005298 5340                       		subq.w	#1,d0
0000529A 6B00                       		bmi.s	@gotvoice
0000529C 323C 0019                  		move.w	#25,d1
000052A0                            ; loc_72CE0:
000052A0                            @voicemultiply:
000052A0 D2C1                       		adda.w	d1,a1
000052A2 51C8 FFFC                  		dbf	d0,@voicemultiply
000052A6                            ; loc_72CE6:
000052A6                            @gotvoice:
000052A6 D2FC 0015                  		adda.w	#21,a1				; Want TL
000052AA 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
000052AE 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
000052B2 0240 0007                  		andi.w	#7,d0				; Want only algorithm
000052B6 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
000052BA 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
000052BE 6B00                       		bmi.s	@locret				; If negative, stop
000052C0 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
000052C2                            ; loc_72D02:
000052C2                            @sendtlloop:
000052C2 101A                       		move.b	(a2)+,d0
000052C4 1219                       		move.b	(a1)+,d1
000052C6 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000052C8 6400                       		bcc.s	@senttl		; Branch if not
000052CA D203                       		add.b	d3,d1		; Include additional attenuation
000052CC 6500                       		bcs.s	@senttl		; Branch on overflow
000052CE 4EBA FA12                  		jsr	WriteFMIorII(pc)
000052D2                            ; loc_72D12:
000052D2                            @senttl:
000052D2 51CD FFEE                  		dbf	d5,@sendtlloop
000052D6                            ; locret_72D16:
000052D6                            @locret:
000052D6 4E75                       		rts	
000052D8                            ; End of function SendVoiceTL
000052D8                            
000052D8                            ; ===========================================================================
000052D8                            ; byte_72D18:
000052D8                            FMInstrumentOperatorTable:
000052D8 30                         		dc.b  $30		; Detune/multiple operator 1
000052D9 38                         		dc.b  $38		; Detune/multiple operator 3
000052DA 34                         		dc.b  $34		; Detune/multiple operator 2
000052DB 3C                         		dc.b  $3C		; Detune/multiple operator 4
000052DC 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
000052DD 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
000052DE 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
000052DF 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
000052E0 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
000052E1 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
000052E2 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
000052E3 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
000052E4 70                         		dc.b  $70		; Secondary decay rate operator 1
000052E5 78                         		dc.b  $78		; Secondary decay rate operator 3
000052E6 74                         		dc.b  $74		; Secondary decay rate operator 2
000052E7 7C                         		dc.b  $7C		; Secondary decay rate operator 4
000052E8 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
000052E9 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
000052EA 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
000052EB 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
000052EC                            FMInstrumentOperatorTable_End
000052EC                            ; byte_72D2C:
000052EC                            FMInstrumentTLTable:
000052EC 40                         		dc.b  $40		; Total level operator 1
000052ED 48                         		dc.b  $48		; Total level operator 3
000052EE 44                         		dc.b  $44		; Total level operator 2
000052EF 4C                         		dc.b  $4C		; Total level operator 4
000052F0                            FMInstrumentTLTable_End
000052F0                            ; ===========================================================================
000052F0                            ; loc_72D30:
000052F0                            cfModulation:
000052F0 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
000052F4 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
000052F8 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
000052FC 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00005300 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00005304 101C                       		move.b	(a4)+,d0			; Modulation steps...
00005306 E208                       		lsr.b	#1,d0				; ... divided by 2...
00005308 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
0000530C 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00005310 4E75                       		rts	
00005312                            ; ===========================================================================
00005312                            ; loc_72D52:
00005312                            cfEnableModulation:
00005312 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00005316 4E75                       		rts	
00005318                            ; ===========================================================================
00005318                            ; loc_72D58:
00005318                            cfStopTrack:
00005318 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0000531C 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00005320 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00005324 6B00                       		bmi.s	@stoppsg		; Branch if yes
00005326 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
0000532A 6B00 0000                  		bmi.w	@locexit		; Exit if yes
0000532E 4EBA F98E                  		jsr	FMNoteOff(pc)
00005332 6000                       		bra.s	@stoppedchannel
00005334                            ; ===========================================================================
00005334                            ; loc_72D74:
00005334                            @stoppsg:
00005334 4EBA FC2A                  		jsr	PSGNoteOff(pc)
00005338                            ; loc_72D78:
00005338                            @stoppedchannel:
00005338 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
0000533C 6A00 0000                  		bpl.w	@locexit		; Exit if not
00005340 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
00005344 7000                       		moveq	#0,d0
00005346 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
0000534A 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
0000534C 41FA F53E                  		lea	SFX_BGMChannelRAM(pc),a0
00005350 264D                       		movea.l	a5,a3
00005352 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00005356 6600                       		bne.s	@getpointer		; Branch if not
00005358 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0000535C 6A00                       		bpl.s	@getpointer		; Branch if not
0000535E 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00005362 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00005366 6000                       		bra.s	@gotpointer
00005368                            ; ===========================================================================
00005368                            ; loc_72DA8:
00005368                            @getpointer:
00005368 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
0000536A E508                       		lsl.b	#2,d0
0000536C 2A70 0000                  		movea.l	(a0,d0.w),a5
00005370 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00005372 6A00                       		bpl.s	@novoiceupd		; Branch if not
00005374 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00005378                            ; loc_72DB8:
00005378                            @gotpointer:
00005378 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
0000537C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00005380 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00005384 4EBA FE88                  		jsr	SetVoice(pc)
00005388                            ; loc_72DC8:
00005388                            @novoiceupd:
00005388 2A4B                       		movea.l	a3,a5
0000538A 6000                       		bra.s	@locexit
0000538C                            ; ===========================================================================
0000538C                            ; loc_72DCC:
0000538C                            @getpsgptr:
0000538C 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00005390 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00005392 6A00                       		bpl.s	@getchannelptr	; Branch if not
00005394 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00005398 6700                       		beq.s	@gotchannelptr	; Branch if yes
0000539A 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
0000539E 6700                       		beq.s	@gotchannelptr	; Branch if yes
000053A0                            ; loc_72DE0:
000053A0                            @getchannelptr:
000053A0 41FA F4EA                  		lea	SFX_BGMChannelRAM(pc),a0
000053A4 E608                       		lsr.b	#3,d0
000053A6 2070 0000                  		movea.l	(a0,d0.w),a0
000053AA                            ; loc_72DEA:
000053AA                            @gotchannelptr:
000053AA 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
000053AE 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000053B2 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
000053B8 6600                       		bne.s	@locexit			; Branch if not
000053BA 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
000053C2                            ; loc_72E02:
000053C2                            @locexit:
000053C2 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
000053C4 4E75                       		rts	
000053C6                            ; ===========================================================================
000053C6                            ; loc_72E06:
000053C6                            cfSetPSGNoise:
000053C6 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
000053CC 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
000053D0 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
000053D4 6600                       		bne.s	@locret				; Return if yes
000053D6 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000053DE                            ; locret_72E1E:
000053DE                            @locret:
000053DE 4E75                       		rts	
000053E0                            ; ===========================================================================
000053E0                            ; loc_72E20:
000053E0                            cfDisableModulation:
000053E0 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000053E4 4E75                       		rts	
000053E6                            ; ===========================================================================
000053E6                            ; loc_72E26:
000053E6                            cfSetPSGTone:
000053E6 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000053EA 4E75                       		rts	
000053EC                            ; ===========================================================================
000053EC                            ; loc_72E2C:
000053EC                            cfJumpTo:
000053EC 101C                       		move.b	(a4)+,d0	; High byte of offset
000053EE E148                       		lsl.w	#8,d0		; Shift it into place
000053F0 101C                       		move.b	(a4)+,d0	; Low byte of offset
000053F2 D8C0                       		adda.w	d0,a4		; Add to current position
000053F4 534C                       		subq.w	#1,a4		; Put back one byte
000053F6 4E75                       		rts	
000053F8                            ; ===========================================================================
000053F8                            ; loc_72E38:
000053F8                            cfRepeatAtPos:
000053F8 7000                       		moveq	#0,d0
000053FA 101C                       		move.b	(a4)+,d0			; Loop index
000053FC 121C                       		move.b	(a4)+,d1			; Repeat count
000053FE 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00005402 6600                       		bne.s	@loopexists			; Branch if yes
00005404 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00005408                            ; loc_72E48:
00005408                            @loopexists:
00005408 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
0000540C 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
0000540E 544C                       		addq.w	#2,a4				; Skip target address
00005410 4E75                       		rts	
00005412                            ; ===========================================================================
00005412                            ; loc_72E52:
00005412                            cfJumpToGosub:
00005412 7000                       		moveq	#0,d0
00005414 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00005418 5900                       		subq.b	#4,d0				; Add space for another target
0000541A 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
0000541E 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00005422 60C8                       		bra.s	cfJumpTo
00005424                            ; ===========================================================================
00005424                            ; loc_72E64:
00005424                            cfOpF9:
00005424 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00005428 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0000542C 4EBA F8C0                  		jsr	WriteFMI(pc)
00005430 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00005434 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00005438 6000 F8B4                  		bra.w	WriteFMI
0000543C                            ; ===========================================================================
0000543C                            ; ---------------------------------------------------------------------------
0000543C                            ; DAC driver
0000543C                            ; ---------------------------------------------------------------------------
0000543C                            Kos_Z80:
0000543C                            		incbin	"sound\z80.bin"
00006B9C                            		even
00006B9C                            		
00006B9C                            	pusho
00006B9C                            	opt		l?,an+
00006B9C                            		include	"sound\tb.lib"
00006B9C                            ;=======================================================;
00006B9C                            ;           $$$TB.LIB  (Sound Table Assign Library)     ;
00006B9C                            ;                       ORG. MDTB11.LIB                 ;
00006B9C                            ;               'Sound-Source'                          ;
00006B9C                            ;                for Mega Drive (68K)                   ;
00006B9C                            ;                       Ver  1.1 / 1990.9.1             ;
00006B9C                            ;                                     By  H.Kubota      ;
00006B9C                            ;=======================================================;
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;            STANDARD VOLUME            ;
00006B9C                            ;=======================================;
00006B9C =00000010                  FV_DR           EQU     $10
00006B9C =00000010                  FV_ML           EQU     $10
00006B9C =00000010                  FV_BS           EQU     $10
00006B9C =00000010                  FV_BK1          EQU     $10
00006B9C =00000010                  FV_BK2          EQU     $10
00006B9C =00000010                  FV_BK3          EQU     $10
00006B9C =00000010                  FV_BK4          EQU     $10
00006B9C =00000008                  PV_ML           EQU     $08
00006B9C =00000008                  PV_BS           EQU     $08
00006B9C =00000008                  PV_BK           EQU     $08
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;                 DRUM                  ;
00006B9C                            ;=======================================;
00006B9C =00000081                  B               EQU     $81             ; bass drum
00006B9C =00000082                  S               EQU     $82             ; snare
00006B9C =00000083                  S2              EQU     $83             ; handclap
00006B9C =00000084                  O               EQU     $84             ; close hihat
00006B9C =00000085                  TT              EQU     $85             ; tom
00006B9C                            
00006B9C =00000088                  HT              EQU     $88             ; high tom 2
00006B9C =00000089                  HT2             EQU     $89             ; high tom
00006B9C =0000008A                  MT              EQU     $8A             ; middle tom
00006B9C =0000008B                  MT2             EQU     $8B             ; middle tom2
00006B9C =0000008C                  MT3             EQU     $8C             ; middle tom2
00006B9C =0000008D                  LT              EQU     $8D             ; low tom
00006B9C =0000008E                  LT2             EQU     $8E             ; low tom2
00006B9C =0000008F                  LT3             EQU     $8F             ; low tom2
00006B9C                            
00006B9C =00000090                  SNR2            EQU     $90             ; snare2
00006B9C =00000091                  SNR_B           EQU     $91             ; snare (scale back)
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;               PRIORITY                ;
00006B9C                            ;=======================================;
00006B9C =00000080                  PR81            EQU     $80
00006B9C =00000080                  PR82            EQU     $80
00006B9C =00000080                  PR83            EQU     $80
00006B9C =00000080                  PR84            EQU     $80
00006B9C =00000080                  PR85            EQU     $80
00006B9C =00000080                  PR86            EQU     $80
00006B9C =00000080                  PR87            EQU     $80
00006B9C =00000080                  PR88            EQU     $80
00006B9C =00000080                  PR89            EQU     $80
00006B9C =00000080                  PR8A            EQU     $80
00006B9C =00000080                  PR8B            EQU     $80
00006B9C =00000080                  PR8C            EQU     $80
00006B9C =00000080                  PR8D            EQU     $80
00006B9C =00000080                  PR8E            EQU     $80
00006B9C =00000080                  PR8F            EQU     $80
00006B9C                            
00006B9C =00000080                  PR90            EQU     $80
00006B9C =00000080                  PR91            EQU     $80
00006B9C =00000080                  PR92            EQU     $80
00006B9C =00000080                  PR93            EQU     $80
00006B9C =00000080                  PR94            EQU     $80
00006B9C =00000080                  PR95            EQU     $80
00006B9C =00000080                  PR96            EQU     $80
00006B9C =00000080                  PR97            EQU     $80
00006B9C =00000080                  PR98            EQU     $80
00006B9C =00000080                  PR99            EQU     $80
00006B9C =00000080                  PR9A            EQU     $80
00006B9C =00000080                  PR9B            EQU     $80
00006B9C =00000080                  PR9C            EQU     $80
00006B9C =00000080                  PR9D            EQU     $80
00006B9C =00000080                  PR9E            EQU     $80
00006B9C =00000080                  PR9F            EQU     $80
00006B9C                            
00006B9C                            ;---------------< S.E. >----------------;
00006B9C                            
00006B9C =00000010                  PRA0            EQU     $10
00006B9C =00000010                  PRA1            EQU     $10
00006B9C =0000007F                  PRA2            EQU     $7F
00006B9C =0000006F                  PRA3            EQU     $6F
00006B9C =0000007F                  PRA4            EQU     $7F
00006B9C =0000005F                  PRA5            EQU     $5F
00006B9C =0000007F                  PRA6            EQU     $7F
00006B9C =0000007F                  PRA7            EQU     $7F
00006B9C =0000007F                  PRA8            EQU     $7F
00006B9C =0000005F                  PRA9            EQU     $5F
00006B9C =0000004F                  PRAA            EQU     $4F
00006B9C =0000004F                  PRAB            EQU     $4F
00006B9C =0000007F                  PRAC            EQU     $7F
00006B9C =0000007F                  PRAD            EQU     $7F
00006B9C =00000070                  PRAE            EQU     $70
00006B9C =0000006F                  PRAF            EQU     $6F
00006B9C                            
00006B9C =0000007F                  PRB0            EQU     $7F
00006B9C =0000007F                  PRB1            EQU     $7F
00006B9C =0000007F                  PRB2            EQU     $7F
00006B9C =0000007F                  PRB3            EQU     $7F
00006B9C =0000007F                  PRB4            EQU     $7F
00006B9C =0000007F                  PRB5            EQU     $7F
00006B9C =0000007F                  PRB6            EQU     $7F
00006B9C =0000007F                  PRB7            EQU     $7F
00006B9C =0000007F                  PRB8            EQU     $7F
00006B9C =0000007F                  PRB9            EQU     $7F
00006B9C =0000007F                  PRBA            EQU     $7F
00006B9C =0000007F                  PRBB            EQU     $7F
00006B9C =0000007F                  PRBC            EQU     $7F
00006B9C =0000007F                  PRBD            EQU     $7F
00006B9C =0000007F                  PRBE            EQU     $7F
00006B9C =0000007F                  PRBF            EQU     $7F
00006B9C                            
00006B9C =0000007F                  PRC0            EQU     $7F
00006B9C =0000007F                  PRC1            EQU     $7F
00006B9C =0000007F                  PRC2            EQU     $7F
00006B9C =0000007F                  PRC3            EQU     $7F
00006B9C =0000007F                  PRC4            EQU     $7F
00006B9C =0000007F                  PRC5            EQU     $7F
00006B9C =0000007F                  PRC6            EQU     $7F
00006B9C =0000007F                  PRC7            EQU     $7F
00006B9C =0000007F                  PRC8            EQU     $7F
00006B9C =0000007F                  PRC9            EQU     $7F
00006B9C =0000007F                  PRCA            EQU     $7F
00006B9C =0000007F                  PRCB            EQU     $7F
00006B9C =0000007F                  PRCC            EQU     $7F
00006B9C =0000007F                  PRCD            EQU     $7F
00006B9C =0000007F                  PRCE            EQU     $7F
00006B9C =0000007F                  PRCF            EQU     $7F
00006B9C                            
00006B9C =00000080                  PRD0            EQU     $80
00006B9C =00000080                  PRD1            EQU     $80
00006B9C =00000080                  PRD2            EQU     $80
00006B9C =00000080                  PRD3            EQU     $80
00006B9C =00000080                  PRD4            EQU     $80
00006B9C =00000080                  PRD5            EQU     $80
00006B9C =00000080                  PRD6            EQU     $80
00006B9C =00000080                  PRD7            EQU     $80
00006B9C =00000080                  PRD8            EQU     $80
00006B9C =00000080                  PRD9            EQU     $80
00006B9C =00000080                  PRDA            EQU     $80
00006B9C =00000080                  PRDB            EQU     $80
00006B9C =00000080                  PRDC            EQU     $80
00006B9C =00000080                  PRDD            EQU     $80
00006B9C =00000080                  PRDE            EQU     $80
00006B9C =00000080                  PRDF            EQU     $80
00006B9C                            
00006B9C =00000080                  PRE0            EQU     $80
00006B9C =00000080                  PRE1            EQU     $80
00006B9C =00000080                  PRE2            EQU     $80
00006B9C =00000080                  PRE3            EQU     $80
00006B9C =00000080                  PRE4            EQU     $80
00006B9C =00000080                  PRE5            EQU     $80
00006B9C =00000080                  PRE6            EQU     $80
00006B9C =00000080                  PRE7            EQU     $80
00006B9C =00000080                  PRE8            EQU     $80
00006B9C =00000080                  PRE9            EQU     $80
00006B9C =00000080                  PREA            EQU     $80
00006B9C =00000080                  PREB            EQU     $80
00006B9C =00000080                  PREC            EQU     $80
00006B9C =00000080                  PRED            EQU     $80
00006B9C =00000080                  PREE            EQU     $80
00006B9C =00000080                  PREF            EQU     $80
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;                COMMAND                ;
00006B9C                            ;=======================================;
00006B9C                            
00006B9C                            
00006B9C =000000E0                  LRPAN           EQU     $E0             ; FM left/right set
00006B9C =000000E1                  FDT             EQU     $E1             ; FM frequency detune (don't s.e. mode)
00006B9C =000000E2                  SET_TFLG        EQU     $E2             ; timing flag set
00006B9C =000000E3                  CMRET           EQU     $E3             ; subroutin return
00006B9C                            ;	e4
00006B9C =000000E5                  CMBASE          EQU     $E5             ; tempo base set
00006B9C =000000E6                  CMVADD          EQU     $E6             ; FM (only) volume add
00006B9C =000000E7                  CMTAB           EQU     $E7             ; don't key off
00006B9C =000000E7                  TIE             EQU     CMTAB           ; tie (if length over L1+L1)(= CMTAB)
00006B9C =000000E7                  SRE             EQU     CMTAB           ; sre (= CMTAB)
00006B9C =000000E8                  CMGATE          EQU     $E8             ; gate time set
00006B9C =000000E9                  CMBIAS          EQU     $E9             ; bias set (transpose)
00006B9C                            ;	ea
00006B9C                            ;	eb
00006B9C =000000EC                  PVADD           EQU     $EC             ; PSG (only) volume add
00006B9C =000000ED                  CMTREND         EQU     $ED             ; total level,release off & end
00006B9C =000000EE                  CMEND           EQU     $EE             ; music table end
00006B9C =000000EF                  FEV             EQU     $EF             ; FM voice no. set
00006B9C =000000F0                  FVR             EQU     $F0             ; FM auto vibrate set
00006B9C =000000F1                  VRON            EQU     $F1             ; FVR on (before FVR parameter set)
00006B9C =000000F2                  SFEND			EQU		$F2
00006B9C =000000F3                  CMNOIS          EQU     $F3             ; PSG noise mode set
00006B9C =000000F4                  VROFF           EQU     $F4             ; FVR stop
00006B9C =000000F5                  EV              EQU     $F5             ; PSG envelope no. set
00006B9C =000000F6                  CMJUMP          EQU     $F6             ; table jump
00006B9C =000000F7                  CMREPT          EQU     $F7             ; repeat set
00006B9C =000000F8                  CMCALL          EQU     $F8             ; subroutin call
00006B9C                            ;	f9
00006B9C                            
00006B9C                            ;KEYSET          EQU     $EB             ; key no. set
00006B9C                            ;AUTOPAN         EQU     $E4             ; autopan set
00006B9C                            ;PFVADD          EQU     $E5             ; PSG & FM volume add
00006B9C =000000F0                  LFO             EQU     FVR             ; LFO set
00006B9C                            ;TEMPO_CHG       EQU     $EA             ; tempo change (delay counter add)
00006B9C                            ;PVADD           EQU     $EC             ; PSG (only) volume add
00006B9C                            ;REGSET          EQU     $ED             ; chip direct write (channel look)
00006B9C                            ;FMWRITE         EQU     $EE             ; chip direct write (channel not look)
00006B9C                            ;SNG_BASE        EQU     $FC             ; song base set (all channel base set)
00006B9C                            ;TVR             EQU     $FD             ; table FVR
00006B9C                            ;DT              EQU     $FE             ; FM s.e mode
00006B9C =000000FF                  EXCOM           EQU     $FF             ; extend command
00006B9C =00000000                  S_PSE           EQU     0               ; song pause (song only)
00006B9C =00000001                  SSG             EQU     1               ; SSG set
00006B9C                            
00006B9C                            ;-------------< PAN MODE >--------------;
00006B9C =00000080                  LSET            EQU     $80             ; LRPAN left set
00006B9C =00000040                  RSET            EQU     $40             ; LRPAN right set
00006B9C =000000C0                  LRSET           EQU     $C0             ; LRPAN left & right set
00006B9C                            
00006B9C                            ;------------< NOISE MODE >-------------;
00006B9C =000000E0                  NOIS0           EQU     $E0             ; PSG noise mode 0 set
00006B9C =000000E1                  NOIS1           EQU     $E1             ; PSG noise mode 1 set
00006B9C =000000E2                  NOIS2           EQU     $E2             ; PSG noise mode 2 set
00006B9C =000000E3                  NOIS3           EQU     $E3             ; PSG noise mode 3 set
00006B9C =000000E4                  NOIS4           EQU     $E4             ; PSG noise mode 4 set
00006B9C =000000E5                  NOIS5           EQU     $E5             ; PSG noise mode 5 set
00006B9C =000000E6                  NOIS6           EQU     $E6             ; PSG noise mode 6 set
00006B9C =000000E7                  NOIS7           EQU     $E7             ; PSG noise mode 7 set
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;                LENGTH                 ;
00006B9C                            ;=======================================;
00006B9C =00000001                  L32_3           SET     1               ; 1
00006B9C =00000002                  L16_3           SET     2               ; 2
00006B9C =00000003                  L16             SET     3               ; 3
00006B9C =00000004                  L8_3            SET     L16_3*2         ; 4
00006B9C =00000006                  L8              SET     L16*2           ; 6
00006B9C =00000008                  L4_3            SET     L8_3*2          ; 8
00006B9C =00000009                  LF8             SET     L16*3           ; 9
00006B9C =0000000C                  L4              SET     L8*2            ; 12
00006B9C =00000012                  LF4             SET     L8*3            ; 18
00006B9C =00000018                  L2              SET     L4*2            ; 24
00006B9C =00000024                  LF2             SET     L4*3            ; 36
00006B9C =00000030                  L1              SET     L2*2            ; 48
00006B9C                            
00006B9C =00000008                  L83             SET     8               ; 8
00006B9C =00000004                  L163            SET     4               ; 4
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;                SCALE                  ;
00006B9C                            ;=======================================;
00006B9C =00000080                  NL              EQU     $80
00006B9C =00000081                  CN0             EQU     $81
00006B9C =00000082                  CS0             EQU     $82
00006B9C =00000082                  DF0             EQU     $82
00006B9C =00000083                  DN0             EQU     $83
00006B9C =00000084                  DS0             EQU     $84
00006B9C =00000084                  EF0             EQU     $84
00006B9C =00000085                  EN0             EQU     $85
00006B9C =00000086                  ES0             EQU     $86
00006B9C =00000085                  FF0             EQU     $85
00006B9C =00000086                  FN0             EQU     $86
00006B9C =00000087                  FS0             EQU     $87
00006B9C =00000087                  GF0             EQU     $87
00006B9C =00000088                  GN0             EQU     $88
00006B9C =00000089                  GS0             EQU     $89
00006B9C =00000089                  AF0             EQU     $89
00006B9C =0000008A                  AN0             EQU     $8A
00006B9C =0000008B                  AS0             EQU     $8B
00006B9C =0000008B                  BF0             EQU     $8B
00006B9C =0000008C                  BN0             EQU     $8C
00006B9C =0000008D                  BS0             EQU     $8D
00006B9C =0000008C                  CF1             EQU     $8C
00006B9C =0000008D                  CN1             EQU     CN0+12          ; $80
00006B9C =0000008E                  CS1             EQU     CS0+12
00006B9C =0000008E                  DF1             EQU     DF0+12
00006B9C =0000008F                  DN1             EQU     DN0+12
00006B9C =00000090                  DS1             EQU     DS0+12
00006B9C =00000090                  EF1             EQU     EF0+12
00006B9C =00000091                  EN1             EQU     EN0+12          ; $91
00006B9C =00000092                  ES1             EQU     ES0+12
00006B9C =00000091                  FF1             EQU     FF0+12
00006B9C =00000092                  FN1             EQU     FN0+12
00006B9C =00000093                  FS1             EQU     FS0+12
00006B9C =00000093                  GF1             EQU     GF0+12
00006B9C =00000094                  GN1             EQU     GN0+12          ; $94
00006B9C =00000095                  GS1             EQU     GS0+12
00006B9C =00000095                  AF1             EQU     AF0+12
00006B9C =00000096                  AN1             EQU     AN0+12
00006B9C =00000097                  AS1             EQU     AS0+12
00006B9C =00000097                  BF1             EQU     BF0+12
00006B9C =00000098                  BN1             EQU     BN0+12
00006B9C =00000099                  BS1             EQU     BS0+12
00006B9C =00000098                  CF2             EQU     CF1+12
00006B9C =00000099                  CN2             EQU     CN1+12          ; $99
00006B9C =0000009A                  CS2             EQU     CS1+12
00006B9C =0000009A                  DF2             EQU     DF1+12
00006B9C =0000009B                  DN2             EQU     DN1+12
00006B9C =0000009C                  DS2             EQU     DS1+12
00006B9C =0000009C                  EF2             EQU     EF1+12
00006B9C =0000009D                  EN2             EQU     EN1+12          ; $9D
00006B9C =0000009E                  ES2             EQU     ES1+12
00006B9C =0000009D                  FF2             EQU     FF1+12
00006B9C =0000009E                  FN2             EQU     FN1+12
00006B9C =0000009F                  FS2             EQU     FS1+12
00006B9C =0000009F                  GF2             EQU     GF1+12
00006B9C =000000A0                  GN2             EQU     GN1+12          ; $A0
00006B9C =000000A1                  GS2             EQU     GS1+12
00006B9C =000000A1                  AF2             EQU     AF1+12
00006B9C =000000A2                  AN2             EQU     AN1+12
00006B9C =000000A3                  AS2             EQU     AS1+12
00006B9C =000000A3                  BF2             EQU     BF1+12
00006B9C =000000A4                  BN2             EQU     BN1+12
00006B9C =000000A5                  BS2             EQU     BS1+12
00006B9C                            
00006B9C =000000A4                  CF3             EQU     CF2+12
00006B9C =000000A5                  CN3             EQU     CN2+12          ; $A5
00006B9C =000000A6                  CS3             EQU     CS2+12
00006B9C =000000A6                  DF3             EQU     DF2+12
00006B9C =000000A7                  DN3             EQU     DN2+12
00006B9C =000000A8                  DS3             EQU     DS2+12
00006B9C =000000A8                  EF3             EQU     EF2+12
00006B9C =000000A9                  EN3             EQU     EN2+12          ; $A9
00006B9C =000000AA                  ES3             EQU     ES2+12
00006B9C =000000A9                  FF3             EQU     FF2+12
00006B9C =000000AA                  FN3             EQU     FN2+12
00006B9C =000000AB                  FS3             EQU     FS2+12
00006B9C =000000AB                  GF3             EQU     GF2+12
00006B9C =000000AC                  GN3             EQU     GN2+12          ; $AC
00006B9C =000000AD                  GS3             EQU     GS2+12
00006B9C =000000AD                  AF3             EQU     AF2+12
00006B9C =000000AE                  AN3             EQU     AN2+12
00006B9C =000000AF                  AS3             EQU     AS2+12
00006B9C =000000AF                  BF3             EQU     BF2+12
00006B9C =000000B0                  BN3             EQU     BN2+12
00006B9C =000000B1                  BS3             EQU     BS2+12
00006B9C                            
00006B9C =000000B0                  CF4             EQU     CF3+12
00006B9C =000000B1                  CN4             EQU     CN3+12          ; $B1
00006B9C =000000B2                  CS4             EQU     CS3+12
00006B9C =000000B2                  DF4             EQU     DF3+12
00006B9C =000000B3                  DN4             EQU     DN3+12
00006B9C =000000B4                  DS4             EQU     DS3+12
00006B9C =000000B4                  EF4             EQU     EF3+12
00006B9C =000000B5                  EN4             EQU     EN3+12          ; $B5
00006B9C =000000B6                  ES4             EQU     ES3+12
00006B9C =000000B5                  FF4             EQU     FF3+12
00006B9C =000000B6                  FN4             EQU     FN3+12
00006B9C =000000B7                  FS4             EQU     FS3+12
00006B9C =000000B7                  GF4             EQU     GF3+12
00006B9C =000000B8                  GN4             EQU     GN3+12          ; $B8
00006B9C =000000B9                  GS4             EQU     GS3+12
00006B9C =000000B9                  AF4             EQU     AF3+12
00006B9C =000000BA                  AN4             EQU     AN3+12
00006B9C =000000BB                  AS4             EQU     AS3+12
00006B9C =000000BB                  BF4             EQU     BF3+12
00006B9C =000000BC                  BN4             EQU     BN3+12
00006B9C =000000BD                  BS4             EQU     BS3+12
00006B9C                            
00006B9C =000000BC                  CF5             EQU     CF4+12
00006B9C =000000BD                  CN5             EQU     CN4+12          ; $BD
00006B9C =000000BE                  CS5             EQU     CS4+12
00006B9C =000000BE                  DF5             EQU     DF4+12
00006B9C =000000BF                  DN5             EQU     DN4+12
00006B9C =000000C0                  DS5             EQU     DS4+12
00006B9C =000000C0                  EF5             EQU     EF4+12
00006B9C =000000C1                  EN5             EQU     EN4+12          ; $C1
00006B9C =000000C2                  ES5             EQU     ES4+12
00006B9C =000000C1                  FF5             EQU     FF4+12
00006B9C =000000C2                  FN5             EQU     FN4+12
00006B9C =000000C3                  FS5             EQU     FS4+12
00006B9C =000000C3                  GF5             EQU     GF4+12
00006B9C =000000C4                  GN5             EQU     GN4+12          ; $C4
00006B9C =000000C5                  GS5             EQU     GS4+12
00006B9C =000000C5                  AF5             EQU     AF4+12
00006B9C =000000C6                  AN5             EQU     AN4+12
00006B9C =000000C7                  AS5             EQU     AS4+12
00006B9C =000000C7                  BF5             EQU     BF4+12
00006B9C =000000C8                  BN5             EQU     BN4+12
00006B9C =000000C9                  BS5             EQU     BS4+12
00006B9C                            
00006B9C =000000C8                  CF6             EQU     CF5+12
00006B9C =000000C9                  CN6             EQU     CN5+12
00006B9C =000000CA                  CS6             EQU     CS5+12
00006B9C =000000CA                  DF6             EQU     DF5+12
00006B9C =000000CB                  DN6             EQU     DN5+12
00006B9C =000000CC                  DS6             EQU     DS5+12
00006B9C =000000CC                  EF6             EQU     EF5+12
00006B9C =000000CD                  EN6             EQU     EN5+12
00006B9C =000000CE                  ES6             EQU     ES5+12
00006B9C =000000CD                  FF6             EQU     FF5+12
00006B9C =000000CE                  FN6             EQU     FN5+12
00006B9C =000000CF                  FS6             EQU     FS5+12
00006B9C =000000CF                  GF6             EQU     GF5+12
00006B9C =000000D0                  GN6             EQU     GN5+12
00006B9C =000000D1                  GS6             EQU     GS5+12
00006B9C =000000D1                  AF6             EQU     AF5+12
00006B9C =000000D2                  AN6             EQU     AN5+12
00006B9C =000000D3                  AS6             EQU     AS5+12
00006B9C =000000D3                  BF6             EQU     BF5+12
00006B9C =000000D4                  BN6             EQU     BN5+12
00006B9C =000000D5                  BS6             EQU     BS5+12
00006B9C                            
00006B9C =000000D4                  CF7             EQU     CF6+12
00006B9C =000000D5                  CN7             EQU     CN6+12
00006B9C =000000D6                  CS7             EQU     CS6+12
00006B9C =000000D6                  DF7             EQU     DF6+12
00006B9C =000000D7                  DN7             EQU     DN6+12
00006B9C =000000D8                  DS7             EQU     DS6+12
00006B9C =000000D8                  EF7             EQU     EF6+12
00006B9C =000000D9                  EN7             EQU     EN6+12
00006B9C =000000DA                  ES7             EQU     ES6+12
00006B9C =000000D9                  FF7             EQU     FF6+12
00006B9C =000000DA                  FN7             EQU     FN6+12
00006B9C =000000DB                  FS7             EQU     FS6+12
00006B9C =000000DB                  GF7             EQU     GF6+12
00006B9C =000000DC                  GN7             EQU     GN6+12
00006B9C =000000DD                  GS7             EQU     GS6+12
00006B9C =000000DD                  AF7             EQU     AF6+12
00006B9C =000000DE                  AN7             EQU     AN6+12
00006B9C =000000DF                  AS7             EQU     AS6+12
00006B9C =000000DF                  BF7             EQU     BF6+12
00006B9C =000000E0                  BN7             EQU     BN6+12
00006B9C =000000E1                  BS7             EQU     BS6+12
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;             END OF FILE               ;
00006B9C                            ;=======================================;
00006B9C                            
00006B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00006B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00006B9C                            		include	"sound\mcr.lib"
00006B9C                            ;=======================================================;
00006B9C                            ;			$$$MCR.LIB	(Sound Macro Library)			;
00006B9C                            ;						ORG. MDMCR11.LIB				;
00006B9C                            ;				'Sound-Source'							;
00006B9C                            ;				 for Mega Drive (68K)					;
00006B9C                            ;						Ver  1.1 / 1990.9.1				;
00006B9C                            ;									  By  H.Kubota		;
00006B9C                            ;=======================================================;
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;				  TDW					;
00006B9C                            ;=======================================;
00006B9C                            TDW		macro	x1,x2			;　相対アドレスの算出
00006B9C                            		dc.b	(((\x1-\x2)&$ff00)>>8)
00006B9C                            		dc.b	((\x1-\x2)&$ff)
00006B9C                            		endm
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;				  JDW					;
00006B9C                            ;=======================================;
00006B9C                            JDW		macro	addr
00006B9C                            		dc.b	(((\addr-*-1)&$ff00)>>8)
00006B9C                            		dc.b	((\addr-*)&$ff)
00006B9C                            		endm
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;		   Z80 BUS REQUEST ON			;
00006B9C                            ;=======================================;
00006B9C                            z80bus_on		macro
00006B9C                            		move.w	#$100,z80busreq
00006B9C                            		endm
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;		   Z80 BUS REQUEST ON			;
00006B9C                            ;=======================================;
00006B9C                            z80bus_off		macro
00006B9C                            		move.w	#$000,z80busreq
00006B9C                            		endm
00006B9C                            
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;				FM VOICE				;
00006B9C                            ;=======================================;
00006B9C                            ;		CNF		ALG,FBK
00006B9C                            ;		MD		M1,D1,M2,D2,M3,D3,M4,D4
00006B9C                            ;		TL		T1,T2,T3,T4
00006B9C                            ;		RSAR	X1,X2,X3,X4
00006B9C                            ;		D1R		X1,X2,X3,X4
00006B9C                            ;		D2R		X1,X2,X3,X4
00006B9C                            ;		RRL		R1,DL1,R2,DL2,R3,DL3,R4,DL4
00006B9C                            
00006B9C                            ;----------------< CNF >----------------;
00006B9C                            CNF		MACRO	ALG,FBK
00006B9C                            cnect	set		\ALG
00006B9C                            		DC.B	\ALG+\FBK*8
00006B9C                            		ENDM
00006B9C                            ;----------------< MD >-----------------;
00006B9C                            MD		MACRO	M1,D1,M2,D2,M3,D3,M4,D4
00006B9C                            		DC.B	\D1*10H+\M1,\D2*10H+\M2
00006B9C                            		DC.B	\D3*10H+\M3,\D4*10H+\M4
00006B9C                            		ENDM
00006B9C                            ;----------------< TL >-----------------;
00006B9C                            TL		MACRO	T1,T2,T3,T4
00006B9C                            		if		cnect=0
00006B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00006B9C                            		endif
00006B9C                            		if		cnect=1
00006B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00006B9C                            		endif
00006B9C                            		if		cnect=2
00006B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00006B9C                            		endif
00006B9C                            		if		cnect=3
00006B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00006B9C                            		endif
00006B9C                            		if		cnect=4
00006B9C                            		dc.b	\T1,\T2|80h,\T3,\T4|80h
00006B9C                            		endif
00006B9C                            		if		cnect=5
00006B9C                            		dc.b	\T1,\T2|80h,\T3|80h,\T4|80h
00006B9C                            		endif
00006B9C                            		if		cnect=6
00006B9C                            		dc.b	\T1,\T2|80h,\T3|80h,\T4|80h
00006B9C                            		endif
00006B9C                            		if		cnect=7
00006B9C                            		dc.b	\T1|80h,\T2|80h,\T3|80h,\T4|80h
00006B9C                            		endif
00006B9C                            		ENDM
00006B9C                            ;----------------< RSAR >---------------;
00006B9C                            RSAR	MACRO	K1,A1,K2,A2,K3,A3,K4,A4
00006B9C                            		DC.B	\K1*40H+\A1,\K2*40H+\A2,\K3*40H+\A3,\K4*40H+\A4
00006B9C                            		ENDM
00006B9C                            ;----------------< D1R >----------------;
00006B9C                            D1R		MACRO	X1,X2,X3,X4
00006B9C                            		DC.B	\X1,\X2,\X3,\X4
00006B9C                            		ENDM
00006B9C                            ;----------------< D2R >----------------;
00006B9C                            D2R		MACRO	X1,X2,X3,X4
00006B9C                            		DC.B	\X1,\X2,\X3,\X4
00006B9C                            		ENDM
00006B9C                            ;----------------< RRL >----------------;
00006B9C                            RRL		MACRO	R1,DL1,R2,DL2,R3,DL3,R4,DL4
00006B9C                            		DC.B	\R1+\DL1*10H,\R2+\DL2*10H
00006B9C                            		DC.B	\R3+\DL3*10H,\R4+\DL4*10H
00006B9C                            		ENDM
00006B9C                            
00006B9C                            ; ---------------------------------------------------------------------------------------------
00006B9C                            ; Macros for FM instruments
00006B9C                            ; Voices - Feedback
00006B9C                            smpsVcFeedback macro val
00006B9C                            vcFeedback set \val
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Algorithm
00006B9C                            smpsVcAlgorithm macro val
00006B9C                            vcAlgorithm set \val
00006B9C                            	endm
00006B9C                            
00006B9C                            smpsVcUnusedBits macro val
00006B9C                            vcUnusedBits set \val
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Detune
00006B9C                            smpsVcDetune macro op1,op2,op3,op4
00006B9C                            vcDT1 set \op1
00006B9C                            vcDT2 set \op2
00006B9C                            vcDT3 set \op3
00006B9C                            vcDT4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Coarse-Frequency
00006B9C                            smpsVcCoarseFreq macro op1,op2,op3,op4
00006B9C                            vcCF1 set \op1
00006B9C                            vcCF2 set \op2
00006B9C                            vcCF3 set \op3
00006B9C                            vcCF4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Rate Scale
00006B9C                            smpsVcRateScale macro op1,op2,op3,op4
00006B9C                            vcRS1 set \op1
00006B9C                            vcRS2 set \op2
00006B9C                            vcRS3 set \op3
00006B9C                            vcRS4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Attack Rate
00006B9C                            smpsVcAttackRate macro op1,op2,op3,op4
00006B9C                            vcAR1 set \op1
00006B9C                            vcAR2 set \op2
00006B9C                            vcAR3 set \op3
00006B9C                            vcAR4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Amplitude Modulation
00006B9C                            smpsVcAmpMod macro op1,op2,op3,op4
00006B9C                            vcAM1 set \op1
00006B9C                            vcAM2 set \op2
00006B9C                            vcAM3 set \op3
00006B9C                            vcAM4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - First Decay Rate
00006B9C                            smpsVcDecayRate1 macro op1,op2,op3,op4
00006B9C                            vcD1R1 set \op1
00006B9C                            vcD1R2 set \op2
00006B9C                            vcD1R3 set \op3
00006B9C                            vcD1R4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Second Decay Rate
00006B9C                            smpsVcDecayRate2 macro op1,op2,op3,op4
00006B9C                            vcD2R1 set \op1
00006B9C                            vcD2R2 set \op2
00006B9C                            vcD2R3 set \op3
00006B9C                            vcD2R4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Decay Level
00006B9C                            smpsVcDecayLevel macro op1,op2,op3,op4
00006B9C                            vcDL1 set \op1
00006B9C                            vcDL2 set \op2
00006B9C                            vcDL3 set \op3
00006B9C                            vcDL4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Release Rate
00006B9C                            smpsVcReleaseRate macro op1,op2,op3,op4
00006B9C                            vcRR1 set \op1
00006B9C                            vcRR2 set \op2
00006B9C                            vcRR3 set \op3
00006B9C                            vcRR4 set \op4
00006B9C                            	endm
00006B9C                            
00006B9C                            ; Voices - Total Level
00006B9C                            smpsVcTotalLevel macro op1,op2,op3,op4
00006B9C                            vcTL1 set \op1
00006B9C                            vcTL2 set \op2
00006B9C                            vcTL3 set \op3
00006B9C                            vcTL4 set \op4
00006B9C                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00006B9C                            ;   0     1     2     3     4     5     6     7
00006B9C                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00006B9C                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00006B9C                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00006B9C                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00006B9C                            vcTLMask1 set $80
00006B9C                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00006B9C                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00006B9C                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00006B9C                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00006B9C                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00006B9C                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00006B9C                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00006B9C                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00006B9C                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00006B9C                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00006B9C                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00006B9C                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00006B9C                            	endm
00006B9C                            
00006B9C                            
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			  END OF FILE				;
00006B9C                            ;=======================================;
00006B9C                            
00006B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00006B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00006B9C                            		include	"sound\eq.lib"
00006B9C                            ;=======================================================;
00006B9C                            ;			$$$EQ.LIB  (Sound Assign Library)			;
00006B9C                            ;						ORG. MDEQ11.LIB					;
00006B9C                            ;				'Sound-Source'							;
00006B9C                            ;				 for Mega Drive (68K)					;
00006B9C                            ;						Ver  1.1 / 1990.9.1				;
00006B9C                            ;									  By  H.Kubota		;
00006B9C                            ;=======================================================;
00006B9C                            ;=======================================;
00006B9C                            ;				 ON/OFF					;
00006B9C                            ;=======================================;
00006B9C =00000001                  on				EQU		1
00006B9C =00000001                  ON				EQU		1
00006B9C =00000000                  off				EQU		0
00006B9C =00000000                  OFF				EQU		0
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			  MACRO SWITCH				;
00006B9C                            ;=======================================;
00006B9C =00000000                  prg				EQU		off				; off=develop  on=for programer
00006B9C =00000000                  s14				EQU		off				; system14 mode
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;		   SOUND START ADDRESS			;
00006B9C                            ;=======================================;
00006B9C                            ;sound_top		EQU		$20000			; adrtb address (sound top address)
00006B9C                            ;se_top			EQU		$28000			; develop ver use
00006B9C                            ;control_top	EQU		$2e000			; control top address
00006B9C                            ;voice_top		EQU		$30000			; voice top address
00006B9C                            
00006B9C                            ; Modified by ctr to match position expected by ED11.
00006B9C =0000C000                  sound_top		EQU		$0c000			; adrtb address (sound top address)
00006B9C =00020000                  voice_top		EQU		$20000			; voice top address
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			 ADDRTB ASSIGN				;
00006B9C                            ;=======================================;
00006B9C =00000000                  hd_prtb			EQU		0				; 
00006B9C =00000001                  hd_backtb		EQU		1				; 
00006B9C =00000002                  hd_bgmtb		EQU		2				; 
00006B9C =00000003                  hd_setb			EQU		3				; 
00006B9C =00000004                  hd_tvrtb		EQU		4				; 
00006B9C =00000005                  hd_envetb		EQU		5				; 
00006B9C =00000007                  hd_sound		EQU		7				; fix 7 (sound editor use)
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			BACK S.E. USE NO.			;
00006B9C                            ;=======================================;
00006B9C =00000002                  back_se			EQU		2				; BACK S.E USING
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			   REQUEST NO.				;
00006B9C                            ;=======================================;
00006B9C =00000081                  songstrt		EQU		$81				; song start no.
00006B9C =0000008F                  songend			EQU		$8F				; song end no.
00006B9C =000000A0                  sestrt			EQU		$A0				; s.e start no.
00006B9C =000000AF                  seend			EQU		$AF				; s.e end no.
00006B9C =000000D0                  bkstrt			EQU		$D0				; back s.e start no.
00006B9C =000000D8                  vostrt			EQU		$D8				; voice start no.
00006B9C =000000E0                  utlst			EQU		$E0				; utility start no.
00006B9C =000000E2                  lstno			EQU		$E2				; last no.
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			FAID OUT COUNTER			;
00006B9C                            ;=======================================;
00006B9C =00000003                  fout_ct0		EQU		$03				; faid out counter 0
00006B9C =00000028                  fout_ct1		EQU		$28				; faid out counter 1(INTRUPPET SUU)
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			USE CHANNEL TOTAL			;
00006B9C                            ;=======================================;
00006B9C =00000006                  fm_no			EQU		6
00006B9C =00000001                  pcm_no			EQU		1
00006B9C =00000003                  psg_no			EQU		3
00006B9C =0000000A                  song_no			EQU		10
00006B9C =00000003                  fm_se_no		EQU		3
00006B9C =00000003                  psg_se_no		EQU		3
00006B9C =00000006                  se_no			EQU		fm_se_no+psg_se_no
00006B9C =00000012                  chian_no		EQU		fm_no+pcm_no+psg_no+se_no+2		; 2:back_se
00006B9C =00000019                  voice_vol		EQU		25				; FM voice table volm
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			Z80 SRAM (PCM)				;
00006B9C                            ;=======================================;
00006B9C =00A01FFF                  z80kyflag		EQU		$A01FFF			; z80 key flag
00006B9C =00A01FFD                  z80_flg			EQU		$A01FFD			; z80 opn using = 80h
00006B9C =00A01FF6                  z80use_flg		EQU		$A01FF6			; z80 using flag
00006B9C =00A00183                  z80tom_dl_str	EQU		$A00183			; mdDT.src tom delay address
00006B9C =00A00227                  z80snr_dl_str	EQU		$A00227			; mdDT.src snare delay address
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			   SOUND RAM				;
00006B9C                            ;=======================================;
00006B9C                            ;--------------< COMMON >---------------;
00006B9C =00FFD300                  sound_ram		EQU		$ffd300			; sound ram top address
00006B9C =00000000                  prfl			EQU		$00				; priority flag
00006B9C =00000001                  rcunt			EQU		$01				; delay count work
00006B9C =00000002                  cuntst			EQU		$02				; delay store
00006B9C =00000003                  t_flg			EQU		$03				; timing flag 
00006B9C =00000004                  foutfl			EQU		$04				; faid out flag (volume suu)
00006B9C =00000005                  fouttm_ct		EQU		$05				; faid out timer (work)
00006B9C =00000006                  fouttm			EQU		$06				; faid out timer (interrupt)
00006B9C =00000007                  pause_flg		EQU		$07				; pause flg (nz: pause on)(RAM+8)
00006B9C =00000008                  rythm_flag		EQU		$08				; rythm flag
00006B9C =00000009                  kyflag0			EQU		$09				; sound key flag
00006B9C =0000000A                  kyflag			EQU		$0A				; key flag (buffer top)
00006B9C =0000000A                  buf1			EQU		kyflag			; buffer 1
00006B9C =0000000B                  buf2			EQU		kyflag+1		; buffer 2
00006B9C =0000000C                  buf3			EQU		kyflag+2		; buffer 3
00006B9C =0000000E                  seflag			EQU		$0E				; se flag
00006B9C =0000000F                  se_mode_flg		EQU		$0F				; effect mode
00006B9C =00000010                  dt1				EQU		$10				; store slot 1 detune freq (2byte)
00006B9C =00000012                  dt2				EQU		$12				; store slot 2 detune freq (2byte)
00006B9C =00000014                  dt3				EQU		$14				; store slot 3 detune freq (2byte)
00006B9C =00000016                  dt4				EQU		$16				; store slot 4 detune freq (2byte)
00006B9C =00000018                  sng_voice_addr	EQU		$18				; song voice top address (long word)
00006B9C =0000001C                  se_voice_addr	EQU		$1C				; se voice top address (long word)
00006B9C =00000020                  back_voice_addr	EQU		$20				; backse voice top address (long word)
00006B9C =00000040                  flags			EQU		$40
00006B9C                            
00006B9C                            ;-----< CHANNEL WORK RAM (OFFSET) >-----;
00006B9C =00000030                  flgvol			EQU		$30				; channel work ram size
00006B9C                            
00006B9C =00000040                  tb20ch			EQU		$40				; FM 6ch (rythm)
00006B9C =00000070                  tb21ch			EQU		tb20ch+flgvol	; FM 0ch (tone)
00006B9C =000000A0                  tb22ch			EQU		tb21ch+flgvol	; FM 1ch (tone)
00006B9C =000000D0                  tb23ch			EQU		tb22ch+flgvol	; FM 2ch (tone)
00006B9C =00000100                  tb24ch			EQU		tb23ch+flgvol	; FM 4ch (tone)
00006B9C =00000130                  tb25ch			EQU		tb24ch+flgvol	; FM 5ch (tone)
00006B9C =00000160                  tb26ch			EQU		tb25ch+flgvol	; FM 6ch (tone)
00006B9C =00000190                  tb27ch			EQU		tb26ch+flgvol	; PSG 0ch
00006B9C =000001C0                  tb28ch			EQU		tb27ch+flgvol	; PSG 1ch
00006B9C =000001F0                  tb29ch			EQU		tb28ch+flgvol	; PSG 2ch (rythm)
00006B9C =00000220                  tb2Ach			EQU		tb29ch+flgvol	; FM S.E 2ch
00006B9C =00000250                  tb2Bch			EQU		tb2Ach+flgvol	; FM S.E 5ch
00006B9C =00000280                  tb2Cch			EQU		tb2Bch+flgvol	; FM S.E 6ch
00006B9C =000002B0                  tb2Dch			EQU		tb2Cch+flgvol	; PSG S.E 1ch
00006B9C =000002E0                  tb2Ech			EQU		tb2Dch+flgvol	; PSG S.E 2ch
00006B9C =00000310                  tb2Fch			EQU		tb2Ech+flgvol	; PSG S.E 3ch
00006B9C =00000340                  tb30ch			EQU		tb2Fch+flgvol	; back S.E 1ch
00006B9C =00000370                  tb31ch			EQU		tb30ch+flgvol	; back S.E 2ch
00006B9C                            
00006B9C                            ;-------< WORK RAM DIRECT ASSIGN >------;
00006B9C =00000040                  wk_top			EQU		tb20ch
00006B9C =00000040                  pcm_rythm_wk	EQU		tb20ch
00006B9C =00000070                  fm_wk_top		EQU		tb21ch
00006B9C =00000070                  fm0_wk			EQU		tb21ch
00006B9C =000000A0                  fm1_wk			EQU		tb22ch
00006B9C =000000D0                  fm2_wk			EQU		tb23ch
00006B9C =00000100                  fm4_wk			EQU		tb24ch
00006B9C =00000130                  fm5_wk			EQU		tb25ch
00006B9C =00000160                  fm6_wk			EQU		tb26ch
00006B9C =00000190                  psg_wk_top		EQU		tb27ch
00006B9C =00000190                  psg0_wk			EQU		tb27ch
00006B9C =000001C0                  psg1_wk			EQU		tb28ch
00006B9C =000001F0                  psg2_wk			EQU		tb29ch
00006B9C =00000220                  fm_se_wk_top	EQU		tb2Ach
00006B9C =00000220                  fm_se1_wk		EQU		tb2Ach
00006B9C =00000250                  fm_se2_wk		EQU		tb2Bch
00006B9C =00000280                  fm_se3_wk		EQU		tb2Cch
00006B9C =000002B0                  psg_se_wk_top	EQU		tb2Dch
00006B9C =000002B0                  psg_se1_wk		EQU		tb2Dch
00006B9C =000002E0                  psg_se2_wk		EQU		tb2Ech
00006B9C =00000310                  psg_se3_wk		EQU		tb2Fch
00006B9C =00000340                  back_se_wk		EQU		tb30ch
00006B9C =00000370                  back_se2_wk		EQU		tb31ch
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;				 FLAGS					;
00006B9C                            ;=======================================;
00006B9C =00000000                  flag			EQU		$00				; flag
00006B9C =00000007                  _en				EQU		7				;  bit 7: enable
00006B9C =00000004                  _tie			EQU		4				;	   4: tie flag
00006B9C =00000003                  _fvr			EQU		3				;	   3: fvr flag
00006B9C =00000002                  _wr				EQU		2				;	   2: data write enable flag
00006B9C =00000001                  _null			EQU		1				;	   1: null (NL) flag
00006B9C =00000001                  _nl				EQU		1				;	   1: null (NL) flag
00006B9C =00000000                  _pse			EQU		0				;	   0: song pause flag
00006B9C                            
00006B9C =00000001                  chian			EQU		$01				; channel no.
00006B9C =00000002                  cbase			EQU		$02				; constant base counter
00006B9C =00000003                  dtstr			EQU		$03				; DMY
00006B9C =00000004                  tbpon			EQU		$04				; music table pointer (4 bytes)
00006B9C =00000008                  bias			EQU		$08				; scale data bias
00006B9C =00000009                  volm			EQU		$09				; volume date
00006B9C =0000000A                  panstr			EQU		$0A				; lrpan mode store
00006B9C =0000000B                  enve			EQU		$0B				; FM: voice no./ PSG: envelope no.store
00006B9C =0000000C                  econt			EQU		$0C				; envelope counter (PSG)
00006B9C =0000000D                  stac			EQU		$0D				; [CMCALL] stack pointer
00006B9C =0000000E                  lcont			EQU		$0E				; length data
00006B9C =0000000F                  ecstr			EQU		$0F				; length counter
00006B9C =00000010                  freqb			EQU		$10				; base frequency (2 bytes)
00006B9C =00000012                  gate			EQU		$12				; gate counter
00006B9C =00000013                  gate_str		EQU		$13				; gate data
00006B9C =00000014                  fvr_str			EQU		$14				; [FVR] store address (4 bytes)
00006B9C =00000018                  v_delay			EQU		$18				; [FVR] delay
00006B9C =00000019                  v_cont			EQU		$19				; [FVR] counter
00006B9C =0000001A                  v_add			EQU		$1A				; [FVR] add data
00006B9C =0000001B                  v_limit			EQU		$1B				; [FVR] limit
00006B9C =0000001C                  v_freq			EQU		$1C				; [FVR] frequency (2 bytes)
00006B9C =0000001E                  fdt_freq		EQU		$1E				; [FDT] frequency
00006B9C =0000001F                  pan_no			EQU		$1F				; pan mode stpre
00006B9C =00000020                  pan_tb			EQU		$20				; pan table no.
00006B9C =00000021                  pan_start		EQU		$21				; pan start point
00006B9C =00000022                  pan_limit		EQU		$22				; pan limit
00006B9C =00000023                  pan_leng		EQU		$23				; pan length
00006B9C =00000024                  pan_cont		EQU		$24				; pan count
00006B9C =00000025                  algo			EQU		$25				; FM algorythm
00006B9C =00000026                  ntype			EQU		$26				; noise type (E0h-E7h)
00006B9C                            ;env_s			EQU		$27				; song no.store (other song enve use)
00006B9C =00000028                  reptr			EQU		$28				; repeat counter (4 bytes)
00006B9C                            
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			ENVELOPE COMMAND			;
00006B9C                            ;=======================================;
00006B9C =00000080                  TBREPT			EQU		$80				; table repeat sign
00006B9C =00000081                  TBSTAY			EQU		$81				; table staying sign
00006B9C =00000083                  TBEND			EQU		$83				; table end sign
00006B9C =00000084                  TBADD			EQU		$84				; after this command
00006B9C                            										; data=([table data]-0)*[add data]
00006B9C =00000085                  TBBAK			EQU		$85				; table pointer set next data
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;				HEADDER					;
00006B9C                            ;=======================================;
00006B9C =00000000                  hd_voice		EQU		0
00006B9C =00000002                  hd_fmch_no		EQU		2
00006B9C =00000003                  hd_psgch_no		EQU		3
00006B9C =00000004                  hd_base			EQU		4
00006B9C =00000005                  hd_delay		EQU		5
00006B9C =00000006                  hd_fmdt_top		EQU		6
00006B9C                            
00006B9C =00000002                  hd_se_base		EQU		2				; s.e base
00006B9C =00000003                  hd_se_use		EQU		3				; s.e use total
00006B9C =00000004                  hd_sedt_top		EQU		4				; s.e table channel data start addr
00006B9C                            
00006B9C =00000001                  hd_sech_no		EQU		1				; offset from hd chiannel  top
00006B9C                            
00006B9C =0000000C                  hd_psg_vol		EQU		6+6				; ram using
00006B9C =0000000A                  hd_fm_vol		EQU		4+6				; ram using
00006B9C =0000000A                  hd_sepg_vol		EQU		10
00006B9C =0000000C                  hd_sefm_vol		EQU		12
00006B9C                            ;=======================================;
00006B9C                            ;			FM CHIP REGISTOR			;
00006B9C                            ;=======================================;
00006B9C =0000002B                  dsel			EQU		$2B				;
00006B9C =0000002A                  dreg			EQU		$2A				;
00006B9C =00000021                  fmtest			EQU		$21				; lsi test data
00006B9C =00000022                  lfo_fq			EQU		$22				;
00006B9C =00000024                  timer_a			EQU		$24				; timer A msb 8 bit data
00006B9C                            										; 25H = lsb 2 bit data
00006B9C =00000026                  timer_b			EQU		$26				; timer B data
00006B9C =00000027                  mode_tim		EQU		$27				; TIMER & FM MODE CONTROL
00006B9C =00000028                  key_cont		EQU		$28				; KEY ON OFF CONTROL
00006B9C =00000030                  dt_mult			EQU		$30				; detune/multiple data
00006B9C =00000040                  t_lvl			EQU		$40				; total level data
00006B9C =00000050                  ks_at_rt		EQU		$50				; key scale/attack rate data
00006B9C =00000060                  dec_rt			EQU		$60				; decay rate data
00006B9C =00000070                  sus_rt			EQU		$70				; sustain rate data
00006B9C =00000080                  sus_lv_rl_rt	EQU		$80				; sustain level/release rate data
00006B9C =000000A0                  f_num1			EQU		$A0				; frequency number 1
00006B9C =000000A4                  blk_f_num2		EQU		$A4				; frequency number 2 & block data
00006B9C =000000A8                  f_num3ch		EQU		$A8				; 3ch slot F-number 1
00006B9C =000000AC                  bl_fnum3ch		EQU		$AC				; 3ch slot F-number 2 & block data
00006B9C =000000B0                  fb_con			EQU		$B0				; self feedback/connection
00006B9C =000000B4                  lr_mod			EQU		$B4
00006B9C                            
00006B9C =00000004                  FMNON			EQU		$04
00006B9C =00000080                  PGNON			EQU		$80
00006B9C                            
00006B9C =00000040                  se_mode			EQU		$40
00006B9C =00000000                  nomal_mode		EQU		0
00006B9C                            
00006B9C                            ;---------------< SLOT >----------------;
00006B9C =000000B0                  FBC				EQU		$B0				; self feedback/connection
00006B9C =000000B4                  RL				EQU		$B4
00006B9C                            
00006B9C =00000030                  MU1				EQU		$30
00006B9C =00000038                  MU2				EQU		$38
00006B9C =00000034                  MU3				EQU		$34
00006B9C =0000003C                  MU4				EQU		$3C
00006B9C =00000030                  DM1				EQU		$30
00006B9C =00000038                  DM2				EQU		$38
00006B9C =00000034                  DM3				EQU		$34
00006B9C =0000003C                  DM4				EQU		$3C
00006B9C =00000040                  TL1				EQU		$40
00006B9C =00000048                  TL2				EQU		$48
00006B9C =00000044                  TL3				EQU		$44
00006B9C =0000004C                  TL4				EQU		$4C
00006B9C =00000050                  AR1				EQU		$50
00006B9C =00000058                  AR2				EQU		$58
00006B9C =00000054                  AR3				EQU		$54
00006B9C =0000005C                  AR4				EQU		$5C
00006B9C =00000060                  DR1				EQU		$60
00006B9C =00000068                  DR2				EQU		$68
00006B9C =00000064                  DR3				EQU		$64
00006B9C =0000006C                  DR4				EQU		$6C
00006B9C =00000070                  SR1				EQU		$70
00006B9C =00000078                  SR2				EQU		$78
00006B9C =00000074                  SR3				EQU		$74
00006B9C =0000007C                  SR4				EQU		$7C
00006B9C =00000080                  RR1				EQU		$80
00006B9C =00000088                  RR2				EQU		$88
00006B9C =00000084                  RR3				EQU		$84
00006B9C =0000008C                  RR4				EQU		$8C
00006B9C =00000090                  SSG1			EQU		$90
00006B9C =00000098                  SSG2			EQU		$98
00006B9C =00000094                  SSG3			EQU		$94
00006B9C =0000009C                  SSG4			EQU		$9C
00006B9C =000000AD                  bfsl1			EQU		$AD				; 3ch 1slot F-number 2 & block data
00006B9C =000000AE                  bfsl2			EQU		$AE				; 3ch 2slot F-number 2 & block data
00006B9C =000000AC                  bfsl3			EQU		$AC				; 3ch 3slot F-number 2 & block data
00006B9C =000000A6                  bfsl4			EQU		$A6				; 3ch 3slot F-number 2 & block data		
00006B9C                            ;=======================================;
00006B9C                            ;			  FM CHIP I/O				;
00006B9C                            ;=======================================;
00006B9C =00A04000                  opn1			EQU		$a04000
00006B9C =00A04002                  opn2			EQU		opn1+$02
00006B9C                            
00006B9C =00A04000                  opn_status		EQU		opn1+$00		; 2612 status
00006B9C =00A04000                  opn1_adr		EQU		opn1+$00		; 2612 OPN1 address
00006B9C =00A04001                  opn1_data		EQU		opn1+$01		; 2612 OPN1 data
00006B9C                            
00006B9C =00A04002                  opn2_adr		EQU		opn2+$00		; 2612 ADDRESS
00006B9C =00A04003                  opn2_data		EQU		opn2+$01		; 2612 data
00006B9C                            
00006B9C =00C00011                  psg68k			EQU		$C00011			; PSG address
00006B9C                            
00006B9C =00A11100                  z80busreq		EQU		$a11100			; z80 bus rEQUest
00006B9C =00A11200                  z80reset		EQU		$a11200			; z80 reset
00006B9C                            
00006B9C                            
00006B9C                            ;=======================================;
00006B9C                            ;			  END OF FILE				;
00006B9C                            ;=======================================;
00006B9C                            
00006B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00006B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00006B9C                            
00006B9C                            ; ---------------------------------------------------------------------------
00006B9C                            ; Music data
00006B9C                            ; ---------------------------------------------------------------------------
00006B9C                            		include	"sound/sng81.s"
00006B9C                            ;=======================================================;
00006B9C                            ;			*$$SNG81.S	(Song Data)						;
00006B9C                            ;						ORG. MDSNG111.S					;
00006B9C                            ;				'Sound-Source'							;
00006B9C                            ;				 for Mega Drive (68K)					;
00006B9C                            ;						Ver  1.1 / 1990.9.1				;
00006B9C                            ;									  By  H.Kubota		;
00006B9C                            ;=======================================================;
00006B9C                            
00006B9C                            ;		public	S81
00006B9C                            
00006B9C                            ;		list off
00006B9C                            ;		include	mdEQ11.LIB
00006B9C                            ;		include	mdMCR11.LIB
00006B9C                            ;		include	mdTB11.LIB
00006B9C                            ;		list on
00006B9C                            
00006B9C                            		even
00006B9C                            
00006B9C                            ;===============================================;
00006B9C                            ;												;
00006B9C                            ;					 ASSIGN						;
00006B9C                            ;												;
00006B9C                            ;===============================================;
00006B9C                            ;=====< S81 CHANNEL TOTAL >=====;
00006B9C =00000006                  FM81	EQU		6				; FM Channel Total
00006B9C =00000003                  PSG81	EQU		3				; PSG Channel Total
00006B9C                            ;=========< S81 TEMPO >=========;
00006B9C =00000002                  TP81	EQU		2				; Tempo
00006B9C =00000005                  DL81	EQU		5				; Delay
00006B9C                            ;==========< S81 BIAS >=========;
00006B9C =0000000C                  FB810	EQU		12				; FM 0ch
00006B9C =00000000                  FB811	EQU		0				; FM 1ch
00006B9C =00000000                  FB812	EQU		0				; FM 2ch
00006B9C =00000000                  FB814	EQU		0				; FM 4ch
00006B9C =00000000                  FB815	EQU		0				; FM 5ch
00006B9C =00000000                  FB816	EQU		0				; FM 6ch (if don't use PCM drum)
00006B9C =FFFFFFDC                  PB818	EQU		-12*3			; PSG 80ch
00006B9C =FFFFFFDC                  PB81A	EQU		-12*3			; PSG A0ch
00006B9C =00000000                  PB81C	EQU		0				; PSG C0ch
00006B9C                            ;==========< S81 VOLM >=========;
00006B9C =00000016                  FA810	EQU		$16				; FM 0ch
00006B9C =00000004                  FA811	EQU		$04				; FM 1ch
00006B9C =00000016                  FA812	EQU		$16				; FM 2ch
00006B9C =00000016                  FA814	EQU		$16				; FM 4ch
00006B9C =00000016                  FA815	EQU		$16				; FM 5ch
00006B9C =00000010                  FA816	EQU		$10				; FM 6ch (if don't use PCM drum)
00006B9C =00000007                  PA818	EQU		$07				; PSG 80ch
00006B9C =00000007                  PA81A	EQU		$07				; PSG A0ch
00006B9C =00000003                  PA81C	EQU		$03				; PSG C0ch
00006B9C                            ;==========< S81 ENVE >=========;
00006B9C =00000000                  PE818	EQU		0				; PSG 80ch
00006B9C =00000000                  PE81A	EQU		0				; PSG A0ch
00006B9C =00000004                  PE81C	EQU		4				; PSG C0ch
00006B9C                            
00006B9C                            ;===============================================;
00006B9C                            ;												;
00006B9C                            ;					 HEADER						;
00006B9C                            ;												;
00006B9C                            ;===============================================;
00006B9C                            S81:
00006B9C 0000                       		TDW		TIMB81,S81				; Voice Top Address
00006B9E 0603 0205                  		DC.B	FM81,PSG81,TP81,DL81	; FM Total,PSG Total,Tempo,Delay
00006BA2                            
00006BA2 0000                       		TDW		TAB81D,S81				; PCM Drum Table Pointer
00006BA4 0000                       		DC.B	0,0						; Bias,Volm (Dummy)
00006BA6                            
00006BA6 0000                       		TDW		TAB810,S81				; FM 0ch Table Pointer
00006BA8 0C16                       		DC.B	FB810,FA810				; Bias,Volm
00006BAA                            
00006BAA 0000                       		TDW		TAB811,S81				; FM 1ch Table Pointer
00006BAC 0004                       		DC.B	FB811,FA811				; Bias,Volm
00006BAE                            
00006BAE 0000                       		TDW		TAB812,S81				; FM 2ch Table Pointer
00006BB0 0016                       		DC.B	FB812,FA812				; Bias,Volm
00006BB2                            
00006BB2 0000                       		TDW		TAB814,S81				; FM 4ch Table Pointer
00006BB4 0016                       		DC.B	FB814,FA814				; Bias,Volm
00006BB6                            
00006BB6 0000                       		TDW		TAB815,S81				; FM 5ch Table Pointer
00006BB8 0016                       		DC.B	FB815,FA815				; Bias,Volm
00006BBA                            
00006BBA 0000                       		TDW		TAB818,S81				; PSG 80ch Table Pointer
00006BBC DC07 0000                  		DC.B	PB818,PA818,0,PE818		; Bias,Volm,Dummy,Enve
00006BC0                            
00006BC0 0000                       		TDW		TAB81A,S81				; PSG A0ch Table Pointer
00006BC2 DC07 0000                  		DC.B	PB81A,PA81A,0,PE81A		; Bias,Volm,Dummy,Enve
00006BC6                            
00006BC6 0000                       		TDW		TAB81C,S81				; PSG C0ch Table Pointer
00006BC8 0003 0004                  		DC.B	PB81C,PA81C,0,PE81C		; Bias,Volm,Dummy,Enve
00006BCC                            
00006BCC                            ;===============================================;
00006BCC                            ;												;
00006BCC                            ;				   SONG TABLE					;
00006BCC                            ;												;
00006BCC                            ;===============================================;
00006BCC                            ;===============================================;
00006BCC                            ;					 FM 0ch						;
00006BCC                            ;===============================================;
00006BCC =00006BCC                  TAB810	EQU		*
00006BCC EF00                       		DC.B	FEV,0
00006BCE =00006BCE                  T8100	EQU		*
00006BCE 8060 80                    		DC.B	NL,L1+L1,NL
00006BD1 =00006BD1                  T810A	EQU		*
00006BD1 =00006BD1                  T810A_0	EQU		*
00006BD1 F8                         		DC.B	CMCALL
00006BD2 0000                       		JDW		SUB8100M
00006BD4 F700 03                    		DC.B	CMREPT,0,3
00006BD7 FFF9                       		JDW		T810A_0
00006BD9 8006 F00B 01F0 FFA3 06F4+  		DC.B	NL,L8,FVR,0BH,1,0F0H,0FFH,BF2,L8,VROFF,BF2,L16,BF2,AF2,BF2
00006BE8 A506 F001 0103 04A5 F480+  		DC.B	CN3,L8,FVR,1,1,3,4,CN3,VROFF,NL,BF2,L16,CN3
00006BF5 A606 F001 0103 04A6 F480+  		DC.B	DF3,L8,FVR,1,1,3,4,DF3,VROFF,NL,CN3,L16,DF3
00006C02 A401 E7A5 05F0 0101 0404+  		DC.B	BN2,1,TIE,CN3,L8-1,FVR,1,1,4,4,AF2,L8+2,VROFF,NL,L8-2,NL,L8
00006C13                            		
00006C13 =00006C13                  T810B	EQU		*
00006C13 =00006C13                  T810B_0	EQU		*
00006C13 F8                         		DC.B	CMCALL
00006C14 0000                       		JDW		SUB810B
00006C16                            		
00006C16 F700 03                    		DC.B	CMREPT,0,3
00006C19 FFF9                       		JDW		T810B_0
00006C1B                            		
00006C1B A303 A3A3 AAF0 0101 0604+  		DC.B	BF2,L16,BF2,BF2,FN3,FVR,1,1,6,4,EF3,L8,VROFF,BF2,L8
00006C2A 800C AA03 AAAA AA          		DC.B	NL,L4,FN3,L16,FN3,FN3,FN3
00006C31 F001 0106 04AD 06F4 AA03+  		DC.B	FVR,1,1,6,4,AF3,L8,VROFF,FN3,L16,NL,L16+L8,FN3,L16,FN3
00006C40 E6FE F001 0106 04AD 06F4+  		DC.B	CMVADD,-2,FVR,1,1,6,4,AF3,L8,VROFF,CMVADD,2,FN3,L16,NL
00006C4F E6FE F001 0106 04AD 06F4+  		DC.B	CMVADD,-2,FVR,1,1,6,4,AF3,L8,VROFF,CMVADD,2,BF3,L16,NL
00006C5E                            		
00006C5E =00006C5E                  T810C	EQU		*
00006C5E E080                       		DC.B	LRPAN,LSET
00006C60 F8                         		DC.B	CMCALL
00006C61 0000                       		JDW		SUB810C
00006C63 8006                       		DC.B	NL,L8
00006C65 =00006C65                  T810D	EQU		*
00006C65 E0C0                       		DC.B	LRPAN,LRSET
00006C67 F8                         		DC.B	CMCALL
00006C68 0000                       		JDW		SUB810B
00006C6A                            		
00006C6A F700 03                    		DC.B	CMREPT,0,3
00006C6D FFF7                       		JDW		T810D
00006C6F                            		
00006C6F =00006C6F                  T810D2	EQU		*
00006C6F                            		
00006C6F F8                         		DC.B	CMCALL
00006C70 0000                       		JDW		SUB810D
00006C72                            		
00006C72 F6                         		DC.B	CMJUMP
00006C73 FF5A                       		JDW		T8100
00006C75 =00006C75                  SUB8100	EQU		*
00006C75 8006 A306 A303 A3A1 A3     		DC.B	NL,L8,BF2,L8,BF2,L16,BF2,AF2,BF2
00006C7E A506 A580 A303 A5          		DC.B	CN3,L8,CN3,NL,BF2,L16,CN3
00006C85 A606 A680 A503 A6          		DC.B	DF3,L8,DF3,NL,CN3,L16,DF3
00006C8C A506 A1                    		DC.B	CN3,L8,AF2
00006C8F E3                         		DC.B	CMRET
00006C90 =00006C90                  SUB8100M		EQU		*
00006C90 8006 F00B 01F0 FFA3 06F4+  		DC.B	NL,L8,FVR,0BH,1,0F0H,0FFH,BF2,L8,VROFF,BF2,L16,BF2,AF2,BF2
00006C9F A506 F001 0103 04A5 F480+  		DC.B	CN3,L8,FVR,1,1,3,4,CN3,VROFF,NL,BF2,L16,CN3
00006CAC A606 F001 0103 04A6 F480+  		DC.B	DF3,L8,FVR,1,1,3,4,DF3,VROFF,NL,CN3,L16,DF3
00006CB9 A401 E7A5 05F0 0101 0404+  		DC.B	BN2,1,TIE,CN3,L8-1,FVR,1,1,4,4,AF2,L8+2,VROFF,NL,L8-2,BF2,L8
00006CCA E3                         		DC.B	CMRET
00006CCB =00006CCB                  SUB810B	EQU		*
00006CCB A303 A3A3 AAF0 0101 0604+  		DC.B	BF2,L16,BF2,BF2,FN3,FVR,1,1,6,4,EF3,L8,VROFF,BF2,L8
00006CDA 800C A303 A3A3 AA          		DC.B	NL,L4,BF2,L16,BF2,BF2,FN3
00006CE1 F001 0106 04A8 06F4 A380+  		DC.B	FVR,1,1,6,4,EF3,L8,VROFF,BF2,NL,BF2,L16,BF2
00006CEE A503 80A1 0603 A380 06     		DC.B	CN3,L16,NL,AF2,L8,L16,BF2,NL,L8
00006CF7 E3                         		DC.B	CMRET
00006CF8 =00006CF8                  SUB810C	EQU		*
00006CF8 800C                       		DC.B	NL,L4
00006CFA B603 B6B6 B6               		DC.B	FN4,L16,FN4,FN4,FN4
00006CFF F000 0106 04               		DC.B	FVR,0,1,6,4
00006D04                            		
00006D04 F8                         		DC.B	CMCALL
00006D05 0000                       		JDW		SUB810C0
00006D07                            		
00006D07 8006 B603 03F1 06F4 0303   		DC.B	NL,L8,FN4,L16,L16,VRON,L8,VROFF,L16,L16
00006D11 F1B4 06F4 B180 B203 B4     		DC.B	VRON,EF4,L8,VROFF,CN4,NL,DF4,L16,EF4
00006D1A B203 80F1 AF06 F480 B103+  		DC.B	DF4,L16,NL,VRON,BF3,L8,VROFF,NL,CN4,L16,DF4
00006D25 B106 B1B4 F1B6 08F4        		DC.B	CN4,L8,CN4,EF4,VRON,FN4,L8+2,VROFF
00006D2D                            		
00006D2D 8004 B603 B6B6 B6F1 B606   		DC.B	NL,L8-2,FN4,L16,FN4,FN4,FN4,VRON,FN4,L8
00006D37                            		
00006D37 F8                         		DC.B	CMCALL
00006D38 0000                       		JDW		SUB810C0
00006D3A                            		
00006D3A 8006 B603 0303 0303 03     		DC.B	NL,L8,FN4,L16,L16,L16,L16,L16,L16
00006D43 F1B4 06F4 B180 B203 B4     		DC.B	VRON,EF4,L8,VROFF,CN4,NL,DF4,L16,EF4
00006D4C B203 80AF 0680 B203 B2     		DC.B	DF4,L16,NL,BF3,L8,NL,DF4,L16,DF4
00006D55 F1B4 06F4 B109 8003        		DC.B	VRON,EF4,L8,VROFF,CN4,L8+3,NL,L8-3
00006D5D E3                         		DC.B	CMRET
00006D5E =00006D5E                  SUB810C0		EQU		*
00006D5E B406 F4B1 80B2 03B4        		DC.B	EF4,L8,VROFF,CN4,NL,DF4,L16,EF4
00006D66 F1B2 06F4 AF80 B203 B2     		DC.B	VRON,DF4,L8,VROFF,BF3,NL,DF4,L16,DF4
00006D6F F1B4 06F4 B109 8003 8006   		DC.B	VRON,EF4,L8,VROFF,CN4,L8+3,NL,L8-3,NL,L8
00006D79 E3                         		DC.B	CMRET
00006D7A =00006D7A                  SUB810D	EQU		*
00006D7A A901 E7AA 05E6 04A5 06E6+  		DC.B	EN3,1,CMTAB,FN3,L8-1,CMVADD,4,CN3,L8,CMVADD,-4,EF3,FVR,10H,1,0E0H,0FFH,EF3,L4-2
00006D8D F480 08A9 01E7 AA05 E604+  		DC.B	VROFF,NL,L8+2,EN3,1,CMTAB,FN3,L8-1,CMVADD,4,CN3,L8,CMVADD,-4
00006D9B A8F0 1001 E0FF A80A F480+  		DC.B	EF3,FVR,10H,1,0E0H,0FFH,EF3,L4-2,VROFF,NL,2,FN3,L16,FN3
00006DA9 F001 0108 04A9 01E7 AA08+  		DC.B	FVR,1,1,8,4,EN3,1,CMTAB,FN3,LF8-1,VROFF,L16,EF3,L16,DF3,BF2,L8
00006DBA E3                         		DC.B	CMRET
00006DBB                            ;===============================================;
00006DBB                            ;					 FM 1ch						;
00006DBB                            ;===============================================;
00006DBB =00006DBB                  TAB811	EQU		*
00006DBB EF01                       		DC.B	FEV,1
00006DBD =00006DBD                  T8110	EQU		*
00006DBD =00006DBD                  T811A	EQU		*
00006DBD F8                         		DC.B	CMCALL
00006DBE FEB6                       		JDW		SUB8100
00006DC0 80A3                       		DC.B	NL,BF2
00006DC2 F700 05                    		DC.B	CMREPT,0,5
00006DC5 FFF7                       		JDW		T8110
00006DC7 8006 A306 A303 A3A1 A3     		DC.B	NL,L8,BF2,L8,BF2,L16,BF2,AF2,BF2
00006DD0 A506 A580 A303 A5          		DC.B	CN3,L8,CN3,NL,BF2,L16,CN3
00006DD7 A606 A680 A503 A6          		DC.B	DF3,L8,DF3,NL,CN3,L16,DF3
00006DDE A506 A1                    		DC.B	CN3,L8,AF2
00006DE1 809F                       		DC.B	NL,GF2
00006DE3 =00006DE3                  T811B	EQU		*
00006DE3 F8                         		DC.B	CMCALL
00006DE4 0000                       		JDW		SUB811B
00006DE6 A112 9F06                  		DC.B	AF2,LF4,GF2,L8
00006DEA                            		
00006DEA E706 9F06 9F0C             		DC.B	TIE,L8,GF2,L8,GF2,L4
00006DF0 9F06 060C                  		DC.B	GF2,L8,L8,L4
00006DF4 9E9E                       		DC.B	FN2,FN2
00006DF6 9E06 A0A1 A3               		DC.B	FN2,L8,GN2,AF2,BF2
00006DFB                            		
00006DFB =00006DFB                  T811C	EQU		*
00006DFB F8                         		DC.B	CMCALL
00006DFC 0000                       		JDW		SUB811C
00006DFE 8003 A0A1 06A3             		DC.B	NL,L16,GN2,AF2,L8,BF2
00006E04                            		
00006E04 F8                         		DC.B	CMCALL
00006E05 0000                       		JDW		SUB811C
00006E07 A006 A29F                  		DC.B	GN2,L8,AN2,GF2
00006E0B                            		
00006E0B =00006E0B                  T811D	EQU		*
00006E0B F8                         		DC.B	CMCALL
00006E0C 0000                       		JDW		SUB811B
00006E0E A10C 9F                    		DC.B	AF2,L4,GF2
00006E11                            		
00006E11 =00006E11                  T811D2	EQU		*
00006E11 E6FC                       		DC.B	CMVADD,-4
00006E13 9E0C 80                    		DC.B	FN2,L4,NL
00006E16 9E06 9E80 18               		DC.B	FN2,L8,FN2,NL,L4+L4
00006E1B 9E0C                       		DC.B	FN2,L4
00006E1D 8012 A306                  		DC.B	NL,LF4,BF2,L8
00006E21 E604                       		DC.B	CMVADD,4
00006E23                            		
00006E23 F6                         		DC.B	CMJUMP
00006E24 FF98                       		JDW		T8110
00006E26 =00006E26                  SUB811C	EQU		*
00006E26 F8                         		DC.B	CMCALL
00006E27 0000                       		JDW		SUB811C0
00006E29 A106 A1A1 A3               		DC.B	AF2,L8,AF2,AF2,BF2
00006E2E                            		
00006E2E F8                         		DC.B	CMCALL
00006E2F 0000                       		JDW		SUB811C0
00006E31 9E06                       		DC.B	FN2,L8
00006E33 E3                         		DC.B	CMRET
00006E34 =00006E34                  SUB811C0		EQU		*
00006E34 8006 A3A3 A303 A3          		DC.B	NL,L8,BF2,BF2,BF2,L16,BF2
00006E3B A106 A106 80A1 03A1        		DC.B	AF2,L8,AF2,L8,NL,AF2,L16,AF2
00006E43 9F06 9F06 809F 039F        		DC.B	GF2,L8,GF2,L8,NL,GF2,L16,GF2
00006E4B E3                         		DC.B	CMRET
00006E4C =00006E4C                  SUB811B	EQU		*
00006E4C E706 9F9F 0C               		DC.B	TIE,L8,GF2,GF2,L4
00006E51 9F06 AB0C 9F06             		DC.B	GF2,L8,GF3,L4,GF2,L8
00006E57 06AB 9F0C                  		DC.B	L8,GF3,GF2,L4
00006E5B A112 9F06                  		DC.B	AF2,LF4,GF2,L8
00006E5F                            		
00006E5F F700 02                    		DC.B	CMREPT,0,2
00006E62 FFE9                       		JDW		SUB811B
00006E64 E706 9F9F 0C               		DC.B	TIE,L8,GF2,GF2,L4
00006E69 9F06 AB0C 9F06             		DC.B	GF2,L8,GF3,L4,GF2,L8
00006E6F 06AB 9F0C                  		DC.B	L8,GF3,GF2,L4
00006E73 E3                         		DC.B	CMRET
00006E74                            ;===============================================;
00006E74                            ;					 FM 2ch						;
00006E74                            ;===============================================;
00006E74 =00006E74                  TAB812	EQU		*
00006E74 =00006E74                  T8120	EQU		*
00006E74 E6FC                       		DC.B	CMVADD,-4
00006E76 EF02                       		DC.B	FEV,2
00006E78 E080                       		DC.B	LRPAN,LSET
00006E7A =00006E7A                  T8120_0	EQU		*
00006E7A F8                         		DC.B	CMCALL
00006E7B FDF9                       		JDW		SUB8100
00006E7D 80A3                       		DC.B	NL,BF2
00006E7F F700 02                    		DC.B	CMREPT,0,2
00006E82 FFF7                       		JDW		T8120_0
00006E84 E604                       		DC.B	CMVADD,4
00006E86 =00006E86                  T812A	EQU		*
00006E86 EF03                       		DC.B	FEV,3
00006E88 E080                       		DC.B	LRPAN,LSET
00006E8A =00006E8A                  T812A_0	EQU		*
00006E8A 8018                       		DC.B	NL,L2
00006E8C A506 A580 80               		DC.B	CN3,L8,CN3,NL,NL
00006E91 A6A6 8080                  		DC.B	DF3,DF3,NL,NL
00006E95 A5A5 80A3                  		DC.B	CN3,CN3,NL,BF2
00006E99 F700 03                    		DC.B	CMREPT,0,3
00006E9C FFED                       		JDW		T812A_0
00006E9E 8018                       		DC.B	NL,L2
00006EA0 A506 A580 80               		DC.B	CN3,L8,CN3,NL,NL
00006EA5 A6A6 8080                  		DC.B	DF3,DF3,NL,NL
00006EA9 A5A5 80                    		DC.B	CN3,CN3,NL
00006EAC =00006EAC                  T812B	EQU		*
00006EAC EF04                       		DC.B	FEV,4
00006EAE E080                       		DC.B	LRPAN,LSET
00006EB0 E60A                       		DC.B	CMVADD,10
00006EB2 F020 0104 05               		DC.B	FVR,32,1,4,5
00006EB7 AF                         		DC.B	BF3
00006EB8 =00006EB8                  T812B_0	EQU		*
00006EB8 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
00006EBE F700 03                    		DC.B	CMREPT,0,3
00006EC1 FFF6                       		JDW		T812B_0
00006EC3 E730 AE                    		DC.B	CMTAB,L1,AN3
00006EC6                            		
00006EC6 E6F6                       		DC.B	CMVADD,-10
00006EC8 E602                       		DC.B	CMVADD,2
00006ECA =00006ECA                  T812C	EQU		*
00006ECA E0C0                       		DC.B	LRPAN,LRSET
00006ECC EF00                       		DC.B	FEV,0
00006ECE 800C BE03 BEBE BE          		DC.B	NL,L4,DF5,L16,DF5,DF5,DF5
00006ED5 F001 0106 04BD 06F4 B980+  		DC.B	FVR,1,1,6,4,CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00006EE2 F1BB 06F4 B780 BB03 BB     		DC.B	VRON,BF4,L8,VROFF,GF4,NL,BF4,L16,BF4
00006EEB F1BD 06F4 B909 8003 8006   		DC.B	VRON,CN5,L8,VROFF,AF4,L8+3,NL,L8-3,NL,L8
00006EF5                            		
00006EF5 8006 BE03 03F1 06F4 0303   		DC.B	NL,L8,DF5,L16,L16,VRON,L8,VROFF,L16,L16
00006EFF F1BD 06F4 B980 BB03 BD     		DC.B	VRON,CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00006F08 BB03 80F1 B706 F480 B903+  		DC.B	BF4,L16,NL,VRON,GF4,L8,VROFF,NL,AF4,L16,BF4
00006F13 F1BA 06F4 BABD F1BE 08F4   		DC.B	VRON,AN4,L8,VROFF,AN4,CN5,VRON,DF5,L8+2,VROFF
00006F1D                            		
00006F1D 8004 BE03 BEBE BEF1 BE06   		DC.B	NL,L8-2,DF5,L16,DF5,DF5,DF5,VRON,DF5,L8
00006F27 BD06 F4B9 80BB 03BD        		DC.B	CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00006F2F F1BB 06F4 B780 BB03 BB     		DC.B	VRON,BF4,L8,VROFF,GF4,NL,BF4,L16,BF4
00006F38 F1BD 06F4 B909 8003 8006   		DC.B	VRON,CN5,L8,VROFF,AF4,L8+3,NL,L8-3,NL,L8
00006F42                            		
00006F42 8006 BE03 0303 0303 03     		DC.B	NL,L8,DF5,L16,L16,L16,L16,L16,L16
00006F4B F1BD 06F4 B980 BB03 BD     		DC.B	VRON,CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00006F54 BB03 80F1 B706 F480 BB03+  		DC.B	BF4,L16,NL,VRON,GF4,L8,VROFF,NL,BF4,L16,BF4
00006F5F F1BD 06F4 BA09 8003        		DC.B	VRON,CN5,L8,VROFF,AN4,L8+3,NL,L8-3
00006F67                            		
00006F67 E6FE                       		DC.B	CMVADD,-2
00006F69 =00006F69                  T812D	EQU		*
00006F69 E080                       		DC.B	LRPAN,LSET
00006F6B EF04                       		DC.B	FEV,4
00006F6D E60A                       		DC.B	CMVADD,10
00006F6F F020 0104 05               		DC.B	FVR,32,1,4,5
00006F74 AF06                       		DC.B	BF3,L8
00006F76 =00006F76                  T812D_0	EQU		*
00006F76 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
00006F7C F700 03                    		DC.B	CMREPT,0,3
00006F7F FFF6                       		JDW		T812D_0
00006F81 E6F6                       		DC.B	CMVADD,-10
00006F83 =00006F83                  T812D2	EQU		*
00006F83 EF00                       		DC.B	FEV,0
00006F85 F8                         		DC.B	CMCALL
00006F86 FDF3                       		JDW		SUB810D
00006F88                            		
00006F88 F6                         		DC.B	CMJUMP
00006F89 FEEA                       		JDW		T8120
00006F8B                            		
00006F8B                            ;===============================================;
00006F8B                            ;					 FM 4ch						;
00006F8B                            ;===============================================;
00006F8B =00006F8B                  TAB814	EQU		*
00006F8B =00006F8B                  T8140	EQU		*
00006F8B EF05                       		DC.B	FEV,5
00006F8D E040                       		DC.B	LRPAN,RSET
00006F8F E6FC                       		DC.B	CMVADD,-4
00006F91 =00006F91                  T8140_0	EQU		*
00006F91 F8                         		DC.B	CMCALL
00006F92 FCE2                       		JDW		SUB8100
00006F94 80A3                       		DC.B	NL,BF2
00006F96 F700 02                    		DC.B	CMREPT,0,2
00006F99 FFF7                       		JDW		T8140_0
00006F9B E604                       		DC.B	CMVADD,4
00006F9D =00006F9D                  T814A	EQU		*
00006F9D EF03                       		DC.B	FEV,3
00006F9F E040                       		DC.B	LRPAN,RSET
00006FA1 8018                       		DC.B	NL,L2
00006FA3 A806 A880 80               		DC.B	EF3,L8,EF3,NL,NL
00006FA8 AAAA 8080                  		DC.B	FN3,FN3,NL,NL
00006FAC A8A8 80A6                  		DC.B	EF3,EF3,NL,DF3
00006FB0 F700 03                    		DC.B	CMREPT,0,3
00006FB3 FFE9                       		JDW		T814A
00006FB5 8018                       		DC.B	NL,L2
00006FB7 A806 A880 80               		DC.B	EF3,L8,EF3,NL,NL
00006FBC AAAA 8080                  		DC.B	FN3,FN3,NL,NL
00006FC0 A8A8 80                    		DC.B	EF3,EF3,NL
00006FC3 =00006FC3                  T814B	EQU		*
00006FC3 EF04                       		DC.B	FEV,4
00006FC5 E0C0                       		DC.B	LRPAN,LRSET
00006FC7 E60A                       		DC.B	CMVADD,10
00006FC9 F022 0104 05               		DC.B	FVR,34,1,4,5
00006FCE A6                         		DC.B	DF3
00006FCF =00006FCF                  T814B_0	EQU		*
00006FCF E748 A80C A60C             		DC.B	CMTAB,L1+L2,EF3,L4,DF3,L4
00006FD5 F700 03                    		DC.B	CMREPT,0,3
00006FD8 FFF6                       		JDW		T814B_0
00006FDA E730 A5                    		DC.B	CMTAB,L1,CN3
00006FDD                            		
00006FDD E6F6                       		DC.B	CMVADD,-10
00006FDF E602                       		DC.B	CMVADD,2
00006FE1 =00006FE1                  T814C	EQU		*
00006FE1 EF00                       		DC.B	FEV,0
00006FE3 E0C0                       		DC.B	LRPAN,LRSET
00006FE5                            		
00006FE5 800C BB03 BBBB BB          		DC.B	NL,L4,BF4,L16,BF4,BF4,BF4
00006FEC F002 0106 04B9 06F4 B480+  		DC.B	FVR,2,1,6,4,AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
00006FF9 F1B7 06F4 B280 B703 B7     		DC.B	VRON,GF4,L8,VROFF,DF4,NL,GF4,L16,GF4
00007002 F1B9 06F4 B409 8003 8006   		DC.B	VRON,AF4,L8,VROFF,EF4,L8+3,NL,L8-3,NL,L8
0000700C                            		
0000700C 8006 BB03 03F1 06F4 0303   		DC.B	NL,L8,BF4,L16,L16,VRON,L8,VROFF,L16,L16
00007016 F1B9 06F4 B480 B703 B9     		DC.B	VRON,AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
0000701F B703 80F1 B206 F480 B403+  		DC.B	GF4,L16,NL,VRON,DF4,L8,VROFF,NL,EF4,L16,GF4
0000702A F1B6 06F4 B6B9 F1BB 08F4   		DC.B	VRON,FN4,L8,VROFF,FN4,AF4,VRON,BF4,L8+2,VROFF
00007034                            		
00007034 8004 BB03 0303 03F1 06F4   		DC.B	NL,L8-2,BF4,L16,L16,L16,L16,VRON,L8,VROFF
0000703E B906 F4B4 80B7 03B9        		DC.B	AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
00007046 F1B7 06F4 B280 B703 B7     		DC.B	VRON,GF4,L8,VROFF,DF4,NL,GF4,L16,GF4
0000704F F1B9 06F4 B409 8003 8006   		DC.B	VRON,AF4,L8,VROFF,EF4,L8+3,NL,L8-3,NL,L8
00007059                            		
00007059 8006 BB03 0303 0303 03     		DC.B	NL,L8,BF4,L16,L16,L16,L16,L16,L16
00007062 F1B9 06F4 B480 B703 B9     		DC.B	VRON,AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
0000706B B703 80F1 B206 F480 B703+  		DC.B	GF4,L16,NL,VRON,DF4,L8,VROFF,NL,GF4,L16,GF4
00007076 F1BA 06F4 B609 8003        		DC.B	VRON,AN4,L8,VROFF,FN4,L8+3,NL,L8-3
0000707E                            		
0000707E E6FE                       		DC.B	CMVADD,-2
00007080 =00007080                  T814D	EQU		*
00007080 EF04                       		DC.B	FEV,4
00007082 E0C0                       		DC.B	LRPAN,LRSET
00007084 E60A                       		DC.B	CMVADD,10
00007086 F022 0104 05               		DC.B	FVR,34,1,4,5
0000708B A606                       		DC.B	DF3,L8
0000708D =0000708D                  T814D_0	EQU		*
0000708D E748 A80C A60C             		DC.B	CMTAB,L1+L2,EF3,L4,DF3,L4
00007093 F700 03                    		DC.B	CMREPT,0,3
00007096 FFF6                       		JDW		T814D_0
00007098                            		
00007098 E6F6                       		DC.B	CMVADD,-10
0000709A =0000709A                  T814D2	EQU		*
0000709A EF00                       		DC.B	FEV,0
0000709C E1FE                       		DC.B	FDT,-2
0000709E E040                       		DC.B	LRPAN,RSET
000070A0 F8                         		DC.B	CMCALL
000070A1 FCD8                       		JDW		SUB810D
000070A3 E100                       		DC.B	FDT,0
000070A5                            		
000070A5                            		
000070A5 F6                         		DC.B	CMJUMP
000070A6 FEE4                       		JDW		T8140
000070A8                            		
000070A8                            ;===============================================;
000070A8                            ;					 FM 5ch						;
000070A8                            ;===============================================;
000070A8 =000070A8                  TAB815	EQU		*
000070A8 =000070A8                  T8150	EQU		*
000070A8 EF01                       		DC.B	FEV,1
000070AA F8                         		DC.B	CMCALL
000070AB FBC9                       		JDW		SUB8100
000070AD 80A3                       		DC.B	NL,BF2
000070AF F700 02                    		DC.B	CMREPT,0,2
000070B2 FFF5                       		JDW		T8150
000070B4 =000070B4                  T815A	EQU		*
000070B4 EF05                       		DC.B	FEV,5
000070B6 F8                         		DC.B	CMCALL
000070B7 FBBD                       		JDW		SUB8100
000070B9 80A3                       		DC.B	NL,BF2
000070BB F700 03                    		DC.B	CMREPT,0,3
000070BE FFF5                       		JDW		T815A
000070C0 8006 A306 A303 A3A1 A3     		DC.B	NL,L8,BF2,L8,BF2,L16,BF2,AF2,BF2
000070C9 A506 A580 A303 A5          		DC.B	CN3,L8,CN3,NL,BF2,L16,CN3
000070D0 A606 A680 A503 A6          		DC.B	DF3,L8,DF3,NL,CN3,L16,DF3
000070D7 A506 A180                  		DC.B	CN3,L8,AF2,NL
000070DB =000070DB                  T815B	EQU		*
000070DB EF04                       		DC.B	FEV,4
000070DD E040                       		DC.B	LRPAN,RSET
000070DF E60A                       		DC.B	CMVADD,10
000070E1 F024 0104 05               		DC.B	FVR,36,1,4,5
000070E6 AB                         		DC.B	GF3
000070E7 =000070E7                  T815B_0	EQU		*
000070E7 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
000070ED F700 03                    		DC.B	CMREPT,0,3
000070F0 FFF6                       		JDW		T815B_0
000070F2 E730 AA                    		DC.B	CMTAB,L1,FN3
000070F5 =000070F5                  T815C	EQU		*
000070F5 =000070F5                  T815C_0	EQU		*
000070F5 EF00                       		DC.B	FEV,0
000070F7 E6F6                       		DC.B	CMVADD,-10
000070F9 F8                         		DC.B	CMCALL
000070FA FBFD                       		JDW		SUB810C
000070FC E60A                       		DC.B	CMVADD,10
000070FE =000070FE                  T815D	EQU		*
000070FE EF04                       		DC.B	FEV,4
00007100 F024 0104 05               		DC.B	FVR,36,1,4,5
00007105 AB06                       		DC.B	GF3,L8
00007107 =00007107                  T815D_0	EQU		*
00007107 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
0000710D F700 03                    		DC.B	CMREPT,0,3
00007110 FFF6                       		JDW		T815D_0
00007112                            		
00007112 E6F6                       		DC.B	CMVADD,-10
00007114 =00007114                  T815D2	EQU		*
00007114 EF06                       		DC.B	FEV,6
00007116 E6F8                       		DC.B	CMVADD,-8
00007118 E0C0                       		DC.B	LRPAN,LRSET
0000711A 8018 8106 1E               		DC.B	NL,L2,081H,L8,LF4+L4
0000711F 1806 06                    		DC.B	L2,L8,L8
00007122 E608                       		DC.B	CMVADD,8
00007124                            		
00007124                            		
00007124 F6                         		DC.B	CMJUMP
00007125 FF82                       		JDW		T8150
00007127                            		
00007127                            		
00007127                            ;===============================================;
00007127                            ;					 PSG 80ch					;
00007127                            ;===============================================;
00007127 =00007127                  TAB818	EQU		*
00007127 =00007127                  T8180	EQU		*
00007127 8060 80                    		DC.B	NL,L1+L1,NL
0000712A =0000712A                  T818A	EQU		*
0000712A F001 0102 04               		DC.B	FVR,1,1,2,4
0000712F 8018                       		DC.B	NL,L2
00007131 B406 B480 80               		DC.B	EF4,L8,EF4,NL,NL
00007136 B6B6 8080                  		DC.B	FN4,FN4,NL,NL
0000713A B4B4 80B2                  		DC.B	EF4,EF4,NL,DF4
0000713E F700 03                    		DC.B	CMREPT,0,3
00007141 FFE8                       		JDW		T818A
00007143 8018                       		DC.B	NL,L2
00007145 B406 B480 80               		DC.B	EF4,L8,EF4,NL,NL
0000714A B6B6 8080                  		DC.B	FN4,FN4,NL,NL
0000714E B4B4 80                    		DC.B	EF4,EF4,NL
00007151 =00007151                  T818B	EQU		*
00007151 AF                         		DC.B	BF3
00007152 =00007152                  T818B0	EQU		*
00007152 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
00007158 F700 03                    		DC.B	CMREPT,0,3
0000715B FFF6                       		JDW		T818B0
0000715D E730 AE                    		DC.B	CMTAB,L1,AN3
00007160 =00007160                  T818C	EQU		*
00007160 F008 0103 04               		DC.B	FVR,8,1,3,4
00007165 ECFE                       		DC.B	PVADD,-2
00007167 B218 B1AF B112             		DC.B	DF4,L2,CN4,BF3,CN4,LF4
0000716D B21E B118 AFAE 12          		DC.B	DF4,L8+L2,CN4,L2,BF3,AN3,LF4
00007174 B21E B118 AFB1 12          		DC.B	DF4,L8+L2,CN4,L2,BF3,CN4,LF4
0000717B B21E B118 AFAE 12          		DC.B	DF4,L8+L2,CN4,L2,BF3,AN3,LF4
00007182 EC02                       		DC.B	PVADD,2
00007184                            		
00007184 =00007184                  T810PD	EQU		*
00007184 AF06                       		DC.B	BF3,L8
00007186 =00007186                  T810PD0	EQU		*
00007186 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
0000718C F700 03                    		DC.B	CMREPT,0,3
0000718F FFF6                       		JDW		T810PD0
00007191 8060                       		DC.B	NL,L1+L1
00007193                            		
00007193 F6                         		DC.B	CMJUMP
00007194 FF92                       		JDW		T8180
00007196                            		
00007196                            ;===============================================;
00007196                            ;					 PSG A0ch					;
00007196                            ;===============================================;
00007196 =00007196                  TAB81A	EQU		*
00007196 =00007196                  T81A0	EQU		*
00007196 8060 80                    		DC.B	NL,L1+L1,NL
00007199 =00007199                  T81AA	EQU		*
00007199 F001 0102 04               		DC.B	FVR,1,1,2,4
0000719E 8018                       		DC.B	NL,L2
000071A0 B106 B180 80               		DC.B	CN4,L8,CN4,NL,NL
000071A5 B2B2 8080                  		DC.B	DF4,DF4,NL,NL
000071A9 B1B1 80A6                  		DC.B	CN4,CN4,NL,DF3
000071AD F700 03                    		DC.B	CMREPT,0,3
000071B0 FFE8                       		JDW		T81AA
000071B2 8018                       		DC.B	NL,L2
000071B4 B106 B180 80               		DC.B	CN4,L8,CN4,NL,NL
000071B9 B2B2 8080                  		DC.B	DF4,DF4,NL,NL
000071BD B1B1 80                    		DC.B	CN4,CN4,NL
000071C0 =000071C0                  T81AB	EQU		*
000071C0 AB                         		DC.B	GF3
000071C1 =000071C1                  T81AB0	EQU		*
000071C1 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
000071C7 F700 03                    		DC.B	CMREPT,0,3
000071CA FFF6                       		JDW		T81AB0
000071CC E730 AA                    		DC.B	CMTAB,L1,FN3
000071CF =000071CF                  T81AC	EQU		*
000071CF F008 0103 04               		DC.B	FVR,8,1,3,4
000071D4 AF18 ADAB AD12             		DC.B	BF3,L2,AF3,GF3,AF3,LF4
000071DA AF1E AD18 ABAA 12          		DC.B	BF3,L8+L2,AF3,L2,GF3,FN3,LF4
000071E1 AF1E AD18 ABAD 12          		DC.B	BF3,L8+L2,AF3,L2,GF3,AF3,LF4
000071E8 AF1E AD18 ABAA 12          		DC.B	BF3,L8+L2,AF3,L2,GF3,FN3,LF4
000071EF =000071EF                  T81AD	EQU		*
000071EF F001 0102 04               		DC.B	FVR,1,1,2,4
000071F4 AB06                       		DC.B	GF3,L8
000071F6 =000071F6                  T81AD0	EQU		*
000071F6 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
000071FC F700 03                    		DC.B	CMREPT,0,3
000071FF FFF6                       		JDW		T81AD0
00007201 8060                       		DC.B	NL,L1+L1
00007203                            		
00007203 F6                         		DC.B	CMJUMP
00007204 FF91                       		JDW		T81A0
00007206                            ;===============================================;
00007206                            ;					 PSG C0ch					;
00007206                            ;===============================================;
00007206 =00007206                  TAB81C	EQU		*
00007206 F3E7                       		DC.B	CMNOIS,NOIS7
00007208 =00007208                  T81C00	EQU		*
00007208 E802                       		DC.B	CMGATE,2
0000720A 8006 C6EC FEE8 0A06 EC02+  		DC.B	NL,L8,0C6H,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
00007217 =00007217                  T81C00_0		EQU		*
00007217 C606 06EC FEE8 0A06 EC02+  		DC.B	0C6H,L8,L8,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
00007224 F700 02                    		DC.B	CMREPT,0,2
00007227 FFEF                       		JDW		T81C00_0
00007229 C606 06E8 0A06 ECFE E800+  		DC.B	0C6H,L8,L8,CMGATE,10,L8,PVADD,-2,CMGATE,OFF,L8,PVADD,2
00007236 =00007236                  T81C0	EQU		*
00007236 =00007236                  T81CA	EQU		*
00007236 F8                         		DC.B	CMCALL
00007237 0000                       		JDW		SUB81C0
00007239 F702 04                    		DC.B	CMREPT,2,4
0000723C FFF9                       		JDW		T81C0
0000723E F8                         		DC.B	CMCALL
0000723F 0000                       		JDW		SUB81C1
00007241 =00007241                  T81CB	EQU		*
00007241 =00007241                  T81CC	EQU		*
00007241 F8                         		DC.B	CMCALL
00007242 0000                       		JDW		SUB81C0
00007244 F702 08                    		DC.B	CMREPT,2,8
00007247 FFF9                       		JDW		T81CB
00007249 =00007249                  T81CD	EQU		*
00007249 F8                         		DC.B	CMCALL
0000724A 0000                       		JDW		SUB81C0
0000724C F702 02                    		DC.B	CMREPT,2,2
0000724F FFF9                       		JDW		T81CD
00007251 F8                         		DC.B	CMCALL
00007252 0000                       		JDW		SUB81C1
00007254 =00007254                  T81CD2	EQU		*
00007254 EC02 E802 0606 ECFD E80A+  		DC.B	PVADD,2,CMGATE,2,L8,L8,PVADD,-3,CMGATE,10,L8,PVADD,3,CMGATE,2,L8
00007264 ECFD E80A 0606 06EC 03E8+  		DC.B	PVADD,-3,CMGATE,10,L8,L8,L8,PVADD,3,CMGATE,2,L8
00007270 0606 ECFD E80A 06EC 03E8+  		DC.B	L8,L8,PVADD,-3,CMGATE,10,L8,PVADD,3,CMGATE,2,L8
0000727C 0606 ECFE E80A 0606        		DC.B	L8,L8,PVADD,-2,CMGATE,10,L8,L8
00007284                            		
00007284                            		
00007284 F8                         		DC.B	CMCALL
00007285 0000                       		JDW		SUB81C0
00007287                            		
00007287                            		
00007287 F6                         		DC.B	CMJUMP
00007288 FFAD                       		JDW		T81C0
0000728A                            		
0000728A =0000728A                  SUB81C0	EQU		*
0000728A E802                       		DC.B	CMGATE,2
0000728C =0000728C                  SUB81C0_0		EQU		*
0000728C C606 06EC FEE8 0A06 EC02+  		DC.B	0C6H,L8,L8,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
00007299 F700 03                    		DC.B	CMREPT,0,3
0000729C FFEF                       		JDW		SUB81C0_0
0000729E C606 06E8 0A06 ECFE E800+  		DC.B	0C6H,L8,L8,CMGATE,10,L8,PVADD,-2,CMGATE,OFF,L8,PVADD,2
000072AB E3                         		DC.B	CMRET
000072AC =000072AC                  SUB81C1	EQU		*
000072AC E802                       		DC.B	CMGATE,2
000072AE =000072AE                  SUB81C1_0		EQU		*
000072AE C606 06EC FEE8 0A06 EC02+  		DC.B	0C6H,L8,L8,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
000072BB F700 04                    		DC.B	CMREPT,0,4
000072BE FFEF                       		JDW		SUB81C1_0
000072C0 E3                         		DC.B	CMRET
000072C1                            ;===============================================;
000072C1                            ;					 PCM DRUM					;
000072C1                            ;===============================================;
000072C1 =000072C1                  TAB81D	EQU		*
000072C1 =000072C1                  T81D0	EQU		*
000072C1 =000072C1                  T81DA	EQU		*
000072C1 F8                         		DC.B	CMCALL
000072C2 0000                       		JDW		SUB81D0
000072C4 F700 05                    		DC.B	CMREPT,0,5
000072C7 FFF9                       		JDW		T81D0
000072C9                            		
000072C9 F8                         		DC.B	CMCALL
000072CA 0000                       		JDW		SUB81D1
000072CC                            		
000072CC =000072CC                  T81DB	EQU		*
000072CC =000072CC                  T81DC	EQU		*
000072CC F8                         		DC.B	CMCALL
000072CD 0000                       		JDW		SUB81D0
000072CF F700 07                    		DC.B	CMREPT,0,7
000072D2 FFF9                       		JDW		T81DB
000072D4                            		
000072D4 F8                         		DC.B	CMCALL
000072D5 0000                       		JDW		SUB81D1
000072D7                            		
000072D7 =000072D7                  T81DD	EQU		*
000072D7 F8                         		DC.B	CMCALL
000072D8 0000                       		JDW		SUB81D0
000072DA F700 02                    		DC.B	CMREPT,0,2
000072DD FFF9                       		JDW		T81DD
000072DF                            		
000072DF F8                         		DC.B	CMCALL
000072E0 0000                       		JDW		SUB81D1
000072E2                            		
000072E2 =000072E2                  T81DD2	EQU		*
000072E2 8106 8082 8082 8282 80     		DC.B	B,L8,NL,S,NL,S,S,S,NL
000072EB 8080 8280 8080 8280        		DC.B	NL,NL,S,NL,NL,NL,S,NL
000072F3                            		
000072F3 F6                         		DC.B	CMJUMP
000072F4 FFCC                       		JDW		T81D0
000072F6                            		
000072F6 =000072F6                  SUB81D0	EQU		*
000072F6 8006 8182 8181 8182 81     		DC.B	NL,L8,B,S,B,B,B,S,B
000072FF 8181 8281 8181 8280        		DC.B	B,B,S,B,B,B,S,NL
00007307 E3                         		DC.B	CMRET
00007308 =00007308                  SUB81D1	EQU		*
00007308 8181 8281                  		DC.B	B,B,S,B
0000730C F700 04                    		DC.B	CMREPT,0,4
0000730F FFF8                       		JDW		SUB81D1
00007311 E3                         		DC.B	CMRET
00007312                            		
00007312                            ;===============================================;
00007312                            ;												;
00007312                            ;					  VOICE						;
00007312                            ;												;
00007312                            ;===============================================;
00007312 =00007312                  TIMB81	EQU		*
00007312                            ;===================< FEV00 >===================;
00007312 3D                         		CNF		5,7
00007313 0101 0101                  		MD		1,0,1,0,1,0,1,0
00007317 8E52 144C                  		RSAR	2,14,1,18,0,20,1,12
0000731B 0808 0E03                  		D1R		8,8,14,3
0000731F 0000 0000                  		D2R		0,0,0,0
00007323 1F1F 1F1F                  		RRL		15,1,15,1,15,1,15,1
0000732B                            ;===================< FEV01 >===================;
0000732B 02                         		CNF		2,0
0000732C 0000 0000                  		MD		0,0,0,0,0,0,0,0
00007330 5C54 1CD0                  		RSAR	1,28,1,20,0,28,3,16
00007334 0C08 0A05                  		D1R		12,8,10,5
00007338 0000 0000                  		D2R		0,0,0,0
0000733C FFFF FFFF                  		RRL		15,15,15,15,15,15,15,15
00007344                            ;===================< FEV02 >===================;
00007344 39                         		CNF		1,7
00007345 0151 0000                  		MD		1,0,1,5,0,0,0,0
00007349 1F5F 5F5F                  		RSAR	0,31,1,31,1,31,1,31
0000734D 1011 0909                  		D1R		16,17,9,9
00007351 0700 0000                  		D2R		7,0,0,0
00007355 CFFF FFFF                  		RRL		15,12,15,15,15,15,15,15
0000735D                            ;===================< FEV03 >===================;
0000735D 2C                         		CNF		4,5
0000735E 6103 0133                  		MD		1,6,3,0,1,0,3,3
00007362 5F94 5F94                  		RSAR	1,31,2,20,1,31,2,20
00007366 0505 0507                  		D1R		5,5,5,7
0000736A 0202 0202                  		D2R		2,2,2,2
0000736E 1F6F 1FAF                  		RRL		15,1,15,6,15,1,15,10
00007376                            ;===================< FEV04 >===================;
00007376 3D                         		CNF		5,7
00007377 0102 0202                  		MD		1,0,2,0,2,0,2,0
0000737B 1F08 8A0A                  		RSAR	0,31,0,8,2,10,0,10
0000737F 0808 0808                  		D1R		8,8,8,8
00007383 0001 0000                  		D2R		0,1,0,0
00007387 0F1F 1F1F                  		RRL		15,0,15,1,15,1,15,1
0000738F                            ;===================< FEV05 >===================;
0000738F 3B                         		CNF		3,7
00007390 0301 3001                  		MD		3,0,1,0,0,3,1,0
00007394 1CDC DC5E                  		RSAR	0,28,3,28,3,28,1,30
00007398 1413 0F0C                  		D1R		20,19,15,12
0000739C 0C05 0A07                  		D2R		12,5,10,7
000073A0 AFAF 5F6F                  		RRL		15,10,15,10,15,5,15,6
000073A8                            ;===================< FEV06 >===================;
000073A8 3D                         		CNF		5,7
000073A9 0801 0101                  		MD		8,0,1,0,1,0,1,0
000073AD 1F1F 1F1F                  		RSAR	0,31,0,31,0,31,0,31
000073B1 1919 1911                  		D1R		19H,19H,25,17
000073B5 0511 000F                  		D2R		5,11H,0,15
000073B9 0F7F FFFF                  		RRL		15,0,15,7,15,15,15,15
000073C1                            
000073C1                            ; vim: set ft=asm68k sw=4 ts=4 noet:
000073C1                            ; vim: set ft=asm68k sw=4 ts=4 noet:
000073C2 00                         		even
000073C2                            
000073C2                            ; ---------------------------------------------------------------------------
000073C2                            ; Sound	effect pointers
000073C2                            ; ---------------------------------------------------------------------------
000073C2                            SoundIndex:
000073C2 0000 0000                  ptr_sndA0:	dc.l SA0
000073C6 0000 0000                  ptr_sndA1:	dc.l SA1
000073CA 0000 0000                  ptr_sndA2:	dc.l SA2
000073CE 0000 0000                  ptr_sndA3:	dc.l SA3
000073D2 0000 0000                  ptr_sndA4:	dc.l SA4
000073D6 0000 0000                  ptr_sndA5:	dc.l SA5
000073DA 0000 0000                  ptr_sndA6:	dc.l SA6
000073DE 0000 0000                  ptr_sndA7:	dc.l SA7
000073E2 0000 0000                  ptr_sndA8:	dc.l SA8
000073E6 0000 0000                  ptr_sndA9:	dc.l SA9
000073EA 0000 0000                  ptr_sndAA:	dc.l SAA
000073EE 0000 0000                  ptr_sndAB:	dc.l SAB
000073F2 0000 0000                  ptr_sndAC:	dc.l SAC
000073F6 0000 0000                  ptr_sndAD:	dc.l SAD
000073FA 0000 0000                  ptr_sndAE:	dc.l SAE
000073FE 0000 0000                  ptr_sndAF:	dc.l SAF
00007402                            
00007402                            ptr_sndend
00007402                            
00007402                            ; ---------------------------------------------------------------------------
00007402                            ; Special sound effect pointers
00007402                            ; ---------------------------------------------------------------------------
00007402                            SpecSoundIndex:
00007402                            ptr_specend
00007402                            
00007402                            ; ---------------------------------------------------------------------------
00007402                            ; Sound effect data
00007402                            ; ---------------------------------------------------------------------------
00007402                            		include	"sound/se1.s"
00007402                            ;=======================================================;
00007402                            ;			*$$SE1.S  (S.E. Data)						;
00007402                            ;						ORG. MDSE111.S					;
00007402                            ;				'Sound-Source'							;
00007402                            ;				 for Mega Drive (68K)					;
00007402                            ;						Ver  1.1 / 1990.9.1				;
00007402                            ;									  By  H.Kubota		;
00007402                            ;=======================================================;
00007402                            
00007402                            
00007402                            ;		list off
00007402                            ;		include mdEQ11.LIB
00007402                            ;		include mdMCR11.LIB
00007402                            ;		include mdTB11.LIB
00007402                            ;		list on
00007402                            
00007402                            ;		PUBLIC	SA0,SA1,SA2,SA3,SA4,SA5,SA6,SA7
00007402                            ;		PUBLIC	SA8,SA9,SAA,SAB,SAC,SAD,SAE,SAF
00007402                            
00007402                            		even
00007402                            
00007402                            ;=======================================;
00007402                            ;				   SA0					;
00007402                            ;=======================================;
00007402                            SA0:
00007402                            
00007402 0000                       		TDW		TIMBA0,SA0				; Voice Top Address
00007404 0202                       		DC.B	2,2						; Base,Use Channel Total
00007406                            
00007406 8080                       		DC.B	80H,080H				; Flag,Channel
00007408 0000                       		TDW		TABA00,SA0				; FM 1ch Table Pointer
0000740A F400                       		DC.B	-12,000H				; Bias,Volm
0000740C                            		
0000740C 80A0                       		DC.B	80H,0A0H				; Flag,Channel
0000740E 0000                       		TDW		TABA01,SA0				; FM 1ch Table Pointer
00007410 F400                       		DC.B	-12,000H				; Bias,Volm
00007412                            
00007412                            ;------------< Table Data >-------------;
00007412 =00007412                  TABA00	EQU		*
00007412 F503                       		DC.B	EV,3
00007414 B901 BEC3                  		DC.B	GS4,1,CS5,FS5
00007418 EC04                       		DC.B	PVADD,4
0000741A BEC3                       		DC.B	CS5,FS5
0000741C EC04                       		DC.B	PVADD,4
0000741E BEC3                       		DC.B	CS5,FS5
00007420 F2                         		DC.B	SFEND
00007421                            
00007421 =00007421                  TABA01	EQU		*
00007421 F503                       		DC.B	EV,3
00007423 8002                       		DC.B	NL,2
00007425 EC04                       		DC.B	PVADD,4
00007427 B901 80                    		DC.B	GS4,1,NL
0000742A EC04                       		DC.B	PVADD,4
0000742C B980                       		DC.B	GS4,NL
0000742E F2                         		DC.B	SFEND
0000742F                            
0000742F                            ;------------< Voice Data >-------------;
0000742F =0000742F                  TIMBA0	EQU		*
0000742F                            
00007430 00                         		even
00007430                            
00007430                            ;=======================================;
00007430                            ;				   SA1					;
00007430                            ;=======================================;
00007430                            SA1:
00007430 0000                       		TDW		TIMBA1,SA1				; Voice Top Address
00007432 0101                       		DC.B	1,1						; Base,Use Channel Total
00007434                            
00007434 8080                       		DC.B	80H,080H				; Flag,Channel
00007436 0000                       		TDW		TABA10,SA1				; FM 1ch Table Pointer
00007438 F400                       		DC.B	-12,000H				; Bias,Volm
0000743A                            
0000743A                            ;------------< Table Data >-------------;
0000743A =0000743A                  TABA10	EQU		*
0000743A F503                       		DC.B	EV,3
0000743C BC01                       		DC.B	BN4,1
0000743E F2                         		DC.B	SFEND
0000743F                            
0000743F                            ;------------< Voice Data >-------------;
0000743F =0000743F                  TIMBA1	EQU		*
0000743F                            
00007440 00                         		even
00007440                            
00007440                            ;=======================================;
00007440                            ;				   SA2					;
00007440                            ;=======================================;
00007440                            SA2:
00007440 0000                       		TDW		TIMBA2,SA2				; Voice Top Address
00007442 0101                       		DC.B	1,1						; Base,Use Channel Total
00007444                            
00007444 8005                       		DC.B	80H,5					; Flag,Channel
00007446 0000                       		TDW		TABA20,SA2				; FM 1ch Table Pointer
00007448 0000                       		DC.B	00H,000H				; Bias,Volm
0000744A                            
0000744A                            ;------------< Table Data >-------------;
0000744A =0000744A                  TABA20	EQU		*
0000744A EF00                       		DC.B	FEV,0
0000744C BC01                       		DC.B	BN4,1
0000744E F2                         		DC.B	SFEND
0000744F                            
0000744F                            ;------------< Voice Data >-------------;
0000744F =0000744F                  TIMBA2	EQU		*
0000744F                            	smpsVcAlgorithm     $02
0000744F                            	smpsVcFeedback      $00
0000744F                            	smpsVcUnusedBits    $00
0000744F                            	smpsVcDetune        $00, $00, $00, $00
0000744F                            	smpsVcCoarseFreq    $02, $00, $00, $00
0000744F                            	smpsVcRateScale     $00, $00, $00, $00
0000744F                            	smpsVcAttackRate    $1F, $00, $00, $10
0000744F                            	smpsVcAmpMod        $00, $00, $00, $00
0000744F                            	smpsVcDecayRate1    $1F, $00, $00, $00
0000744F                            	smpsVcDecayRate2    $04, $00, $00, $03
0000744F                            	smpsVcDecayLevel    $00, $00, $00, $00
0000744F                            	smpsVcReleaseRate   $09, $00, $00, $02
0000744F 0200 0000 0210 0000 1F00+  	smpsVcTotalLevel    $00, $7F, $7F, $5D
00007468                            
00007468                            		even
00007468                            
00007468                            ;=======================================;
00007468                            ;				   SA3					;
00007468                            ;=======================================;
00007468                            SA3:
00007468 0000                       		TDW		TIMBA3,SA3				; Voice Top Address
0000746A 0101                       		DC.B	1,1						; Base,Use Channel Total
0000746C                            
0000746C 8005                       		DC.B	80H,005H				; Flag,Channel
0000746E 0000                       		TDW		TABA30,SA3				; FM 1ch Table Pointer
00007470 2402                       		DC.B	24H,002H				; Bias,Volm
00007472                            
00007472                            ;------------< Table Data >-------------;
00007472 =00007472                  TABA30	EQU		*
00007472 EF00                       		DC.B	FEV,0
00007474 F068 30                    		DC.B	LFO,68H,30H
00007477 =00007477                  TABA31	EQU		*
00007477 F001 02F8 FF               		DC.B	FVR,1,2,0F8H,0FFH
0000747C AD2A                       		DC.B	0ADH,2AH
0000747E EE                         		DC.B	CMEND
0000747F                            
0000747F                            ;------------< Voice Data >-------------;
0000747F =0000747F                  TIMBA3	EQU		*
0000747F 3C                         		CNF		4,7
00007480 0201 0201                  		MD		2,0,1,0,2,0,1,0
00007484 1F0B 1F0B                  		RSAR	0,31,0,0BH,0,31,0,0BH
00007488 0008 0008                  		D1R		0,8,0,8
0000748C 010E 010E                  		D2R		1,0EH,1,0EH
00007490 0F1F 0F1F                  		RRL		15,0,15,1,15,0,15,1
00007498                            
00007498                            		even
00007498                            
00007498                            ;=======================================;
00007498                            ;				   SA4					;
00007498                            ;=======================================;
00007498                            SA4:
00007498 0000                       		TDW		TIMBA4,SA4				; Voice Top Address
0000749A 0101                       		DC.B	1,1						; Base,Use Channel Total
0000749C                            
0000749C 8005                       		DC.B	80H,5					; Flag,Channel
0000749E 0000                       		TDW		TABA40,SA4				; FM 1ch Table Pointer
000074A0 F400                       		DC.B	0F4H,000H				; Bias,Volm
000074A2                            
000074A2                            ;------------< Table Data >-------------;
000074A2 =000074A2                  TABA40	EQU		*
000074A2 EF00                       		DC.B	FEV,0
000074A4 =000074A4                  TA40	EQU		*
000074A4 A060                       		DC.B	0A0H,60h
000074A6 EE                         		DC.B	CMEND
000074A7                            
000074A7                            ;------------< Voice Data >-------------;
000074A7 =000074A7                  TIMBA4	EQU		*
000074A7 3B                         		CNF		3,7
000074A8 5231 5151                  		MD		2,5,1,3,1,5,1,5
000074AC 0C0C 1212                  		RSAR	0,0CH,0,0CH,0,12H,0,12H
000074B0 0E00 0E0C                  		D1R		0EH,0,0EH,0CH
000074B4 0000 000E                  		D2R		0,0,0,0EH
000074B8 4F0F 5F3F                  		RRL		15,4,15,0,15,5,15,3
000074C0                            
000074C0                            		even
000074C0                            
000074C0                            ;=======================================;
000074C0                            ;				   SA5					;
000074C0                            ;=======================================;
000074C0                            SA5:
000074C0 0000                       		TDW		TIMBA5,SA5				; Voice Top Address
000074C2 0102                       		DC.B	1,2						; Base,Use Channel Total
000074C4                            
000074C4 80A0                       		DC.B	80H,0A0H				; Flag,Channel
000074C6 0000                       		TDW		TABA50,SA5				; FM 1ch Table Pointer
000074C8 F400                       		DC.B	0F4H,000H				; Bias,Volm
000074CA                            
000074CA 80C0                       		DC.B	80H,0C0H				; Flag,Channel
000074CC 0000                       		TDW		TABA51,SA5				; FM 1ch Table Pointer
000074CE F400                       		DC.B	0F4H,000H				; Bias,Volm
000074D0                            
000074D0                            ;------------< Table Data >-------------;
000074D0 =000074D0                  TABA50	EQU		*
000074D0 F501                       		DC.B	EV,1
000074D2 F001 0150 17               		DC.B	FVR,1,1,50H,17H
000074D7 9B0A                       		DC.B	09BH,0Ah
000074D9 =000074D9                  TA50	EQU		*
000074D9 A304 EC02                  		DC.B	0A3H,4,PVADD,2
000074DD F700 06                    		DC.B	CMREPT,0,6
000074E0 FFF8                       		JDW		TA50
000074E2 EE                         		DC.B	CMEND
000074E3 =000074E3                  TABA51	EQU		*
000074E3 F501                       		DC.B	EV,1
000074E5 F002 0120 10F3 E7          		DC.B	FVR,2,1,20H,10H,CMNOIS,NOIS7
000074EC C40A                       		DC.B	0C4H,0AH
000074EE =000074EE                  TA51	EQU		*
000074EE C202 EC01                  		DC.B	0C2H,02H,PVADD,1
000074F2 F700 0C                    		DC.B	CMREPT,0,12
000074F5 FFF8                       		JDW		TA51
000074F7 EE                         		DC.B	CMEND
000074F8                            
000074F8                            ;------------< Voice Data >-------------;
000074F8 =000074F8                  TIMBA5	EQU		*
000074F8 38                         		CNF		0,7
000074F9 0F0F 0F0F                  		MD		15,0,15,0,15,0,15,0
000074FD 1F1F 1F0E                  		RSAR	0,31,0,31,0,31,0,14
00007501 0000 000A                  		D1R		0,0,0,10
00007505 0000 0019                  		D2R		0,0,0,25
00007509 0F0F 0F1F                  		RRL		15,0,15,0,15,0,15,1
00007511                            
00007512 00                         		even
00007512                            
00007512                            ;=======================================;
00007512                            ;				   SA6					;
00007512                            ;=======================================;
00007512                            SA6:
00007512 0000                       		TDW		TIMBA6,SA6				; Voice Top Address
00007514 0101                       		DC.B	1,1						; Base,Use Channel Total
00007516                            
00007516 8005                       		DC.B	80H,5					; Flag,Channel
00007518 0000                       		TDW		TABA60,SA6				; FM 1ch Table Pointer
0000751A 0004                       		DC.B	00H,004H				; Bias,Volm
0000751C                            
0000751C                            ;------------< Table Data >-------------;
0000751C =0000751C                  TABA60	EQU		*
0000751C EF00                       		DC.B	FEV,0
0000751E =0000751E                  TBA6	EQU		*
0000751E A00E                       		DC.B	0A0h,14
00007520 EE                         		DC.B	CMEND
00007521                            
00007521                            ;------------< Voice Data >-------------;
00007521 =00007521                  TIMBA6	EQU		*
00007521 28                         		CNF		0,5
00007522 0370 3100                  		MD		3,0,0,7,1,3,0,0
00007526 1F1F 5F5F                  		RSAR	0,31,0,31,1,31,1,31
0000752A 0303 0302                  		D1R		3,3,3,2
0000752E 0102 0203                  		D2R		1,2,2,3
00007532 AF2F 2F5F                  		RRL		15,10,15,2,15,2,15,5
0000753A                            
0000753A                            		even
0000753A                            
0000753A                            ;=======================================;
0000753A                            ;				   SA7					;
0000753A                            ;=======================================;
0000753A                            SA7:
0000753A 0000                       		TDW		TIMBA7,SA7				; Voice Top Address
0000753C 0101                       		DC.B	1,1						; Base,Use Channel Total
0000753E                            
0000753E 80C0                       		DC.B	80H,0C0H				; Flag,Channel
00007540 0000                       		TDW		TABA70,SA7				; FM 1ch Table Pointer
00007542 0000                       		DC.B	00H,000H				; Bias,Volm
00007544                            
00007544                            ;------------< Table Data >-------------;
00007544 =00007544                  TABA70	EQU		*
00007544 F3E7                       		DC.B	CMNOIS,NOIS7
00007546 F001 0107 02               		DC.B	FVR,1,1,7,2
0000754B FF00 01                    		DC.B	EXCOM,S_PSE,ON
0000754E =0000754E                  TA70	EQU		*
0000754E A004 E901 F700 20          		DC.B	0A0H,4,CMBIAS,1,CMREPT,0,20H
00007555 FFF8                       		JDW		TA70
00007557 14                         		DC.B	20
00007558 FF00 00                    		DC.B	EXCOM,S_PSE,OFF
0000755B EE                         		DC.B	CMEND
0000755C                            
0000755C                            ;------------< Voice Data >-------------;
0000755C =0000755C                  TIMBA7	EQU		*
0000755C                            
0000755C                            		even
0000755C                            
0000755C                            ;=======================================;
0000755C                            ;				   SA8					;
0000755C                            ;=======================================;
0000755C                            SA8:
0000755C 0000                       		TDW		TIMBA8,SA8				; Voice Top Address
0000755E 0102                       		DC.B	1,2						; Base,Use Channel Total
00007560                            
00007560 8004                       		DC.B	80H,4					; Flag,Channel
00007562 0000                       		TDW		TABA81,SA8				; FM 1ch Table Pointer
00007564 F208                       		DC.B	0F2H,008H				; Bias,Volm
00007566                            
00007566 8005                       		DC.B	80H,5					; Flag,Channel
00007568 0000                       		TDW		TABA80,SA8				; FM 1ch Table Pointer
0000756A F208                       		DC.B	0F2H,008H				; Bias,Volm
0000756C                            
0000756C                            ;------------< Table Data >-------------;
0000756C =0000756C                  TABA80	EQU		*
0000756C EF00                       		DC.B	FEV,0
0000756E F6                         		DC.B	CMJUMP
0000756F 0000                       		JDW		TA80
00007571 =00007571                  TABA81	EQU		*
00007571 EF00                       		DC.B	FEV,0
00007573 =00007573                  TA80	EQU		*
00007573 B002 E7AE 01E7 E9FF        		DC.B	0B0H,2,CMTAB,0AEh,1,CMTAB,CMBIAS,-1
0000757B F700 20                    		DC.B	CMREPT,0,20H
0000757E FFF4                       		JDW		TA80
00007580 E920                       		DC.B	CMBIAS,20H
00007582 =00007582                  TA81	EQU		*
00007582 9002 8001                  		DC.B	090H,2,NL,1
00007586 F700 05                    		DC.B	CMREPT,0,5
00007589 FFF8                       		JDW		TA81
0000758B EE                         		DC.B	CMEND
0000758C                            
0000758C                            ;------------< Voice Data >-------------;
0000758C =0000758C                  TIMBA8	EQU		*
0000758C                            ;-----------< Voice Data 0 >------------;
0000758C 3B                         		CNF		3,7
0000758D 3C39 3031                  		MD		12,3,9,3,0,3,1,3
00007591 DF1F 1FDF                  		RSAR	3,31,0,31,0,31,3,31
00007595 0405 0401                  		D1R		4,5,4,1
00007599 0404 0402                  		D2R		4,4,4,2
0000759D FF0F 1FAF                  		RRL		15,15,15,0,15,1,15,10
000075A5                            ;-----------< Voice Data 1 >------------;
000075A5 3D                         		CNF		5,7
000075A6 0102 0001                  		MD		1,0,2,0,0,0,1,0
000075AA 1F0E 0E0E                  		RSAR	0,31,0,14,0,14,0,14
000075AE 071F 1F1F                  		D1R		7,31,31,31
000075B2 0000 0000                  		D2R		0,0,0,0
000075B6 1F0F 0F0F                  		RRL		15,1,15,0,15,0,15,0
000075BE                            
000075BE                            		even
000075BE                            
000075BE                            ;=======================================;
000075BE                            ;				   SA9					;
000075BE                            ;=======================================;
000075BE                            SA9:
000075BE 0000                       		TDW		TIMBA9,SA9				; Voice Top Address
000075C0 0101                       		DC.B	1,1						; Base,Use Channel Total
000075C2                            
000075C2 8005                       		DC.B	80H,5					; Flag,Channel
000075C4 0000                       		TDW		TABA90,SA9				; FM 1ch Table Pointer
000075C6 0006                       		DC.B	00H,006H				; Bias,Volm
000075C8                            
000075C8                            ;------------< Table Data >-------------;
000075C8 =000075C8                  TABA90	EQU		*
000075C8 EF00                       		DC.B	FEV,0
000075CA 8001                       		DC.B	NL,1
000075CC F000 01D0 FF               		DC.B	FVR,0,1,0D0H,0FFH
000075D1 C50F                       		DC.B	0C5H,0FH
000075D3 EE                         		DC.B	CMEND
000075D4                            
000075D4                            ;------------< Voice Data >-------------;
000075D4 =000075D4                  TIMBA9	EQU		*
000075D4 38                         		CNF		0,7
000075D5 0F0F 0F0F                  		MD		15,0,15,0,15,0,15,0
000075D9 1F1F 1F0E                  		RSAR	0,31,0,31,0,31,0,14
000075DD 0000 0011                  		D1R		0,0,0,11H
000075E1 0000 0013                  		D2R		0,0,0,13H
000075E5 0F0F 0F1F                  		RRL		15,0,15,0,15,0,15,1
000075ED                            
000075EE 00                         		even
000075EE                            
000075EE                            ;=======================================;
000075EE                            ;				   SAA					;
000075EE                            ;=======================================;
000075EE                            SAA:
000075EE 0000                       		TDW		TIMBAA,SAA				; Voice Top Address
000075F0 0101                       		DC.B	1,1						; Base,Use Channel Total
000075F2                            
000075F2 80C0                       		DC.B	80H,0C0H				; Flag,Channel
000075F4 0000                       		TDW		TABAA0,SAA				; FM 1ch Table Pointer
000075F6 0001                       		DC.B	00H,001H				; Bias,Volm
000075F8                            
000075F8                            ;------------< Table Data >-------------;
000075F8 =000075F8                  TABAA0	EQU		*
000075F8 F001 01F0 08F3 E7          		DC.B	FVR,1,1,0F0H,8,CMNOIS,NOIS7
000075FF B004 CA04                  		DC.B	0B0H,4,0CAH,4
00007603 =00007603                  TAA0	EQU		*
00007603 C001 EC01 F700 08          		DC.B	0C0H,1,PVADD,1,CMREPT,0,8
0000760A FFF8                       		JDW		TAA0
0000760C EE                         		DC.B	CMEND
0000760D                            
0000760D                            ;------------< Voice Data >-------------;
0000760D =0000760D                  TIMBAA	EQU		*
0000760D                            
0000760E 00                         		even
0000760E                            
0000760E                            ;=======================================;
0000760E                            ;				   SAB					;
0000760E                            ;=======================================;
0000760E                            SAB:
0000760E 0000                       		TDW		TIMBAB,SAB				; Voice Top Address
00007610 0101                       		DC.B	1,1						; Base,Use Channel Total
00007612                            
00007612 80C0                       		DC.B	80H,0C0H				; Flag,Channel
00007614 0000                       		TDW		TABAB0,SAB				; FM 1ch Table Pointer
00007616 0000                       		DC.B	00H,000H				; Bias,Volm
00007618                            
00007618                            ;------------< Table Data >-------------;
00007618 =00007618                  TABAB0	EQU		*
00007618 F501                       		DC.B	EV,1
0000761A F003 0120 08F3 E7          		DC.B	FVR,3,1,20H,8,CMNOIS,NOIS7
00007621 A203 A604                  		DC.B	0A2H,3,0A6H,4
00007625 =00007625                  TAB0	EQU		*
00007625 B209 E902 EC03 F700 02     		DC.B	0B2h,9,CMBIAS,2,PVADD,3,CMREPT,0,2
0000762E FFF6                       		JDW		TAB0
00007630 EE                         		DC.B	CMEND
00007631                            
00007631                            ;------------< Voice Data >-------------;
00007631 =00007631                  TIMBAB	EQU		*
00007631                            
00007632 00                         		even
00007632                            
00007632                            ;=======================================;
00007632                            ;				   SAC					;
00007632                            ;=======================================;
00007632                            SAC:
00007632 0000                       		TDW		TIMBAC,SAC				; Voice Top Address
00007634 0101                       		DC.B	1,1						; Base,Use Channel Total
00007636                            
00007636 8005                       		DC.B	80H,05H					; Flag,Channel
00007638 0000                       		TDW		TABAC0,SAC				; FM 1ch Table Pointer
0000763A 0002                       		DC.B	000H,002H				; Bias,Volm
0000763C                            
0000763C                            ;------------< Table Data >-------------;
0000763C =0000763C                  TABAC0	EQU		*
0000763C EF00                       		DC.B	FEV,0
0000763E 8D2C                       		DC.B	08dH,02cH
00007640 EE                         		DC.B	CMEND
00007641                            
00007641                            ;------------< Voice Data >-------------;
00007641 =00007641                  TIMBAC	EQU		*
00007641 3C                         		CNF		4,7
00007642 0200 0101                  		MD		2,0,0,0,1,0,1,0
00007646 1F1F 1F1F                  		RSAR	0,31,0,31,0,31,0,31
0000764A 000E 1910                  		D1R		0,14,25,16
0000764E 000C 000F                  		D2R		0,12,0,15
00007652 0FEF FFFF                  		RRL		15,0,15,14,15,15,15,15
0000765A                            
0000765A                            		even
0000765A                            
0000765A                            ;=======================================;
0000765A                            ;				   SAD					;
0000765A                            ;=======================================;
0000765A                            SAD:
0000765A 0000                       		TDW		TIMBAD,SAD				; Voice Top Address
0000765C 0101                       		DC.B	1,1						; Base,Use Channel Total
0000765E                            
0000765E 80C0                       		DC.B	80H,0C0H				; Flag,Channel
00007660 0000                       		TDW		TABAD0,SAD				; FM 1ch Table Pointer
00007662 0000                       		DC.B	00H,000H				; Bias,Volm
00007664                            
00007664                            ;------------< Table Data >-------------;
00007664 =00007664                  TABAD0	EQU		*
00007664 F502                       		DC.B	EV,2
00007666 F001 01F0 08F3 E7          		DC.B	FVR,1,1,0F0H,8,CMNOIS,NOIS7
0000766D =0000766D                  TAD0	EQU		*
0000766D B004 8002                  		DC.B	0B0H,4,NL,2
00007671 F700 03                    		DC.B	CMREPT,0,3
00007674 FFF8                       		JDW		TAD0
00007676 EE                         		DC.B	CMEND
00007677                            
00007677                            ;------------< Voice Data >-------------;
00007677 =00007677                  TIMBAD	EQU		*
00007677                            
00007678 00                         		even
00007678                            
00007678                            ;=======================================;
00007678                            ;				   SAE					;
00007678                            ;=======================================;
00007678                            SAE:
00007678 0000                       		TDW		TIMBAE,SAE				; Voice Top Address
0000767A 0101                       		DC.B	1,1						; Base,Use Channel Total
0000767C                            
0000767C 80C0                       		DC.B	80H,0C0H				; Flag,Channel
0000767E 0000                       		TDW		TABAE0,SAE				; FM 1ch Table Pointer
00007680 0004                       		DC.B	00H,004H				; Bias,Volm
00007682                            
00007682                            ;------------< Table Data >-------------;
00007682 =00007682                  TABAE0	EQU		*
00007682 =00007682                  TBAE	EQU		*
00007682 B818 B6                    		DC.B	GN4,L2,FN4
00007685 F6                         		DC.B	CMJUMP
00007686 FFFB                       		JDW		TBAE
00007688                            
00007688                            ;------------< Voice Data >-------------;
00007688 =00007688                  TIMBAE	EQU		*
00007688 28                         		CNF		0,5
00007689 0370 3100                  		MD		3,0,0,7,1,3,0,0
0000768D 1F1F 5F5F                  		RSAR	0,31,0,31,1,31,1,31
00007691 0303 0302                  		D1R		3,3,3,2
00007695 0102 0203                  		D2R		1,2,2,3
00007699 AF2F 2F5F                  		RRL		15,10,15,2,15,2,15,5
000076A1                            
000076A2 00                         		even
000076A2                            
000076A2                            ;=======================================;
000076A2                            ;				   SAF					;
000076A2                            ;=======================================;
000076A2                            SAF:
000076A2 0000                       		TDW		TIMBAF,SAF				; Voice Top Address
000076A4 0101                       		DC.B	1,1						; Base,Use Channel Total
000076A6                            
000076A6 80C0                       		DC.B	080H,0C0H				; Flag,Channel
000076A8 0000                       		TDW		TABAF0,SAF				; FM 1ch Table Pointer
000076AA 0000                       		DC.B	00H,000H				; Bias,Volm
000076AC                            
000076AC                            ;------------< Table Data >-------------;
000076AC =000076AC                  TABAF0	EQU		*
000076AC F3E3                       		DC.B	CMNOIS,NOIS3
000076AE =000076AE                  TAF0	EQU		*
000076AE B818 B6                    		DC.B	GN4,L2,FN4
000076B1 F6                         		DC.B	CMJUMP
000076B2 FFFB                       		JDW		TAF0
000076B4                            
000076B4                            ;------------< Voice Data >-------------;
000076B4 =000076B4                  TIMBAF	EQU		*
000076B4 3D                         		CNF		5,7
000076B5 0011 1111                  		MD		0,0,1,1,1,1,1,1
000076B9 DF0D 0D0D                  		RSAR	3,31,0,0DH,0,0DH,0,0DH
000076BD 0110 1010                  		D1R		1,10H,10H,10H
000076C1 0112 1212                  		D2R		1,12H,12H,12H
000076C5 0F1F 1F1F                  		RRL		15,0,15,1,15,1,15,1
000076CD                            
000076CD                            ; vim: set ft=asm68k sw=4 ts=4 noet:
000076CD                            ; vim: set ft=asm68k sw=4 ts=4 noet:
000076CE 00                         		even
000076CE                            
000076CE                            
000076CE                            		
000076CE                            	ALIGN	$2000
00008000                            		include	"ErrorHandler.asm"
00008000                            
00008000                            ; ===============================================================
00008000                            ; ---------------------------------------------------------------
00008000                            ; Error handling and debugging modules
00008000                            ;
00008000                            ; (c) 2016-2023, Vladikcomper
00008000                            ; ---------------------------------------------------------------
00008000                            ; Error handler functions and calls
00008000                            ; ---------------------------------------------------------------
00008000                            
00008000                            ; ---------------------------------------------------------------
00008000                            ; Error handler control flags
00008000                            ; ---------------------------------------------------------------
00008000                            
00008000                            ; Screen appearence flags
00008000 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
00008000 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
00008000                            
00008000                            ; Advanced execution flags
00008000                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
00008000 =00000020                  _eh_return			equ	$20
00008000 =00000040                  _eh_enter_console	equ	$40
00008000 =00000080                  _eh_align_offset	equ	$80
00008000                            
00008000                            ; ---------------------------------------------------------------
00008000                            ; Errors vector table
00008000                            ; ---------------------------------------------------------------
00008000                            
00008000                            ; Default screen configuration
00008000 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
00008000                            
00008000                            ; ---------------------------------------------------------------
00008000                            
00008000                            BusError:
00008018                            
00008018                            AddressError:
00008034                            
00008034                            IllegalInstr:
00008056                            
00008056                            ZeroDivide:
00008070                            
00008070                            ChkInstr:
0000808E                            
0000808E                            TrapvInstr:
000080AE                            
000080AE                            PrivilegeViol:
000080D0                            
000080D0                            Trace:
000080E4                            
000080E4                            Line1010Emu:
00008104                            
00008104                            Line1111Emu:
00008124                            
00008124                            ErrorExcept:
00008142                            
00008142                            
00008142                            ; ---------------------------------------------------------------
00008142                            ; Import error handler global functions
00008142                            ; ---------------------------------------------------------------
00008142                            
00008142                            ; Debugger extension functions
00008142                            __global__ErrorHandler_ConsoleOnly: equ DebuggerExtensions+$0
00008142                            __global__ErrorHandler_ClearConsole: equ DebuggerExtensions+$26
00008142                            __global__KDebug_WriteLine_Formatted: equ DebuggerExtensions+$50
00008142                            __global__KDebug_Write_Formatted: equ DebuggerExtensions+$54
00008142                            __global__KDebug_FlushLine: equ DebuggerExtensions+$AA
00008142                            __global__ErrorHandler_PauseConsole: equ DebuggerExtensions+$C2
00008142                            __global__ErrorHandler_PagesController: equ DebuggerExtensions+$F8
00008142                            __global__VSync: equ DebuggerExtensions+$158
00008142                            
00008142                            ; Error handler & core functions
00008142                            __global__ErrorHandler: equ ErrorHandler+$0
00008142                            __global__Error_IdleLoop: equ ErrorHandler+$122
00008142                            __global__Error_InitConsole: equ ErrorHandler+$13C
00008142                            __global__Error_MaskStackBoundaries: equ ErrorHandler+$148
00008142                            __global__Error_DrawOffsetLocation: equ ErrorHandler+$1B2
00008142                            __global__Error_DrawOffsetLocation2: equ ErrorHandler+$1B6
00008142                            __global__ErrorHandler_SetupVDP: equ ErrorHandler+$23C
00008142                            __global__ErrorHandler_VDPConfig: equ ErrorHandler+$274
00008142                            __global__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$28A
00008142                            __global__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2C6
00008142                            __global__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2CA
00008142                            __global__Art1bpp_Font: equ ErrorHandler+$334
00008142                            __global__FormatString: equ ErrorHandler+$8F8
00008142                            __global__Console_Init: equ ErrorHandler+$9CE
00008142                            __global__Console_Reset: equ ErrorHandler+$A10
00008142                            __global__Console_InitShared: equ ErrorHandler+$A12
00008142                            __global__Console_SetPosAsXY_Stack: equ ErrorHandler+$A4E
00008142                            __global__Console_SetPosAsXY: equ ErrorHandler+$A54
00008142                            __global__Console_GetPosAsXY: equ ErrorHandler+$A82
00008142                            __global__Console_StartNewLine: equ ErrorHandler+$AA4
00008142                            __global__Console_SetBasePattern: equ ErrorHandler+$ACC
00008142                            __global__Console_SetWidth: equ ErrorHandler+$AE0
00008142                            __global__Console_WriteLine_WithPattern: equ ErrorHandler+$AF6
00008142                            __global__Console_WriteLine: equ ErrorHandler+$AF8
00008142                            __global__Console_Write: equ ErrorHandler+$AFC
00008142                            __global__Console_WriteLine_Formatted: equ ErrorHandler+$BA8
00008142                            __global__Console_Write_Formatted: equ ErrorHandler+$BAC
00008142                            __global__Decomp1bpp: equ ErrorHandler+$BDC
00008142                            
00008142                            ; ---------------------------------------------------------------
00008142                            ; Built-in debuggers
00008142                            ; ---------------------------------------------------------------
00008142                            
00008142                            Debugger_AddressRegisters:
00008142                            
00008142 48E7 00FE 41FA 002A        	dc.l	$48E700FE, $41FA002A
0000814A 4EBA 0000                  	jsr		__global__Console_Write(pc)
0000814E 49D7 7C06 3F3C 2000 2F3C+  	dc.l	$49D77C06, $3F3C2000, $2F3CE861, $303A41D7
0000815E 221C                       	dc.w	$221C
00008160 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation(pc)
00008164 522F 0002 51CE FFF2 4FEF+  	dc.l	$522F0002, $51CEFFF2, $4FEF0022, $4E75E0FA, $01F026EA, $41646472, $65737320, $52656769
00008184 7374 6572 733A E0E0        	dc.l	$73746572, $733AE0E0
0000818C 0000                       	dc.w	$0000
0000818E                            
0000818E                            Debugger_Backtrace:
0000818E                            
0000818E 41FA 0088                  	dc.l	$41FA0088
00008192 4EBA 0000                  	jsr		__global__Console_Write(pc)
00008196 2278 0000 5989 45D7        	dc.l	$22780000, $598945D7
0000819E 4EBA 0000                  	jsr		__global__Error_MaskStackBoundaries(pc)
000081A2 B3CA 6570 0C52 0040 6464+  	dc.l	$B3CA6570, $0C520040, $64642012, $67602040, $02400001, $66581220, $10200C00, $00616604
000081C2 4A01 663A 0C00 004E 660A+  	dc.l	$4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A, $30200C40, $61006722, $12004200
000081E2 0C40 4E00 6612 0C01 00A8+  	dc.l	$0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01, $00B96606, $0C604EB9, $66102F0A
00008202 2F09 2208                  	dc.l	$2F092208
00008206 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation2(pc)
0000820A 225F 245F 548A 548A B3CA+  	dc.l	$225F245F, $548A548A, $B3CA6490, $4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
0000822A 0000                       	dc.w	$0000
0000822C                            
0000822C                            ; ---------------------------------------------------------------
0000822C                            ; Debugger extensions
0000822C                            ; ---------------------------------------------------------------
0000822C                            
0000822C                            DebuggerExtensions:
0000822C                            
0000822C 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $47EF003C
0000823C 4EBA 0000                  	jsr		__global__ErrorHandler_SetupVDP(pc)
00008240 4EBA 0000                  	jsr		__global__Error_InitConsole(pc)
00008244 4CDF 7FFF                  	dc.l	$4CDF7FFF
00008248 487A 0000                  	pea		__global__Error_IdleLoop(pc)
0000824C 2F2F 0012 4E75 2F0B 4E6B+  	dc.l	$2F2F0012, $4E752F0B, $4E6B0C2B, $005D000C, $661A48E7, $C4464BF9, $00C00004, $4DEDFFFC
0000826C 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Initial(pc), a1
00008270 4EBA 0000                  	jsr		__global__Console_Reset(pc)
00008274 4CDF 6223 265F 4E75 487A+  	dc.l	$4CDF6223, $265F4E75, $487A0058, $4E680C28, $005D000C, $67182F0C, $49FA0016, $4FEFFFF0
00008294 41D7 7E0E                  	dc.l	$41D77E0E
00008298 4EBA 0000                  	jsr		__global__FormatString(pc)
0000829C 4FEF 0010 285F 4E75 4218+  	dc.l	$4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00
000082BC 6002 3A87 1E18 6EFA 6708+  	dc.l	$60023A87, $1E186EFA, $67080407, $00E067F2, $60F22A5F, $205F7E0E, $4E752F08, $4E680C28
000082DC 005D 000C 6708 33FC 9E00+  	dc.l	$005D000C, $670833FC, $9E0000C0, $0004205F, $4E7548E7, $C0D04E6B, $0C2B005D, $000C660C
000082FC 3F3C 0000 610C 610A 67FC+  	dc.l	$3F3C0000, $610C610A, $67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178
0000831C 70F0 C02F 0005 4E75 48E7+  	dc.l	$70F0C02F, $00054E75, $48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2
0000833C 6B40 41FA 0076 5888 D000+  	dc.l	$6B4041FA, $00765888, $D00064FA, $20106F32, $20404FEF
00008350 FFF2                       	dc.w	$FFF2
00008352 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Shared(pc), a1
00008356 47D7 2A3C 4000 0003        	dc.l	$47D72A3C, $40000003
0000835E 4EBA 0000                  	jsr		__global__Console_InitShared(pc)
00008362 2ABC 8230 8406 2A85 487A+  	dc.l	$2ABC8230, $84062A85, $487A000C, $48504CEF, $7FFF0014, $4E754FEF, $000E60B0
0000837E 2ABA 0000                  	move.l	__global__ErrorHandler_VDPConfig_Nametables(pc), (a5)
00008382 60AA 41F9 00C0 0004 44D0+  	dc.l	$60AA41F9, $00C00004, $44D06BFC, $44D06AFC, $4E7512BC, $00004E71, $72C01011, $E50812BC
000083A2 0040 4E71 C001 1211 0201+  	dc.l	$00404E71, $C0011211, $0201003F, $80014600, $1210B101, $10C0C200, $10C14E75
000083BE                            
000083BE                            ; WARNING! Don't move! This must be placed directly below "DebuggerExtensions"
000083BE                            DebuggerExtensions_ExtraDebuggerList:
000083BE 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER	; for button A
000083C2 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER	; for button C (not B)
000083C6 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER	; for button B (not C)
000083CA                            
000083CA                            ; ---------------------------------------------------------------
000083CA                            ; Error handler blob
000083CA                            ; ---------------------------------------------------------------
000083CA                            
000083CA                            ErrorHandler:
000083CA                            
000083CA 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $4EBA022E, $49EF004A, $4E682F08, $47EF0040, $4EBA011E
000083EA 41FA 02B2 4EBA 0AD6 225C+  	dc.l	$41FA02B2, $4EBA0AD6, $225C45D4, $4EBA0B7A, $4EBA0A72, $49D21C19, $6A025249, $47D10806
0000840A 0000 670E 41FA 0295 222C+  	dc.l	$0000670E, $41FA0295, $222C0002, $4EBA0164, $504C41FA, $0292222C, $00024EBA, $01562278
0000842A 0000 45EC 0006 4EBA 01AE+  	dc.l	$000045EC, $00064EBA, $01AE41FA, $02844EBA, $01424EBA, $0A300806, $00066600, $00AA45EF
0000844A 0004 4EBA 09FE 3F01 7003+  	dc.l	$00044EBA, $09FE3F01, $70034EBA, $09C8303C, $64307A07, $4EBA0132, $321F7011, $4EBA09B6
0000846A 303C 6130 7A06 4EBA 0120+  	dc.l	$303C6130, $7A064EBA, $0120303C, $73707A00, $2F0C45D7, $4EBA0112, $584F0806, $00016714
0000848A 43FA 0240 45D7 4EBA 0AE4+  	dc.l	$43FA0240, $45D74EBA, $0AE443FA, $024145D4, $4EBA0AD6, $584F4EBA, $09AA5241, $70014EBA
000084AA 0974 2038 0078 41FA 022F+  	dc.l	$09742038, $007841FA, $022F4EBA, $010A2038, $007041FA, $022B4EBA, $00FE4EBA, $09A82278
000084CA 0000 45D4 5389 6140 4EBA+  	dc.l	$000045D4, $53896140, $4EBA0978, $7A199A41, $6B0A6148, $4EBA005A, $51CDFFFA, $08060005
000084EA 660A 4E71 60FC 7200 4EBA+  	dc.l	$660A4E71, $60FC7200, $4EBA09A2, $2ECB4CDF, $7FFF487A, $FFEE2F2F, $FFC44E75, $43FA0152
0000850A 45FA 01F2 4EFA 0888 223C+  	dc.l	$45FA01F2, $4EFA0888, $223C00FF, $FFFF2409, $C4812242, $240AC481, $24424E75, $4FEFFFD0
0000852A 41D7 7EFF 20FC 2853 5029+  	dc.l	$41D77EFF, $20FC2853, $502930FC, $3A206018, $4FEFFFD0, $41D77EFF, $30FC202B, $320A924C
0000854A 4EBA 05A4 30FC 3A20 7005+  	dc.l	$4EBA05A4, $30FC3A20, $700572EC, $B5C96502, $72EE10C1, $321A4EBA, $05AC10FC, $002051C8
0000856A FFEA 4218 41D7 7200 4EBA+  	dc.l	$FFEA4218, $41D77200, $4EBA094C, $4FEF0030, $4E754EBA, $09482F01, $2F0145D7, $43FA013C
0000858A 4EBA 09E6 504F 4E75 4FEF+  	dc.l	$4EBA09E6, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA055E
000085AA 4218 41D7 7200 4EBA 090E+  	dc.l	$421841D7, $72004EBA, $090E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
000085CA 0C5A 4EF9 6604 2212 60A8+  	dc.l	$0C5A4EF9, $66042212, $60A84EBA, $09A043FA, $01174EFA, $09945989, $4EBAFF2E, $B3CA650C
000085EA 0C52 0040 650A 548A B3CA+  	dc.l	$0C520040, $650A548A, $B3CA64F4, $72004E75, $221267F2, $08010000, $66EC4E75, $4BF900C0
0000860A 0004 4DED FFFC 4A55 44D5+  	dc.l	$00044DED, $FFFC4A55, $44D569FC, $41FA0026, $30186A04, $3A8060F8, $70002ABC, $40000000
0000862A 2C80 2ABC 4000 0010 2C80+  	dc.l	$2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75, $80048134, $85008700, $8B008C81
0000864A 8D00 8F02 9011 9100 9200+  	dc.l	$8D008F02, $90119100, $92008220, $84040000, $44000000, $00000001, $00100011, $01000101
0000866A 0110 0111 1000 1001 1010+  	dc.l	$01100111, $10001001, $10101011, $11001101, $11101111, $FFFF0EEE, $FFF200CE, $FFF20EEA
0000868A FFF2 0E86 FFF2 4000 0002+  	dc.l	$FFF20E86, $FFF24000, $00020028, $00280000, $008000FF, $EAE0FA01, $F02600EA, $41646472
000086AA 6573 733A 2000 EA4F 6666+  	dc.l	$6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C, $6C65723A, $2000EC83, $20E8BFEC
000086CA C800 FA10 E875 7370 3A20+  	dc.l	$C800FA10, $E8757370, $3A20EC83, $00FA03E8, $73723A20, $EC8100EA, $56496E74, $3A2000EA
000086EA 4849 6E74 3A20 00E8 3C75+  	dc.l	$48496E74, $3A2000E8, $3C756E64, $6566696E, $65643E00, $02F70000, $00000000, $0000183C
0000870A 3C18 1800 1800 6C6C 6C00+  	dc.l	$3C181800, $18006C6C, $6C000000, $00006C6C, $FE6CFE6C, $6C00187E, $C07C06FC, $180000C6
0000872A 0C18 3060 C600 386C 3876+  	dc.l	$0C183060, $C600386C, $3876CCCC, $76001818, $30000000, $00001830, $60606030, $18006030
0000874A 1818 1830 6000 00EE 7CFE+  	dc.l	$18181830, $600000EE, $7CFE7CEE, $00000018, $187E1818, $00000000, $00001818, $30000000
0000876A 00FE 0000 0000 0000 0000+  	dc.l	$00FE0000, $00000000, $00000038, $3800060C, $183060C0, $80007CC6, $CEDEF6E6, $7C001878
0000878A 1818 1818 7E00 7CC6 0C18+  	dc.l	$18181818, $7E007CC6, $0C183066, $FE007CC6, $063C06C6, $7C000C1C, $3C6CFE0C, $0C00FEC0
000087AA FC06 06C6 7C00 7CC6 C0FC+  	dc.l	$FC0606C6, $7C007CC6, $C0FCC6C6, $7C00FEC6, $060C1818, $18007CC6, $C67CC6C6, $7C007CC6
000087CA C67E 06C6 7C00 001C 1C00+  	dc.l	$C67E06C6, $7C00001C, $1C00001C, $1C000018, $18000018, $18300C18, $30603018, $0C000000
000087EA FE00 00FE 0000 6030 180C+  	dc.l	$FE0000FE, $00006030, $180C1830, $60007CC6, $060C1800, $18007CC6, $C6DEDCC0, $7E00386C
0000880A C6C6 FEC6 C600 FC66 667C+  	dc.l	$C6C6FEC6, $C600FC66, $667C6666, $FC003C66, $C0C0C066, $3C00F86C, $6666666C, $F800FEC2
0000882A C0F8 C0C2 FE00 FE62 607C+  	dc.l	$C0F8C0C2, $FE00FE62, $607C6060, $F0007CC6, $C0C0DEC6, $7C00C6C6, $C6FEC6C6, $C6003C18
0000884A 1818 1818 3C00 3C18 1818+  	dc.l	$18181818, $3C003C18, $1818D8D8, $7000C6CC, $D8F0D8CC, $C600F060, $60606062, $FE00C6EE
0000886A FED6 D6C6 C600 C6E6 E6F6+  	dc.l	$FED6D6C6, $C600C6E6, $E6F6DECE, $C6007CC6, $C6C6C6C6, $7C00FC66, $667C6060, $F0007CC6
0000888A C6C6 C6D6 7C06 FCC6 C6FC+  	dc.l	$C6C6C6D6, $7C06FCC6, $C6FCD8CC, $C6007CC6, $C07C06C6, $7C007E5A, $18181818, $3C00C6C6
000088AA C6C6 C6C6 7C00 C6C6 C6C6+  	dc.l	$C6C6C6C6, $7C00C6C6, $C6C66C38, $1000C6C6, $D6D6FEEE, $C600C66C, $3838386C, $C6006666
000088CA 663C 1818 3C00 FE86 0C18+  	dc.l	$663C1818, $3C00FE86, $0C183062, $FE007C60, $60606060, $7C00C060, $30180C06, $02007C0C
000088EA 0C0C 0C0C 7C00 1038 6CC6+  	dc.l	$0C0C0C0C, $7C001038, $6CC60000, $00000000, $00000000, $00FF3030, $18000000, $00000000
0000890A 780C 7CCC 7E00 E060 7C66+  	dc.l	$780C7CCC, $7E00E060, $7C666666, $FC000000, $7CC6C0C6, $7C001C0C, $7CCCCCCC, $7E000000
0000892A 7CC6 FEC0 7C00 1C36 30FC+  	dc.l	$7CC6FEC0, $7C001C36, $30FC3030, $78000000, $76CEC67E, $067CE060, $7C666666, $E6001800
0000894A 3818 1818 3C00 0C00 1C0C+  	dc.l	$38181818, $3C000C00, $1C0C0C0C, $CC78E060, $666C786C, $E6001818, $18181818, $1C000000
0000896A 6CFE D6D6 C600 0000 DC66+  	dc.l	$6CFED6D6, $C6000000, $DC666666, $66000000, $7CC6C6C6, $7C000000, $DC66667C, $60F00000
0000898A 76CC CC7C 0C1E 0000 DC66+  	dc.l	$76CCCC7C, $0C1E0000, $DC666060, $F0000000, $7CC07C06, $7C003030, $FC303036, $1C000000
000089AA CCCC CCCC 7600 0000 C6C6+  	dc.l	$CCCCCCCC, $76000000, $C6C66C38, $10000000, $C6C6D6FE, $6C000000, $C66C386C, $C6000000
000089CA C6C6 CE76 067C 0000 FC98+  	dc.l	$C6C6CE76, $067C0000, $FC983064, $FC000E18, $18701818, $0E001818, $18001818, $18007018
000089EA 180E 1818 7000 76DC 0000+  	dc.l	$180E1818, $700076DC, $00000000, $000043FA, $05C80C59, $DEB26672, $70FED059, $74FC7600
00008A0A 4841 0241 00FF D241 D241+  	dc.l	$48410241, $00FFD241, $D241B240, $625C675E, $20311000, $675847F1, $08004841, $7000301B
00008A2A B253 654C 43F3 08FE 45E9+  	dc.l	$B253654C, $43F308FE, $45E9FFFC, $E248C042, $B2730000, $65146204, $D6C0601A, $47F30004
00008A4A 200A 908B 6AE6 594B 600C+  	dc.l	$200A908B, $6AE6594B, $600C45F3, $00FC200A, $908B6AD8, $47D2925B, $7400341B, $D3C24841
00008A6A 4241 4841 D283 7000 4E75+  	dc.l	$42414841, $D2837000, $4E7570FF, $4E754841, $70003001, $D6805283, $323CFFFF, $48415941
00008A8A 6A8E 70FF 4E75 47FA 0530+  	dc.l	$6A8E70FF, $4E7547FA, $05300C5B, $DEB2664A, $D6D37800, $72007400, $45D351CC, $00061619
00008AAA 7807 D603 D341 5242 B252+  	dc.l	$7807D603, $D3415242, $B252620A, $65ECB42A, $00026712, $65E4584A, $B25262FA, $65DCB42A
00008ACA 0002 65D6 66F0 10EA 0003+  	dc.l	$000265D6, $66F010EA, $0003670A, $51CFFFC6, $4E9464C0, $4E755348, $4E757000, $4E754EFA
00008AEA 0024 4EFA 0018 760F 3401+  	dc.l	$00244EFA, $0018760F, $3401E84A, $C44310FB, $205E51CF, $004C4E94, $64464E75, $48416104
00008B0A 654A 4841 7404 760F E579+  	dc.l	$654A4841, $7404760F, $E5791801, $C84310FB, $403E51CF, $00044E94, $6532E579, $1801C843
00008B2A 10FB 402C 51CF 0004 4E94+  	dc.l	$10FB402C, $51CF0004, $4E946520, $E5791801, $C84310FB, $401A51CF, $00044E94, $650EE579
00008B4A C243 10FB 100A 51CF 0004+  	dc.l	$C24310FB, $100A51CF, $00044ED4, $4E753031, $32333435, $36373839, $41424344, $45464EFA
00008B6A 0026 4EFA 001A 7407 7018+  	dc.l	$00264EFA, $001A7407, $7018D201, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754841
00008B8A 6104 6518 4841 740F 7018+  	dc.l	$61046518, $4841740F, $7018D241, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754EFA
00008BAA 0010 4EFA 0048 47FA 009A+  	dc.l	$00104EFA, $004847FA, $009A0241, $00FF6004, $47FA008C, $42007609, $381B3403, $924455CA
00008BCA FFFC D244 9443 4442 8002+  	dc.l	$FFFCD244, $94434442, $8002670E, $06020030, $10C251CF, $00064E94, $6510381B, $6ADC0601
00008BEA 0030 10C1 51CF 0004 4ED4+  	dc.l	$003010C1, $51CF0004, $4ED44E75, $47FA002E, $42007609, $281B3403, $928455CA, $FFFCD284
00008C0A 9443 4442 8002 670E 0602+  	dc.l	$94434442, $8002670E, $06020030, $10C251CF, $00064E94, $65D4281B, $6ADC609E, $3B9ACA00
00008C2A 05F5 E100 0098 9680 000F+  	dc.l	$05F5E100, $00989680, $000F4240, $000186A0, $00002710, $FFFF03E8, $0064000A, $FFFF2710
00008C4A 03E8 0064 000A FFFF 48C1+  	dc.l	$03E80064, $000AFFFF, $48C16008, $4EFA0006, $488148C1, $48E75060, $4EBAFD94, $66182E81
00008C6A 4EBA FE24 4CDF 060A 650A+  	dc.l	$4EBAFE24, $4CDF060A, $650A0803, $00036604, $4EFA00B6, $4E754CDF, $060A0803, $00026708
00008C8A 47FA 000A 4EFA 00B4 70FF+  	dc.l	$47FA000A, $4EFA00B4, $70FF60DE, $3C756E6B, $6E6F776E, $3E0010FC, $002B51CF, $00064E94
00008CAA 65D2 4841 4A41 6700 FE5A+  	dc.l	$65D24841, $4A416700, $FE5A6000, $FE520803, $000366C0, $4EFAFE46, $48E7F810, $10D95FCF
00008CCA FFFC 6E14 6718 1620 7470+  	dc.l	$FFFC6E14, $67181620, $7470C403, $4EBB201A, $64EA4CDF, $081F4E75, $4E9464E0, $60F45348
00008CEA 4E94 4CDF 081F 4E75 47FA+  	dc.l	$4E944CDF, $081F4E75, $47FAFDF4, $B702D402, $4EFB205A, $4E714E71, $47FAFEA4, $B702D402
00008D0A 4EFB 204A 4E71 4E71 47FA+  	dc.l	$4EFB204A, $4E714E71, $47FAFE54, $B702D402, $4EFB203A, $53484E75, $47FAFF2E, $14030242
00008D2A 0003 D442 4EFB 2026 4A40+  	dc.l	$0003D442, $4EFB2026, $4A406B08, $4A816716, $4EFAFF64, $4EFAFF78, $265A10DB, $57CFFFFC
00008D4A 67D2 4E94 64F4 4E75 5248+  	dc.l	$67D24E94, $64F44E75, $5248603C, $504B321A, $4ED3584B, $221A4ED3, $52486022, $504B321A
00008D6A 6004 584B 221A 6A08 4481+  	dc.l	$6004584B, $221A6A08, $448110FC, $002D6004, $10FC002B, $51CF0006, $4E9465CA, $4ED351CF
00008D8A 0006 4E94 65C0 10D9 51CF+  	dc.l	$00064E94, $65C010D9, $51CFFFBC, $4ED44BF9, $00C00004, $4DEDFFFC, $4A516B10, $2A9941D2
00008DAA 3818 4EBA 01F8 43E9 0020+  	dc.l	$38184EBA, $01F843E9, $002060EC, $544941FA, $00482ABC, $C0000000, $70007603, $3C803419
00008DCA 3C82 3419 6AFA 7200 4EB0+  	dc.l	$3C823419, $6AFA7200, $4EB02010, $51CBFFEE, $2A194E63, $26C526D9, $26D936FC, $5D002A85
00008DEA 7000 3219 6112 2ABC 4000+  	dc.l	$70003219, $61122ABC, $40000000, $72006108, $3ABC8174, $2A854E75, $2C802C80, $2C802C80
00008E0A 2C80 2C80 2C80 2C80 51C9+  	dc.l	$2C802C80, $2C802C80, $51C9FFEE, $4E754CAF, $00030004, $48E76010, $4E6B0C2B, $005D000C
00008E2A 661A 3413 0242 E000 C2EB+  	dc.l	$661A3413, $0242E000, $C2EB000A, $D441D440, $D4403682, $23DB00C0, $000436DB, $4CDF0806
00008E4A 4E75 2F0B 4E6B 0C2B 005D+  	dc.l	$4E752F0B, $4E6B0C2B, $005D000C, $66127200, $32130241, $1FFF82EB, $000A2001, $4840E248
00008E6A 265F 4E75 2F0B 4E6B 0C2B+  	dc.l	$265F4E75, $2F0B4E6B, $0C2B005D, $000C6618, $3F003013, $D06B000A, $02405FFF, $368023DB
00008E8A 00C0 0004 36DB 301F 265F+  	dc.l	$00C00004, $36DB301F, $265F4E75, $2F0B4E6B, $0C2B005D, $000C6604, $37410008, $265F4E75
00008EAA 2F0B 4E6B 0C2B 005D 000C+  	dc.l	$2F0B4E6B, $0C2B005D, $000C6606, $584B36C1, $36C1265F, $4E7561D4, $487AFFAA, $48E77E12
00008ECA 4E6B 0C2B 005D 000C 661C+  	dc.l	$4E6B0C2B, $005D000C, $661C2A1B, $4C93005C, $48464DF9, $00C00000, $72001218, $6E0E6B28
00008EEA 4893 001C 2705 4CDF 487E+  	dc.l	$4893001C, $27054CDF, $487E4E75, $51CB000E, $D642DA86, $0885001D, $2D450004, $D2443C81
00008F0A 7200 1218 6EE6 67D8 0241+  	dc.l	$72001218, $6EE667D8, $0241001E, $4EFB1002, $DA86721D, $03856020, $6026602A, $6032603A
00008F2A 1418 6014 1818 60D8 6036+  	dc.l	$14186014, $181860D8, $60361218, $D2417680, $4843CA83, $48418A81, $36022D45, $000460C0
00008F4A 0244 07FF 60BA 0244 07FF+  	dc.l	$024407FF, $60BA0244, $07FF0044, $200060B0, $024407FF, $00444000, $60A60044, $600060A0
00008F6A 3F04 1E98 381F 6098 487A+  	dc.l	$3F041E98, $381F6098, $487AFEFA, $2F0C49FA, $00164FEF, $FFF041D7, $7E0E4EBA, $FD3C4FEF
00008F8A 0010 285F 4E75 4218 4447+  	dc.l	$0010285F, $4E754218, $44470647, $000F90C7, $2F084EBA, $FF28205F, $7E0E4E75, $741E1018
00008FAA 1200 E609 C242 3CB1 1000+  	dc.l	$1200E609, $C2423CB1, $1000D000, $C0423CB1, $000051CC, $FFEA4E75
00008FC2                            
00008FC2                            ; ---------------------------------------------------------------
00008FC2                            ; WARNING!
00008FC2                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
00008FC2                            ;	Symbol data should be appended here after ROM is compiled
00008FC2                            ;	by ConvSym utility, otherwise debugger modules won't be able
00008FC2                            ;	to resolve symbol names.
00008FC2                            ; ---------------------------------------------------------------
00008FC2                            ; ---------------------------------------------------------------
