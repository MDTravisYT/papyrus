00000000                            		include		"Debugger.asm"
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ;
00000000                            ; (c) 2016-2023, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugger customization
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; Enable debugger extensions
00000000                            ; Pressing A/B/C on the exception screen can open other debuggers
00000000                            ; Pressing Start or unmapped button returns to the exception
00000000 =00000001                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON
00000000                            
00000000                            ; Debuggers mapped to pressing A/B/C on the exception screen
00000000                            ; Use 0 to disable button, use debugger's entry point otherwise.
00000000                            DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		Debugger_AddressRegisters	; display address register symbols
00000000                            DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		Debugger_Backtrace			; display exception backtrace
00000000 =00000000                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Creates assertions for debugging
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash!
00000000                            ;	assert.w	d5, eq			; d5 must be $0000!
00000000                            ;	assert.l	a1, hi, a0		; asert a1 > a0, or else crash!
00000000                            ;	assert.b	MemFlag, ne		; MemFlag must be non-zero!
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            assert	macro	src, cond, dest
00000000                            	; Assertions only work in DEBUG builds
00000000                            	if def(__DEBUG__)
00000000                            	if narg=3
00000000                            		cmp.\0	\dest, \src
00000000                            	else narg=2
00000000                            		tst.\0	\src
00000000                            	endc
00000000                            		b\cond\.s	@skip\@
00000000                            		RaiseError	"Assertion failed:%<endl>\src \cond \dest"
00000000                            	@skip\@:
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Raises an error with the given message
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	RaiseError	"Something is wrong"
00000000                            ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
00000000                            ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            	pea		*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		__global__ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			jsr		\console_program										; ... an aligned "jsr" instruction that calls console program itself
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            		endc
00000000                            	else
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)			; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            			even								; ... in case \opts argument is empty or skipped
00000000                            		endc
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Console interface
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	Console.Run	YourConsoleProgram
00000000                            ;	Console.Write "Hello "
00000000                            ;	Console.WriteLine "...world!"
00000000                            ;	Console.SetXY #1, #4
00000000                            ;	Console.WriteLine "Your data is %<.b d0>"
00000000                            ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            Console &
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__Console_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","run")|strcmp("\0","Run")
00000000                            		jsr		__global__ErrorHandler_ConsoleOnly
00000000                            		jsr		\1
00000000                            		bra.s	*
00000000                            	elseif strcmp("\0","clear")|strcmp("\0","Clear")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_ClearConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","pause")|strcmp("\0","Pause")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_PauseConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","sleep")|strcmp("\0","Sleep")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	d0, -(sp)
00000000                            		move.l	a0, -(sp)
00000000                            		move.w	\1, d0
00000000                            		subq.w	#1, d0
00000000                            		bcs.s	@sleep_done\@
00000000                            		@sleep_loop\@:
00000000                            			jsr		__global__VSync
00000000                            			dbf		d0, @sleep_loop\@
00000000                            	@sleep_done\@:
00000000                            		move.l	(sp)+, a0
00000000                            		move.w	(sp)+, d0
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","setxy")|strcmp("\0","SetXY")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		__global__Console_SetPosAsXY_Stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__Console_StartNewLine
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            KDebug &
00000000                            	if def(__DEBUG__)	; KDebug interface is only available in DEBUG builds
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__KDebug_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__KDebug_FlushLine
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","starttimer")|strcmp("\0","StartTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9FC0, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","endtimer")|strcmp("\0","EndTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9F00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakpoint")|strcmp("\0","BreakPoint")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9D00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""KDebug"""
00000000                            	endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		__global__ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even													; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController	; ... extensions controller
00000000                            		else
00000000                            			dc.b	\opts+0
00000000                            			even
00000000                            		endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	__stack:set		0						; size of actual stack
00000000                            	__sp:	set		0						; stack displacement
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            	__lpos:	set		1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	while (__pos)
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."    
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			
00000000                            			; Validate format setting ("param")
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			elseif strcmp("\__param","signed")
00000000                            				__param: substr ,,"hex+signed"	; if param is "signed", correct it to "hex+signed"
00000000                            			endc
00000000                            			if (\__param < $80)
00000000                            				inform	2,"Illegal operand format setting: ""\__param\"". Expected ""hex"", ""dec"", ""bin"", ""sym"", ""str"" or their derivatives."
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            		__lpos:	set		__endpos+1
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            		include		"SRC/SYSTEM/RAM.I"
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A10000                  IO_PCBVER	    =	$A10000
00000000 =00A10001                  VERSION     	=	$A10001
00000000 =00A10002                  IO_CT1_DATA	    =	$A10002
00000000 =00A10003                  IODATA1     	=	$A10003
00000000 =00A10006                  IO_EXT_DATA	    =	$A10006
00000000 =00A10008                  IOCTRL1     	=	$A10008
00000000 =00A1000A                  IO_CT2_CTRL 	=	$A1000A
00000000 =00A1000C                  IOCTRL3     	=	$A1000C
00000000 =00A1000E                  IO_CT1_RX	    =	$A1000E
00000000 =00A10010                  IO_CT1_TX	    =	$A10010
00000000 =00A10012                  IO_CT1_SMODE	=	$A10012
00000000 =00A10014                  IO_CT2_RX	    =	$A10014
00000000 =00A10016                  IO_CT2_TX	    =	$A10016
00000000 =00A10018                  IO_CT2_SMODE	=	$A10018
00000000 =00A1001A                  IO_EXT_RX	    =	$A1001A
00000000 =00A1001C                  IO_EXT_TX	    =	$A1001C
00000000 =00A1001E                  IO_EXT_SMODE	=	$A1001E
00000000 =00A00000                  z80_ram:		equ $A00000	
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A11100                  Z80BUS			=	$A11100
00000000 =00A11200                  Z80_RESET		=	$A11200
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A14000                  SEGATMSS		=	$A14000
00000000                            
00000000 =00008000                  PLANE_A			=	$8000
00000000 =0000A000                  PLANE_B			=	$A000
00000000 =0000C000                  PLANE_W			=	$C000
00000000                            
00000000 =00C00000                  VDPDATA			=	$C00000
00000000 =00C00004                  VDPCTRL			=	$C00004
00000000 =00C00011                  psg_input:		equ $C00011
00000000 =40000000                  VRAMWRITE       =	$40000000
00000000 =40000010                  VSRAMWRITE      =	$40000010
00000000 =40000080                  VRAMDMA         =	$40000080
00000000 =40000090                  VSRAMDMA        =	$40000090
00000000 =C0000000                  CRAMWRITE       =	$C0000000
00000000 =C0000080                  CRAMDMA         =	$C0000080
00000000                            
00000000 =FFFFCC00                  HSCROLLTABLE	=	$FFFFCC00
00000000 =FFFFF600                  GAMEMODE		=	$FFFFF600
00000000 =FFFFF604                  JOYPAD			=	$FFFFF604
00000000 =FFFFF605                  JOYPADPRESS		=	$FFFFF605
00000000 =FFFFF606                  JOYPAD2			=	$FFFFF606
00000000 =FFFFF607                  JOYPAD2PRESS	=	$FFFFF607
00000000 =FFFFF60C                  VDPBUFFER		=	$FFFFF60C
00000000 =FFFFF614                  TIMER			=	$FFFFF614
00000000 =FFFFF616                  VDP_SCREENPOSY	=	$FFFFF616
00000000 =FFFFF61A                  VDP_SCREENPOSX	=	$FFFFF61A
00000000 =FFFFF626                  PALFADEARGS		=	$FFFFF626
00000000 =FFFFF627                  PALFADESIZE		=	$FFFFF627
00000000 =FFFFF632                  PALCYCCURRENT	=	$FFFFF632
00000000 =FFFFF634                  PALCYCTIMER		=	$FFFFF634
00000000 =FFFFF62A                  VBLANKCMD		=	$FFFFF62A
00000000 =FFFFF644                  VDPBUFFER2		=	$FFFFF644
00000000 =FFFFF648                  HBLANKFLAG		=	$FFFFF648
00000000 =FFFFF800                  SPRITETABLE		=	$FFFFF800
00000000 =FFFFFB00                  PALETTE			=	$FFFFFB00
00000000 =FFFFFB80                  PALFADEBUFFER	=	$FFFFFB80
00000000 =FFFFFE0C                  VBLANKCOUNTER	=	$FFFFFE0C
00000000 =FFFFF009                  SOUNDPOKE		= 	$FFFFF009
00000000 =FFFFFFF8                  HARDWAREVERSION	=	$FFFFFFF8
00000000 =FFFFFFF8                  HARDWAREVERSION	=	$FFFFFFF8
00000000                            		include		"SOUND/SOUNDRAM.I"
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses TrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000 =FFFFF000                  v_snddriver_ram	= 	$FFFFF000 
00000000                            
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_A5:		equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_AB:		equ ((ptr_sndAB-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            		include		"SRC/SYSTEM/MACRO.I"
00000000                            ALIGN	MACRO
00000000                            		DCB.B (\1-(*%\1))%\1,0
00000000                            		ENDM
00000000                            		
00000000                            COPYTILEMAP		MACRO	source,loc,width,height
00000000                            		lea		(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr		DrawTileMap
00000000                            		endm
00000000                            		
00000000                            WRITEVRAM	MACRO	LOC
00000000                            		MOVE.L	#VRAMWRITE+((LOC&$3FFF)<<16)+((LOC&$C000)>>14),	(VDPCTRL)
00000000                            		ENDM
00000000                            		
00000000                            startZ80:       macro
00000000                            		move.w	#0,(Z80BUS).l
00000000                            		endm
00000000                            		
00000000                            stopZ80:        macro
00000000                            		move.w	#$100,(Z80BUS).l
00000000                            		endm
00000000                            		
00000000                            waitZ80:	macro
00000000                            .wait:		btst	#0,(Z80BUS).l
00000000                            		bne.s	.wait
00000000                            		endm
00000000                            		
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(Z80_RESET).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(Z80_RESET).l
00000000                            		endm
00000000                            		endm
00000000                            		include		"SRC/SYSTEM/HEADER.ASM"
00000000 00FF FE00                  		DC.L	$00FFFE00
00000004 0000 0000                  		DC.L	START
00000008 0000 0000                  		DC.L 	BusError		; Bus error
0000000C 0000 0000                  		DC.L 	AddressError	; Address error (4)
00000010 0000 0000                  		DC.L 	IllegalInstr	; Illegal instruction
00000014 0000 0000                  		DC.L 	ZeroDivide		; Division by zero
00000018 0000 0000                  		DC.L 	ChkInstr		; CHK exception
0000001C 0000 0000                  		DC.L 	TrapvInstr		; TRAPV exception (8)
00000020 0000 0000                  		DC.L 	PrivilegeViol	; Privilege violation
00000024 0000 0000                  		DC.L 	Trace			; TRACE exception
00000028 0000 0000                  		DC.L 	Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		DC.L 	Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		DC.L	ERROR
00000034 0000 0000                  		DC.L	ERROR
00000038 0000 0000                  		DC.L	ERROR
0000003C 0000 0000                  		DC.L	ERROR
00000040 0000 0000                  		DC.L	ERROR
00000044 0000 0000                  		DC.L	ERROR
00000048 0000 0000                  		DC.L	ERROR
0000004C 0000 0000                  		DC.L	ERROR
00000050 0000 0000                  		DC.L	ERROR
00000054 0000 0000                  		DC.L	ERROR
00000058 0000 0000                  		DC.L	ERROR
0000005C 0000 0000                  		DC.L	ERROR
00000060 0000 0000                  		DC.L	ERROR
00000064 0000 0000                  		DC.L	INT
00000068 0000 0000                  		DC.L	INT
0000006C 0000 0000                  		DC.L	INT
00000070 0000 0000                  		DC.L	HBLANK
00000074 0000 0000                  		DC.L	INT
00000078 0000 0000                  		DC.L	VBLANK
0000007C 0000 0000                  		DC.L	INT
00000080 0000 0000                  		DC.L	ERROR
00000084 0000 0000                  		DC.L	ERROR
00000088 0000 0000                  		DC.L	ERROR
0000008C 0000 0000                  		DC.L	ERROR
00000090 0000 0000                  		DC.L	ERROR
00000094 0000 0000                  		DC.L	ERROR
00000098 0000 0000                  		DC.L	ERROR
0000009C 0000 0000                  		DC.L	ERROR
000000A0 0000 0000                  		DC.L	ERROR
000000A4 0000 0000                  		DC.L	ERROR
000000A8 0000 0000                  		DC.L	ERROR
000000AC 0000 0000                  		DC.L	ERROR
000000B0 0000 0000                  		DC.L	ERROR
000000B4 0000 0000                  		DC.L	ERROR
000000B8 0000 0000                  		DC.L	ERROR
000000BC 0000 0000                  		DC.L	ERROR
000000C0 0000 0000                  		DC.L	ERROR
000000C4 0000 0000                  		DC.L	ERROR
000000C8 0000 0000                  		DC.L	ERROR
000000CC 0000 0000                  		DC.L	ERROR
000000D0 0000 0000                  		DC.L	ERROR
000000D4 0000 0000                  		DC.L	ERROR
000000D8 0000 0000                  		DC.L	ERROR
000000DC 0000 0000                  		DC.L	ERROR
000000E0 0000 0000                  		DC.L	ERROR
000000E4 0000 0000                  		DC.L	ERROR
000000E8 0000 0000                  		DC.L	ERROR
000000EC 0000 0000                  		DC.L	ERROR
000000F0 0000 0000                  		DC.L	ERROR
000000F4 0000 0000                  		DC.L	ERROR
000000F8 0000 0000                  		DC.L	ERROR
000000FC 0000 0000                  		DC.L	ERROR
00000100 5345 4741 204D 4547 4120+  		DC.B	'SEGA MEGA DRIVE '		;	SYSTEM
00000110 4D44 5452 4156 4953 2032+  		DC.B	'MDTRAVIS 2024   '		;	DATE
00000120 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	DOMESTIC TITLE
00000130 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000140 2020 2020 2020 2020 2020+  		DC.B	'                '
00000150 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	INTERNATIONAL TITLE
00000160 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000170 2020 2020 2020 2020 2020+  		DC.B	'                '
00000180 474D 2058 5858 5858 5858+  		DC.B	'GM XXXXXXXX-XX',0,0	;	SERIAL
00000190 4A20 2020 2020 2020 2020+  		DC.B	'J               '		;	I/O SUPPORT JOYPAD
000001A0 0000 0000                  		DC.L	$00000000				;	ROM START
000001A4 0007 FFFF                  		DC.L	$0007FFFF				;	ROM END
000001A8 00FF 0000                  		DC.L	$00FF0000				;	RAM START
000001AC 00FF FFFF                  		DC.L	$00FFFFFF				;	RAM END
000001B0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001C0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001D0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001E0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
00000200                            		
00000200                            INT:
00000200                            ERROR:
00000200 23FC C000 0000 00C0 0004   		move.l	#CRAMWRITE,	(VDPCTRL)		;	Set VDP control mode to manually write a palette to CRAM
0000020A 33FC 000E 00C0 0000        		move.w	#$000E,		VDPDATA			;	Palleting...
00000212 60EC                       		BRA.S		INT
00000214                            		
00000214                            		INCLUDE		"SRC/SYSTEM/HBLANK.ASM"
00000214                            HBLANK:
00000214 4A79 FFFF F648             		TST.W	HBLANKFLAG
0000021A 6700                       		BEQ.S	.EXIT
0000021C 48E7 8084                  		MOVEM.L	D0/A0/A5,-(SP)
00000220 33FC 0000 FFFF F648        		MOVE.W	#0,	HBLANKFLAG
00000228 33FC 8405 00C0 0004        		MOVE.W	#$8405,	(VDPCTRL).L
00000230 33FC 857C 00C0 0004        		MOVE.W	#$857C,	(VDPCTRL).L
00000238 23FC 7800 0003 00C0 0004   		MOVE.L	#$78000003,	(VDPCTRL).L
00000242 41F9 FFFF F800             		LEA		SPRITETABLE,	A0
00000248 4BF9 00C0 0000             		LEA		(VDPDATA).L,	A5
0000024E 303C 009F                  		MOVE.W	#$9F,	D0
00000252                            		
00000252                            	.SPRITE:
00000252 2A98                       		MOVE.L	(A0)+,	(A5)
00000254 51C8 FFFC                  		DBF		D0,	.SPRITE
00000258 4CDF 2101                  		MOVEM.L	(SP)+,	D0/A0/A5
0000025C                            		
0000025C                            	.EXIT:
0000025C 4E73                       		RTE
0000025C 4E73                       		RTE
0000025E                            		INCLUDE		"SRC/SYSTEM/VBLANK.ASM"
0000025E                            VBLANK:
0000025E 48E7 FFFE                  		MOVEM.L	D0-D7/A0-A6,	-(SP)
00000262 4A39 FFFF F62A             		TST.B	VBLANKCMD
00000268 6700                       		BEQ.S	.END
0000026A 3039 00C0 0004             		MOVE.W	(VDPCTRL).L,	D0
00000270 23FC 4000 0010 00C0 0004   		MOVE.L	#$40000010,	(VDPCTRL).L
0000027A 23F9 FFFF F616 00C0 0000   		MOVE.L	VDP_SCREENPOSY,	(VDPDATA).L
00000284 0839 0006 FFFF FFF8        		BTST	#6,	HARDWAREVERSION
0000028C 6700                       		BEQ.S	.NTSC
0000028E 303C 0700                  		MOVE.W	#$700,	D0
00000292                            		
00000292                            	.PAL:
00000292 51C8 FFFE                  		DBF	D0,	.PAL
00000296                            		
00000296                            	.NTSC:
00000296 1039 FFFF F62A             		MOVE.B	VBLANKCMD,	D0
0000029C 13FC 0000 FFFF F62A        		MOVE.B	#0,	VBLANKCMD
000002A4 33FC 0001 FFFF F648        		MOVE.W	#1,	HBLANKFLAG
000002AC 0240 003E                  		ANDI.W	#%111110,	D0
000002B0 303B 0000                  		MOVE.W	.INDEX(PC,D0.W),	D0
000002B4 4EBB 0000                  		JSR		.INDEX(PC,D0.W)
000002B8                            		
000002B8                            	.END:
000002B8 4EB9 0000 0000             		JSR		UpdateMusic
000002BE 52B9 FFFF FE0C             		ADDQ.L	#1,	VBLANKCOUNTER
000002C4                            	;	JSR		
000002C4 4CDF 7FFF                  		MOVEM.L	(SP)+,	D0-D7/A0-A6
000002C8 4E73                       		RTE
000002CA                            		
000002CA                            	VBL_INVALID:
000002CA 4E75                       		RTS
000002CC                            		
000002CC                            	.INDEX:
000002CC 0000                       		DC.W	VBL_DEFAULT-.INDEX	;	0
000002CE FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	2
000002D0 FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	4
000002D2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	6
000002D4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	8
000002D6 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	A
000002D8 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	C
000002DA FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	E
000002DC FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	10
000002DE 0000                       		DC.W	VBL_PALETTE-.INDEX  ;	12
000002E0 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	14
000002E2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	16
000002E4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	18
000002E6 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1A
000002E8 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1C
000002EA FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1E
000002EC                            		
000002EC                            VBL_DEFAULT:
000002EC 4EB9 0000 0000             		JSR		READJOYPADS
000002F2 6100 0000                  		BSR.W	REFRESH_VDP_BUFFERS
000002F6 4A78 F614                  		TST.W	(TIMER).W
000002FA 6700 0000                  		BEQ.W	@STOP
000002FE 5378 F614                  		SUBQ.W	#1,	(TIMER).W
00000302                            	@STOP:	
00000302 4E75                       		RTS
00000304                            		
00000304                            VBL_PALETTE:
00000304                            		
00000304                            REFRESH_VDP_BUFFERS:
00000304                            ;		MOVE.W	#$100,	(Z80BUS).L
00000304                            ;		
00000304                            ;	@LOOP:
00000304                            ;		BTST	#0,	(Z80BUS).L
00000304                            ;		BNE.S	@LOOP
00000304                            		
00000304 4BF9 00C0 0004             		LEA	(VDPCTRL).L,	A5
0000030A 2ABC 9400 9340                     move.l  #$94009340,(a5)
00000310 2ABC 96FD 9580                     move.l  #$96FD9580,(a5)
00000316 3ABC 977F                          move.w  #$977F,(a5)
0000031A 3ABC C000                          move.w  #$C000,(a5)
0000031E 31FC 0080 F644                     move.w  #$80,(VDPBUFFER2).w
00000324 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000328 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
0000032E 2ABC 9401 9340                     move.l  #$94019340,(a5)
00000334 2ABC 96FC 9500                     move.l  #$96FC9500,(a5)
0000033A 3ABC 977F                          move.w  #$977F,(a5)
0000033E 3ABC 7800                          move.w  #$7800,(a5)
00000342 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
00000348 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
0000034C 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
00000352                            
00000352                            loc_EDC:
00000352 2ABC 9401 93C0                     move.l  #$940193C0,(a5)
00000358 2ABC 96E6 9500                     move.l  #$96E69500,(a5)
0000035E 3ABC 977F                          move.w  #$977F,(a5)
00000362 3ABC 7C00                          move.w  #$7C00,(a5)
00000366 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
0000036C 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000370 33FC 0000 00A1 1100                move.w  #0,(Z80BUS).l
00000378 4E75                               rts
00000378 4E75                               rts
0000037A                            		INCLUDE		"SRC/SYSTEM/SETUP.ASM"
0000037A 8000                       SetupValues:	dc.w $8000		; VDP register start number
0000037C 3FFF                       		dc.w $3FFF		; size of RAM/4
0000037E 0100                       		dc.w $100		; VDP register diff
00000380                            
00000380 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
00000384 00A1 1100                  		dc.l Z80BUS	; Z80 bus request
00000388 00A1 1200                  		dc.l Z80_RESET		; Z80 reset
0000038C 00C0 0000                  		dc.l VDPDATA	; VDP data
00000390 00C0 0004                  		dc.l VDPCTRL	; VDP control
00000394                            
00000394 04                         		dc.b 4			; VDP $80 - 8-colour mode
00000395 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
00000396 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
00000397 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
00000398 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
00000399 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
0000039A 00                         		dc.b 0			; VDP $86 - unused
0000039B 00                         		dc.b 0			; VDP $87 - background colour
0000039C 00                         		dc.b 0			; VDP $88 - unused
0000039D 00                         		dc.b 0			; VDP $89 - unused
0000039E FF                         		dc.b 255		; VDP $8A - HBlank register
0000039F 00                         		dc.b 0			; VDP $8B - full screen scroll
000003A0 81                         		dc.b $81		; VDP $8C - 40 cell display
000003A1 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000003A2 00                         		dc.b 0			; VDP $8E - unused
000003A3 01                         		dc.b 1			; VDP $8F - VDP increment
000003A4 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000003A5 00                         		dc.b 0			; VDP $91 - window h position
000003A6 00                         		dc.b 0			; VDP $92 - window v position
000003A7 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000003A9 0000                       		dc.w 0			; VDP $95/96 - DMA source
000003AB 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000003AC 4000 0080                  		dc.l $40000080		; VRAM address 0
000003B0                            
000003B0 AF                         		dc.b $AF		; xor	a
000003B1 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000003B4 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000003B7 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000003BA F9                         		dc.b $F9		; ld	sp,hl
000003BB 77                         		dc.b $77		; ld	(hl),a
000003BC EDB0                       		dc.b $ED, $B0		; ldir
000003BE DDE1                       		dc.b $DD, $E1		; pop	ix
000003C0 FDE1                       		dc.b $FD, $E1		; pop	iy
000003C2 ED47                       		dc.b $ED, $47		; ld	i,a
000003C4 ED4F                       		dc.b $ED, $4F		; ld	r,a
000003C6 D1                         		dc.b $D1		; pop	de
000003C7 E1                         		dc.b $E1		; pop	hl
000003C8 F1                         		dc.b $F1		; pop	af
000003C9 08                         		dc.b $08		; ex	af,af'
000003CA D9                         		dc.b $D9		; exx
000003CB C1                         		dc.b $C1		; pop	bc
000003CC D1                         		dc.b $D1		; pop	de
000003CD E1                         		dc.b $E1		; pop	hl
000003CE F1                         		dc.b $F1		; pop	af
000003CF F9                         		dc.b $F9		; ld	sp,hl
000003D0 F3                         		dc.b $F3		; di
000003D1 ED56                       		dc.b $ED, $56		; im1
000003D3 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000003D5 E9                         		dc.b $E9		; jp	(hl)
000003D6                            
000003D6 8104                       		dc.w $8104		; VDP display mode
000003D8 8F02                       		dc.w $8F02		; VDP increment
000003DA C000 0000                  		dc.l $C0000000		; CRAM write mode
000003DE 4000 0010                  		dc.l $40000010		; VSRAM address 0
000003E2                            
000003E2 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000003E2 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000003E6                            		
000003E6                            START:
000003E6 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
000003EC 6600                       		bne.s	PortA_Ok
000003EE 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
000003F4                            PortA_Ok:
000003F4                            PortA_Ok:
000003F4 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
000003F6 4BFA FF82                  		lea	SetupValues(pc),a5	; Load setup values array address.
000003FA 4C9D 00E0                  		movem.w	(a5)+,d5-d7
000003FE 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000402 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000406 0200 000F                  		andi.b	#$F,d0
0000040A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000040C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000414                            SkipSecurity:
00000414                            SkipSecurity:
00000414 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000416 7000                       		moveq	#0,d0	; clear d0
00000418 2C40                       		movea.l	d0,a6	; clear a6
0000041A 4E66                       		move.l	a6,usp	; set usp to $0
0000041C                            		moveq	#$17,d1
0000041C 7217                       		moveq	#$17,d1
0000041E                            VDPInitLoop:
0000041E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000420 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000422 DA47                       		add.w	d7,d5		; next register
00000424 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000428                            		
00000428 289D                       		move.l	(a5)+,(a4)
0000042A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000042C 3287                       		move.w	d7,(a1)		; stop the Z80
0000042E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000430                            WaitForZ80:
00000430                            WaitForZ80:
00000430 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000432 66FC                       		bne.s	WaitForZ80	; if not, branch
00000434                            		moveq	#$25,d2
00000434 7425                       		moveq	#$25,d2
00000436                            Z80InitLoop:
00000436 10DD                       		move.b	(a5)+,(a0)+
00000438 51CA FFFC                  		dbf	d2,Z80InitLoop
0000043C                            		
0000043C 3480                       		move.w	d0,(a2)
0000043E 3280                       		move.w	d0,(a1)		; start	the Z80
00000440 3487                       		move.w	d7,(a2)		; reset	the Z80
00000442                            ClrRAMLoop:
00000442                            ClrRAMLoop:
00000442 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000444 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000448 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000044A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000044C                            		moveq	#$1F,d3	; set repeat times
0000044C 761F                       		moveq	#$1F,d3	; set repeat times
0000044E                            ClrCRAMLoop:
0000044E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000450 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000454 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000456                            		moveq	#$13,d4
00000456 7813                       		moveq	#$13,d4
00000458                            ClrVSRAMLoop:
00000458 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000045A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000045E 7A03                       		moveq	#3,d5
00000460                            PSGInitLoop:
00000460                            PSGInitLoop:
00000460 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000464 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000468 3480                       		move.w	d0,(a2)
0000046A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000046E 46FC 2700                  		move	#$2700,sr
00000472                            SkipSetup:
00000472                            SkipSetup:
00000472 4DF9 00FF 0000             		LEA		$FF0000,	A6
00000478 7E00                       		MOVEQ	#0,	D7
0000047A 3C3C 3F7F                  		MOVE.W	#($FE00/4)-1,	D6
0000047E                            		
0000047E                            	@CLEARRAM:
0000047E 2CC7                       		MOVE.L	D7,	(A6)+
00000480 51CE FFFC                  		DBF		D6,	@CLEARRAM
00000484 6100 0000                  		BSR.W	INITVDP
00000488 6100 0000                  		BSR.W	INITSOUND
0000048C 6100 0000                  		BSR.W	INITJOYPADS
00000490 11FC 0000 F600             		MOVE.B	#0*4,	(GAMEMODE).W
00000496                            		
00000496                            MAINLOOP:
00000496 1038 F600                  		MOVE.B	(GAMEMODE).W,	D0
0000049A 0240 001C                  		ANDI.W	#%00011100,	D0
0000049E 4EBB 0000                  		JSR		@INDEX(PC,D0.W)
000004A2 60F2                       		BRA.S	MAINLOOP
000004A4                            		
000004A4                            	@INDEX:
000004A4 6000 0000                  		BRA.W	LOGO
000004A8 6000 0000                  		BRA.W	MAIN
000004AC 4E75                       		RTS
000004AE                            		
000004AE                            		INCLUDE		"SRC/SYSTEM/INITVDP.ASM"
000004AE                            INITVDP:
000004AE 33FC 8004 00C0 0004        		MOVE.W	#$8000+%00000100,(VDPCTRL)		;	MODE REGISTER 1
000004B6 33FC 8174 00C0 0004        		MOVE.W	#$8100+%01110100,(VDPCTRL)      ;	MODE REGISTER 2
000004BE 33FC 8220 00C0 0004        		MOVE.W	#$8200+(PLANE_A>>10),(VDPCTRL)  ;	PLANE A LOCATION
000004C6 33FC 8330 00C0 0004        		MOVE.W	#$8300+(PLANE_W>>10),(VDPCTRL)  ;	PLANE W LOCATION
000004CE 33FC 8405 00C0 0004        		MOVE.W	#$8400+(PLANE_B>>13),(VDPCTRL)  ;	PLANE B LOCATION
000004D6 33FC 857C 00C0 0004        		MOVE.W	#$8500+%01111100,(VDPCTRL)      ;	SPRITE TABLE LOCATION
000004DE 33FC 8600 00C0 0004        		MOVE.W	#$8600+%00000000,(VDPCTRL)      ;	
000004E6 33FC 8720 00C0 0004        		MOVE.W	#$8700+%00100000,(VDPCTRL)      ;	BACKGROUND COLOR
000004EE 33FC 8800 00C0 0004        		MOVE.W	#$8800+%00000000,(VDPCTRL)      ;	MASTER SYSTEM H-SCROLL
000004F6 33FC 8900 00C0 0004        		MOVE.W	#$8900+%00000000,(VDPCTRL)      ;	MASTER SYSTEM V-SCROLL
000004FE 33FC 8A00 00C0 0004        		MOVE.W	#$8A00+%00000000,(VDPCTRL)      ;	H-INT COUNTER
00000506 33FC 8B00 00C0 0004        		MOVE.W	#$8B00+%00000000,(VDPCTRL)      ;	MODE REGISTER 3
0000050E 33FC 8C81 00C0 0004        		MOVE.W	#$8C00+%10000001,(VDPCTRL)      ;	MODE REGISTER 4
00000516 33FC 8D3F 00C0 0004        		MOVE.W	#$8D00+%00111111,(VDPCTRL)      ;	H-SCROLL DATA LOCATION
0000051E 33FC 8E00 00C0 0004        		MOVE.W	#$8E00+%00000000,(VDPCTRL)      ;	
00000526 33FC 8F02 00C0 0004        		MOVE.W	#$8F00+%00000010,(VDPCTRL)      ;	AUTO-INCREMENT VALUE
0000052E 33FC 9001 00C0 0004        		MOVE.W	#$9000+%00000001,(VDPCTRL)      ;	PLANE SIZE
00000536 33FC 9100 00C0 0004        		MOVE.W	#$9100+%00000000,(VDPCTRL)      ;	WINDOW PLANE HORIZONTAL
0000053E 33FC 9200 00C0 0004        		MOVE.W	#$9200+%00000000,(VDPCTRL)      ;	WINDOW PLANE VERTICAL
00000546 4E75                       		RTS
00000546 4E75                       		RTS
00000548                            		INCLUDE		"SRC/SYSTEM/INITSOUND.ASM"
00000548                            INITSOUND:
00000548 4E71                       		nop	
0000054A 33FC 0100 00A1 1100        		stopZ80
00000552 33FC 0100 00A1 1200        		resetZ80
0000055A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00000560 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00000566 6100 0000                  		bsr.w	KosDec		; decompress
0000056A 33FC 0000 00A1 1200        		resetZ80a
00000572 4E71                       		nop	
00000574 4E71                       		nop	
00000576 4E71                       		nop	
00000578 4E71                       		nop	
0000057A 33FC 0100 00A1 1200        		resetZ80
00000582 33FC 0000 00A1 1100        		startZ80
0000058A 4E75                       		rts	
0000058C                            ; End of function SoundDriverLoad
0000058C                            ; End of function SoundDriverLoad
0000058C                            		INCLUDE		"SRC/SYSTEM/INITJOYPADS.ASM"
0000058C                            INITJOYPADS:
0000058C 33FC 0100 00A1 1100        		stopZ80
00000594 0839 0000 00A1 1100 66F6   		waitZ80
0000059E 7040                       		MOVEQ	#$40,	D0
000005A0 13C0 00A1 0009             		MOVE.B	D0,	(IOCTRL1+1).L
000005A6 13C0 00A1 000B             		MOVE.B	D0,	(IO_CT2_CTRL+1).L
000005AC 13C0 00A1 000D             		MOVE.B	D0,	(IOCTRL3+1).L
000005B2 33FC 0000 00A1 1100        		startZ80
000005BA 4E75                       		RTS
000005BA 4E75                       		RTS
000005BC                            		
000005BC                            		INCLUDE		"SRC/SYSTEM/Kosinski.ASM"
000005BC                            ; ---------------------------------------------------------------------------
000005BC                            ; Kosinski decompression algorithm
000005BC                            
000005BC                            ; input:
000005BC                            ;	a0 = source address
000005BC                            ;	a1 = destination address
000005BC                            
000005BC                            ; usage:
000005BC                            ;	lea	(source).l,a0
000005BC                            ;	lea	(destination).l,a1
000005BC                            ;	bsr.w	KosDec
000005BC                            ; ---------------------------------------------------------------------------
000005BC                            
000005BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BC                            
000005BC                            
000005BC                            KosDec:
000005BC                            
000005BC 558F                       		subq.l	#2,sp	; make space for 2 bytes on the stack
000005BE 1F58 0001                  		move.b	(a0)+,1(sp)
000005C2 1E98                       		move.b	(a0)+,(sp)
000005C4 3A17                       		move.w	(sp),d5	; get first description field
000005C6 780F                       		moveq	#$F,d4	; set to loop for 16 bits
000005C8                            
000005C8                            Kos_Loop:
000005C8 E24D                       		lsr.w	#1,d5	; shift bit into the c flag
000005CA 40C6                       		move	sr,d6
000005CC 51CC 0000                  		dbf	d4,@chkbit
000005D0 1F58 0001                  		move.b	(a0)+,1(sp)
000005D4 1E98                       		move.b	(a0)+,(sp)
000005D6 3A17                       		move.w	(sp),d5
000005D8 780F                       		moveq	#$F,d4
000005DA                            
000005DA                            	@chkbit:
000005DA 44C6                       		move	d6,ccr	; was the bit set?
000005DC 6400                       		bcc.s	Kos_RLE	; if not, branch
000005DE                            
000005DE 12D8                       		move.b	(a0)+,(a1)+ ; copy byte as-is
000005E0 60E6                       		bra.s	Kos_Loop
000005E2                            ; ===========================================================================
000005E2                            
000005E2                            Kos_RLE:
000005E2 7600                       		moveq	#0,d3
000005E4 E24D                       		lsr.w	#1,d5	; get next bit
000005E6 40C6                       		move	sr,d6
000005E8 51CC 0000                  		dbf	d4,@chkbit
000005EC 1F58 0001                  		move.b	(a0)+,1(sp)
000005F0 1E98                       		move.b	(a0)+,(sp)
000005F2 3A17                       		move.w	(sp),d5
000005F4 780F                       		moveq	#$F,d4
000005F6                            
000005F6                            	@chkbit:
000005F6 44C6                       		move	d6,ccr	; was the bit set?
000005F8 6500                       		bcs.s	Kos_SeparateRLE ; if yes, branch
000005FA                            
000005FA E24D                       		lsr.w	#1,d5	; shift bit into the x flag
000005FC 51CC 0000                  		dbf	d4,@loop1
00000600 1F58 0001                  		move.b	(a0)+,1(sp)
00000604 1E98                       		move.b	(a0)+,(sp)
00000606 3A17                       		move.w	(sp),d5
00000608 780F                       		moveq	#$F,d4
0000060A                            
0000060A                            	@loop1:
0000060A E353                       		roxl.w	#1,d3	; get high repeat count bit
0000060C E24D                       		lsr.w	#1,d5
0000060E 51CC 0000                  		dbf	d4,@loop2
00000612 1F58 0001                  		move.b	(a0)+,1(sp)
00000616 1E98                       		move.b	(a0)+,(sp)
00000618 3A17                       		move.w	(sp),d5
0000061A 780F                       		moveq	#$F,d4
0000061C                            
0000061C                            	@loop2:
0000061C E353                       		roxl.w	#1,d3	; get low repeat count bit
0000061E 5243                       		addq.w	#1,d3	; increment repeat count
00000620 74FF                       		moveq	#-1,d2
00000622 1418                       		move.b	(a0)+,d2 ; calculate offset
00000624 6000                       		bra.s	Kos_RLELoop
00000626                            ; ===========================================================================
00000626                            
00000626                            Kos_SeparateRLE:
00000626 1018                       		move.b	(a0)+,d0 ; get first byte
00000628 1218                       		move.b	(a0)+,d1 ; get second byte
0000062A 74FF                       		moveq	#-1,d2
0000062C 1401                       		move.b	d1,d2
0000062E EB4A                       		lsl.w	#5,d2
00000630 1400                       		move.b	d0,d2	; calculate offset
00000632 0241 0007                  		andi.w	#7,d1	; does a third byte need to be read?
00000636 6700                       		beq.s	Kos_SeparateRLE2 ; if yes, branch
00000638 1601                       		move.b	d1,d3	; copy repeat count
0000063A 5243                       		addq.w	#1,d3	; increment
0000063C                            
0000063C                            Kos_RLELoop:
0000063C 1031 2000                  		move.b	(a1,d2.w),d0 ; copy appropriate byte
00000640 12C0                       		move.b	d0,(a1)+ ; repeat
00000642 51CB FFF8                  		dbf	d3,Kos_RLELoop
00000646 6080                       		bra.s	Kos_Loop
00000648                            ; ===========================================================================
00000648                            
00000648                            Kos_SeparateRLE2:
00000648 1218                       		move.b	(a0)+,d1
0000064A 6700                       		beq.s	Kos_Done ; 0 indicates end of compressed data
0000064C 0C01 0001                  		cmpi.b	#1,d1
00000650 6700 FF76                  		beq.w	Kos_Loop ; 1 indicates new description to be read
00000654 1601                       		move.b	d1,d3	; otherwise, copy repeat count
00000656 60E4                       		bra.s	Kos_RLELoop
00000658                            ; ===========================================================================
00000658                            
00000658                            Kos_Done:
00000658 548F                       		addq.l	#2,sp	; restore stack pointer
0000065A 4E75                       		rts	
0000065C                            ; End of function KosDec
0000065C                            ; End of function KosDec
0000065C                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
0000065C                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
0000065C                            READJOYPADS:
0000065C 41F8 F604                  		LEA		(JOYPAD).W,	A0
00000660 43F9 00A1 0003             		LEA		(IODATA1).L,	A1
00000666 6100                       		BSR.S	@READPAD
00000668 5449                       		ADDQ.W	#2,	A1
0000066A 6100                       		BSR.S	@READPAD
0000066C 4E75                       		RTS
0000066E                            		
0000066E                            	@READPAD:
0000066E 12BC 0000                  		MOVE.B  #0,(A1)
00000672 4E71                       		NOP
00000674 4E71                       		NOP
00000676 1011                       		MOVE.B  (A1),D0
00000678 E508                       		LSL.B   #2,D0
0000067A 0200 00C0                  		ANDI.B  #$C0,D0
0000067E 12BC 0040                  		MOVE.B  #$40,(A1) ; '@'
00000682 4E71                       		NOP
00000684 4E71                       		NOP
00000686 1211                       		MOVE.B  (A1),D1
00000688 0201 003F                  		ANDI.B  #$3F,D1 ; '?'
0000068C 8001                       		OR.B    D1,D0
0000068E 4600                       		NOT.B   D0
00000690 1210                       		MOVE.B  (A0),D1
00000692 B101                       		EOR.B   D0,D1
00000694 10C0                       		MOVE.B  D0,(A0)+
00000696 C200                       		AND.B   D0,D1
00000698 10C1                       		MOVE.B  D1,(A0)+
0000069A 4E75                       		RTS
0000069A 4E75                       		RTS
0000069C                            		INCLUDE		"SRC/SUB/CLEARSCREEN.ASM"
0000069C                            CLEARSCREEN:                            ; ...
0000069C 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
000006A2 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000006A6 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000006AC                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000006AC 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000006B0                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000006B0                                                                    ; SET_VRAM_FILL_DMA_MODE
000006B0 2ABC 4000 0082                             MOVE.L  #$40000082,(A5) ; DO_WRITE_TO_VRAM_AT_$C000_ADDR
000006B6                                                                    ; DO_OPERATION_USING_DMA
000006B6 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000006BE                            
000006BE                            @WAITFGCLEAR:                          ; ...
000006BE 3215                                       MOVE.W  (A5),D1
000006C0 0801 0001                                  BTST    #1,D1
000006C4 66F8                                       BNE.S   @WAITFGCLEAR
000006C6 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000006CA 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
000006D0 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000006D4 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000006DA                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000006DA 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000006DE                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000006DE                                                                    ; SET_VRAM_FILL_DMA_MODE
000006DE 2ABC 6000 0082                             MOVE.L  #$60000082,(A5) ; DO_WRITE_TO_VRAM_AT_$E000_ADDR
000006E4                                                                    ; DO_OPERATION_USING_DMA
000006E4 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000006EC                            
000006EC                            @WAITBGCLEAR:                          ; ...
000006EC 3215                                       MOVE.W  (A5),D1
000006EE 0801 0001                                  BTST    #1,D1
000006F2 66F8                                       BNE.S   @WAITBGCLEAR
000006F4 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000006F8 21FC 0000 0000 F616                        MOVE.L  #0,(VDP_SCREENPOSY).W
00000700 21FC 0000 0000 F61A                        MOVE.L  #0,(VDP_SCREENPOSX).W
00000708 43F8 F800                                  LEA     (SPRITETABLE).W,A1
0000070C 7000                                       MOVEQ   #0,D0
0000070E 323C 00A0                                  MOVE.W  #$A0,D1
00000712                            
00000712                            @CLEARSPRITES:                         ; ...
00000712 22C0                                       MOVE.L  D0,(A1)+
00000714 51C9 FFFC                                  DBF     D1,@CLEARSPRITES
00000718 43F8 CC00                                  LEA     (HSCROLLTABLE).W,A1
0000071C 7000                                       MOVEQ   #0,D0
0000071E 323C 0100                                  MOVE.W  #$100,D1
00000722                            
00000722                            @CLEARHSCROLL:                         ; ...
00000722 22C0                                       MOVE.L  D0,(A1)+
00000724 51C9 FFFC                                  DBF     D1,@CLEARHSCROLL
00000728 4E75                                       RTS
0000072A                            ; END OF FUNCTION CLEARSCREEN
0000072A                            ; END OF FUNCTION CLEARSCREEN
0000072A                            		INCLUDE		"SRC/SUB/DRAWTILEMAP.ASM"
0000072A                            DrawTileMap:		;	SUBROUTINE
0000072A 4DF9 00C0 0000                             lea     VDPDATA,a6
00000730 283C 0080 0000                             move.l  #$800000,d4
00000736                            
00000736                            .LoopRow:                           
00000736 2D40 0004                                  move.l  d0,4(a6)    ; VDPCTRL
0000073A 3601                                       move.w  d1,d3
0000073C                            
0000073C                            .LoopColumn: 
0000073C 3C99                                       move.w  (a1)+,(a6)
0000073E 51CB FFFC                                  dbf     d3,.LoopColumn
00000742 D084                                       add.l   d4,d0
00000744 51CA FFF0                                  dbf     d2,.LoopRow
00000748 4E75                                       rts
00000748 4E75                                       rts
0000074A                            		INCLUDE		"SRC/SUB/VSYNC.ASM"
0000074A                            VSYNC:
0000074A 46FC 2300                  		MOVE	#$2300,	SR
0000074E                            	@WAIT:
0000074E 4A38 F62A                  		TST.B	(VBLANKCMD).W
00000752 66FA                       		BNE.S	@WAIT
00000754 4E75                       		RTS
00000754 4E75                       		RTS
00000756                            		INCLUDE		"SRC/SUB/PLAYSOUND.ASM"
00000756                            PlaySound:
00000756 13C0 FFFF F009             		move.b	d0,SOUNDPOKE
0000075C 4E75                       		rts	
0000075C 4E75                       		rts	
0000075E                            		INCLUDE		"SRC/SUB/PALFADEIN.ASM"
0000075E                            PALFADEIN:
0000075E 31FC 003F F626             		               MOVE.W  #63,(PALFADEARGS).W
00000764                            
00000764                            PALFADEIN_USERARGS:		     ; ...
00000764 7000                       		MOVEQ   #0,D0
00000766 41F8 FB00                  		LEA     (PALETTE).W,A0
0000076A 1038 F626                  		MOVE.B  (PALFADEARGS).W,D0
0000076E D0C0                       		ADDA.W  D0,A0
00000770 7200                       		MOVEQ   #0,D1
00000772 1038 F627                  		MOVE.B  (PALFADESIZE).W,D0
00000776                            
00000776                            @FILLBLACK:		            ; ...
00000776 30C1                       		MOVE.W  D1,(A0)+
00000778 51C8 FFFC                  		DBF     D0,@FILLBLACK
0000077C 383C 0014                  		MOVE.W  #$14,D4
00000780                            
00000780                            @LOOP:				 ; ...
00000780 11FC 0012 F62A             		MOVE.B  #$12,(VBLANKCMD).W
00000786 6100 FFC2                  		BSR.W   VSYNC
0000078A 6100                       		BSR.S   @DOFADECALC
0000078C                            	;	BSR.W   PROCESSARTLOADING
0000078C 51CC FFF2                  		DBF     D4,@LOOP
00000790 4E75                       		RTS
00000792                            ; ---------------------------------------------------------------------------
00000792                            
00000792                            @DOFADECALC:		           ; ...
00000792 7000                       		MOVEQ   #0,D0
00000794 41F8 FB00                  		LEA     (PALETTE).W,A0
00000798 43F8 FB80                  		LEA     (PALFADEBUFFER).W,A1
0000079C 1038 F626                  		MOVE.B  (PALFADEARGS).W,D0
000007A0 D0C0                       		ADDA.W  D0,A0
000007A2 D2C0                       		ADDA.W  D0,A1
000007A4 1038 F627                  		MOVE.B  (PALFADESIZE).W,D0
000007A8                            
000007A8                            @DOREQUESTEDSIZE:		      ; ...
000007A8 6100                       		BSR.S   @CALCCOLOR
000007AA 51C8 FFFC                  		DBF     D0,@DOREQUESTEDSIZE
000007AE 4E75                       		RTS
000007B0                            ; ---------------------------------------------------------------------------
000007B0                            
000007B0                            @CALCCOLOR:		            ; ...
000007B0 3419                       		MOVE.W  (A1)+,D2
000007B2 3610                       		MOVE.W  (A0),D3
000007B4 B642                       		CMP.W   D2,D3
000007B6 6700                       		BEQ.S   @NEXTCOLOR
000007B8 3203                       		MOVE.W  D3,D1
000007BA 0641 0200                  		ADDI.W  #$200,D1
000007BE B242                       		CMP.W   D2,D1
000007C0 6200                       		BHI.S   @ADDGREEN
000007C2 30C1                       		MOVE.W  D1,(A0)+
000007C4 4E75                       		RTS
000007C6                            ; ---------------------------------------------------------------------------
000007C6                            
000007C6                            @ADDGREEN:		             ; ...
000007C6 3203                       		MOVE.W  D3,D1
000007C8 0641 0020                  		ADDI.W  #$20,D1 ; ' '
000007CC B242                       		CMP.W   D2,D1
000007CE 6200                       		BHI.S   @ADDRED
000007D0 30C1                       		MOVE.W  D1,(A0)+
000007D2 4E75                       		RTS
000007D4                            ; ---------------------------------------------------------------------------
000007D4                            
000007D4                            @ADDRED:		               ; ...
000007D4 5458                       		ADDQ.W  #2,(A0)+
000007D6 4E75                       		RTS
000007D8                            ; ---------------------------------------------------------------------------
000007D8                            
000007D8                            @NEXTCOLOR:		            ; ...
000007D8 5448                       		ADDQ.W  #2,A0
000007DA 4E75                       		RTS
000007DC                            ; END OF FUNCTION PALFADEIN
000007DC                            ; END OF FUNCTION PALFADEIN
000007DC                            		INCLUDE		"SRC/SUB/PALFADEOUT.ASM"
000007DC                            PALFADEOUT:		             ; ...
000007DC 31FC 003F F626             		MOVE.W  #$3F,(PALFADEARGS).W ; '?'
000007E2 383C 0014                  		MOVE.W  #20,D4
000007E6                            
000007E6                            @LOOP:				 ; ...
000007E6 11FC 0012 F62A             		MOVE.B  #$12,(VBLANKCMD).W
000007EC 6100 FF5C                  		BSR.W   VSYNC
000007F0 6100                       		BSR.S   _LEVELDOFADECALC
000007F2                            	;	BSR.W   PROCESSARTLOADING
000007F2 51CC FFF2                  		DBF     D4,@LOOP
000007F6 4E75                       		RTS
000007F8                            ; ---------------------------------------------------------------------------
000007F8                            
000007F8                            _LEVELDOFADECALC:		       ; ...
000007F8                            @DOFADECALC:
000007F8 7000                       		MOVEQ   #0,D0
000007FA 41F8 FB00                  		LEA     (PALETTE).W,A0
000007FE 1038 F626                  		MOVE.B  (PALFADEARGS).W,D0
00000802 D0C0                       		ADDA.W  D0,A0
00000804 1038 F627                  		MOVE.B  (PALFADESIZE).W,D0
00000808                            
00000808                            LOC_1A02:		               ; ...
00000808 6100                       		BSR.S   LOC_1A0A
0000080A 51C8 FFFC                  		DBF     D0,LOC_1A02
0000080E 4E75                       		RTS
00000810                            ; ---------------------------------------------------------------------------
00000810                            
00000810                            LOC_1A0A:		               ; ...
00000810 3410                       		MOVE.W  (A0),D2
00000812 6700                       		BEQ.S   LOC_1A36
00000814 3202                       		MOVE.W  D2,D1
00000816 0241 000E                  		ANDI.W  #$E,D1
0000081A 6700                       		BEQ.S   LOC_1A1A
0000081C 5558                       		SUBQ.W  #2,(A0)+
0000081E 4E75                       		RTS
00000820                            ; ---------------------------------------------------------------------------
00000820                            
00000820                            LOC_1A1A:		               ; ...
00000820 3202                       		MOVE.W  D2,D1
00000822 0241 00E0                  		ANDI.W  #$E0,D1
00000826 6700                       		BEQ.S   LOC_1A28
00000828 0458 0020                  		SUBI.W  #$20,(A0)+ ; ' '
0000082C 4E75                       		RTS
0000082E                            ; ---------------------------------------------------------------------------
0000082E                            
0000082E                            LOC_1A28:		               ; ...
0000082E 3202                       		MOVE.W  D2,D1
00000830 0241 0E00                  		ANDI.W  #$E00,D1
00000834 6700                       		BEQ.S   LOC_1A36
00000836 0458 0200                  		SUBI.W  #$200,(A0)+
0000083A 4E75                       		RTS
0000083C                            ; ---------------------------------------------------------------------------
0000083C                            
0000083C                            LOC_1A36:		               ; ...
0000083C 5448                       		ADDQ.W  #2,A0
0000083E 4E75                       		RTS
00000840                            ; END OF FUNCTION PALFADEOUT
00000840                            ; END OF FUNCTION PALFADEOUT
00000840                            		
00000840                            		INCLUDE		"SRC/GAMEMODE/LOGO.ASM"
00000840                            LOGO:
00000840 4EB9 0000 069C             		JSR		CLEARSCREEN
00000846 23FC 4000 0000 00C0 0004   		move.l	#VRAMWRITE,	(VDPCTRL)
00000850 41F9 0000 0000             		LEA		LOGOART,	A0
00000856 43F9 00C0 0000             		LEA		VDPDATA,	A1
0000085C 303C 061F                  		MOVE.W	#$61F,		D0
00000860                            	@LOADGFX:
00000860 3298                       		MOVE.W	(A0)+,	(A1)
00000862 51C8 FFFC                  		DBF		D0,	@LOADGFX
00000866                            		
00000866 43F9 0000 0000 203C 661C+  	COPYTILEMAP		LOGOMAP,	$A61C,	11,	3
0000087C 43F9 0000 0000 203C 461C+  	COPYTILEMAP		LOGOMAPB,	$861C,	11,	3
00000892                            	
00000892 103C 0000                  		move.b	#bgm_GHZ,d0
00000896 6100 FEBE                  		bsr.w	PlaySound
0000089A                            	
0000089A 7000                       		MOVEQ	#0,	D0
0000089C                            	;	BSR.W	PALLOAD
0000089C 31FC 0070 F632             		MOVE.W	#112,	(PALCYCCURRENT).W
000008A2 33FC 0000 00FF F662        		MOVE.W	#0,	$FFF662
000008AA 33FC 0000 00FF F660        		MOVE.W	#0,	$FFF660
000008B2 33FC 0104 FFFF F614        		MOVE.W	#260,	TIMER
000008BA 3038 F60C                  		MOVE.W	(VDPBUFFER).W,	D0
000008BE 0000 0040                  		ORI.B	#%1000000,	D0
000008C2 33C0 00C0 0004             		MOVE.W	D0,	(VDPCTRL).L
000008C8                            		
000008C8                            	@LOOP:
000008C8 11FC 0001 F62A             		MOVE.B	#1,	(VBLANKCMD).W
000008CE 4EB9 0000 074A             		JSR		VSYNC
000008D4 6100 0000                  		BSR.W	_LOGO_PALCYC
000008D8 4A79 FFFF F614             		TST.W	TIMER
000008DE 6700                       		BEQ.S	@EXIT
000008E0 0239 0080 FFFF F605        		ANDI.B	#%10000000,	JOYPADPRESS
000008E8 67DE                       		BEQ.S	@LOOP
000008EA                            	@EXIT:
000008EA                            	;	JSR		PALFADEOUT
000008EA 13FC 0004 FFFF F600        		MOVE.B	#1*4,	GAMEMODE
000008F2 4E75                       		RTS
000008F4                            		
000008F4                            _LOGO_PALCYC:
000008F4 5379 FFFF F634             		SUBQ.W	#1,	PALCYCTIMER
000008FA 6A00                       		BPL.S	@EXIT
000008FC 33FC 0003 FFFF F634        		MOVE.W	#3,	PALCYCTIMER
00000904 3039 FFFF F632             		MOVE.W	PALCYCCURRENT,	D0
0000090A 6B00                       		BMI.S	@EXIT
0000090C 5579 FFFF F632             		SUBQ.W	#2,	PALCYCCURRENT
00000912 41F9 0000 0000             		LEA		LOGO_CYC,	A0
00000918 43F8 FB04                  		LEA		((PALETTE+$04)).W,	A1
0000091C D0C0                       		ADDA.W	D0,	A0
0000091E 22D8                       		MOVE.L	(A0)+,(A1)+
00000920 22D8                       		MOVE.L	(A0)+,(A1)+
00000922 22D8                       		MOVE.L	(A0)+,(A1)+
00000924 22D8                       		MOVE.L	(A0)+,(A1)+
00000926 22D8                       		MOVE.L	(A0)+,(A1)+
00000928 22D8                       		MOVE.L	(A0)+,(A1)+
0000092A 41F9 0000 0000             		LEA		LOGO_CYCB,	A0
00000930 43F8 FB24                  		LEA		((PALETTE+$24)).W,	A1
00000934 D0C0                       		ADDA.W	D0,	A0
00000936 22D8                       		MOVE.L	(A0)+,(A1)+
00000938 22D8                       		MOVE.L	(A0)+,(A1)+
0000093A 22D8                       		MOVE.L	(A0)+,(A1)+
0000093C 22D8                       		MOVE.L	(A0)+,(A1)+
0000093E 22D8                       		MOVE.L	(A0)+,(A1)+
00000940 22D8                       		MOVE.L	(A0)+,(A1)+
00000942                            	@EXIT:
00000942 4E75                       		RTS
00000944                            		
00000944                            LOGOART:	INCBIN		"ART/LOGO.UNC"
00001564                            LOGOMAP:	INCBIN		"MAP/LOGO.MAP"
000015C4                            LOGOMAPB:	INCBIN		"MAP/LOGOB.MAP"
00001624                            LOGO_CYC:
00001624 0000                       		DC.W $000
00001626 0000                       		DC.W $000
00001628 0000                       		DC.W $000
0000162A 0000                       		DC.W $000
0000162C 0000                       		DC.W $000
0000162E 0000                       		DC.W $000
00001630 0000                       		DC.W $000
00001632 0000                       		DC.W $000
00001634 0000                       		DC.W $000
00001636 0000                       		DC.W $000
00001638 0000                       		DC.W $000
0000163A 0200                       		DC.W $200
0000163C 0400                       		DC.W $400
0000163E 0600                       		DC.W $600
00001640 0800                       		DC.W $800
00001642 0A00                       		DC.W $A00
00001644 0C00                       		DC.W $C00
00001646 0E00                       		DC.W $E00
00001648 0E20                       		DC.W $E20
0000164A 0E40                       		DC.W $E40
0000164C 0E60                       		DC.W $E60
0000164E 0E80                       		DC.W $E80
00001650 0EA0                       		DC.W $EA0
00001652 0EC0                       		DC.W $EC0
00001654 0EA0                       		DC.W $EA0
00001656 0E80                       		DC.W $E80
00001658 0E60                       		DC.W $E60
0000165A 0E40                       		DC.W $E40
0000165C 0E20                       		DC.W $E20
0000165E 0E00                       		DC.W $E00
00001660 0C00                       		DC.W $C00
00001662 0A00                       		DC.W $A00
00001664 0800                       		DC.W $800
00001666 0600                       		DC.W $600
00001668 0800                       		DC.W $800
0000166A 0A00                       		DC.W $A00
0000166C 0C00                       		DC.W $C00
0000166E 0E00                       		DC.W $E00
00001670 0E20                       		DC.W $E20
00001672 0E40                       		DC.W $E40
00001674 0E60                       		DC.W $E60
00001676 0E80                       		DC.W $E80
00001678 0EA0                       		DC.W $EA0
0000167A 0EC0                       		DC.W $EC0
0000167C 0EA0                       		DC.W $EA0
0000167E 0E80                       		DC.W $E80
00001680 0E60                       		DC.W $E60
00001682 0E40                       		DC.W $E40
00001684 0E20                       		DC.W $E20
00001686 0E00                       		DC.W $E00
00001688 0C00                       		DC.W $C00
0000168A 0A00                       		DC.W $A00
0000168C 0800                       		DC.W $800
0000168E 0600                       		DC.W $600
00001690 0400                       		DC.W $400
00001692 0200                       		DC.W $200
00001694 0000                       		DC.W $000
00001696 0000                       		DC.W $000
00001698 0000                       		DC.W $000
0000169A 0000                       		DC.W $000
0000169C 0000                       		DC.W $000
0000169E 0000                       		DC.W $000
000016A0 0000                       		DC.W $000
000016A2 0000                       		DC.W $000
000016A4 0000                       		DC.W $000
000016A6 0000                       		DC.W $000
000016A8 0000                       		DC.W $000
000016AA                            LOGO_CYCB:
000016AA 0000                       		DC.W $000
000016AC 0000                       		DC.W $000
000016AE 0000                       		DC.W $000
000016B0 0000                       		DC.W $000
000016B2 0000                       		DC.W $000
000016B4 0000                       		DC.W $000
000016B6 0000                       		DC.W $000
000016B8 0000                       		DC.W $000
000016BA 0000                       		DC.W $000
000016BC 0000                       		DC.W $000
000016BE 0000                       		DC.W $000
000016C0 0200                       		DC.W $200
000016C2 0422                       		DC.W $422
000016C4 0644                       		DC.W $644
000016C6 0866                       		DC.W $866
000016C8 0A88                       		DC.W $A88
000016CA 0CAA                       		DC.W $CAA
000016CC 0ECC                       		DC.W $ECC
000016CE 0EEE                       		DC.W $EEE
000016D0 0EEE                       		DC.W $EEE
000016D2 0EEE                       		DC.W $EEE
000016D4 0EEE                       		DC.W $EEE
000016D6 0EEE                       		DC.W $EEE
000016D8 0EEE                       		DC.W $EEE
000016DA 0EEE                       		DC.W $EEE
000016DC 0EEE                       		DC.W $EEE
000016DE 0EEE                       		DC.W $EEE
000016E0 0EEE                       		DC.W $EEE
000016E2 0EEE                       		DC.W $EEE
000016E4 0EEE                       		DC.W $EEE
000016E6 0EEE                       		DC.W $EEE
000016E8 0EEE                       		DC.W $EEE
000016EA 0EEE                       		DC.W $EEE
000016EC 0EEE                       		DC.W $EEE
000016EE 0EEE                       		DC.W $EEE
000016F0 0EEE                       		DC.W $EEE
000016F2 0EEE                       		DC.W $EEE
000016F4 0EEE                       		DC.W $EEE
000016F6 0EEE                       		DC.W $EEE
000016F8 0EEE                       		DC.W $EEE
000016FA 0EEE                       		DC.W $EEE
000016FC 0EEE                       		DC.W $EEE
000016FE 0EEE                       		DC.W $EEE
00001700 0EEE                       		DC.W $EEE
00001702 0EEE                       		DC.W $EEE
00001704 0EEE                       		DC.W $EEE
00001706 0EEE                       		DC.W $EEE
00001708 0EEE                       		DC.W $EEE
0000170A 0EEE                       		DC.W $EEE
0000170C 0ECC                       		DC.W $ECC
0000170E 0CAA                       		DC.W $CAA
00001710 0A88                       		DC.W $A88
00001712 0866                       		DC.W $866
00001714 0644                       		DC.W $644
00001716 0422                       		DC.W $422
00001718 0200                       		DC.W $200
0000171A 0000                       		DC.W $000
0000171C 0000                       		DC.W $000
0000171E 0000                       		DC.W $000
00001720 0000                       		DC.W $000
00001722 0000                       		DC.W $000
00001724 0000                       		DC.W $000
00001726 0000                       		DC.W $000
00001728 0000                       		DC.W $000
0000172A 0000                       		DC.W $000
0000172C 0000                       		DC.W $000
0000172E 0000                       		DC.W $000
0000172E 0000                       		DC.W $000
00001730                            	MAIN:
00001730 41F9 0000 0000             		LEA		TITLEPAL,	A0
00001736 43F9 FFFF FB80             		LEA		PALFADEBUFFER,	A1
0000173C 103C 0010                  		MOVE.B	#16,	D0
00001740                            	@PALLOOP:
00001740 22D8                       		MOVE.L	(A0)+,	(A1)+
00001742 51C8 FFFC                  		DBF		D0,	@PALLOOP
00001746                            		
00001746 4EB9 0000 075E             		JSR		PALFADEIN
0000174C                            	.loop:
0000174C 11FC 0001 F62A             		MOVE.B	#1,	(VBLANKCMD).W
00001752 4EB9 0000 074A             		jsr		VSYNC
00001758 60F2                       		bra.s	.loop
0000175A 4E75                       		rts
0000175C                            		
0000175C                            TITLEPAL:	INCBIN		"PAL/TITLE.PAL"
000017DC                            		
000017DC                            	ALIGN	$2000
00002000                            		include	"SOUND/driver.asm"
00002000                            ; ---------------------------------------------------------------------------
00002000                            ; Modified SMPS 68k Type 1b sound driver
00002000                            ; ---------------------------------------------------------------------------
00002000                            ; Go_SoundTypes:
00002000 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00002004                            ; Go_SoundD0:
00002004 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00002008 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0000200C 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00002010                            ; off_719A0:
00002010 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00002014 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00002018                            ; ---------------------------------------------------------------------------
00002018                            ; PSG instruments used in music
00002018                            ; ---------------------------------------------------------------------------
00002018                            PSG_Index:
00002018 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00002024 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00002030 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0000203C                            PSG1:		incbin	"sound/psg/psg1.bin"
00002053                            PSG2:		incbin	"sound/psg/psg2.bin"
0000205A                            PSG3:		incbin	"sound/psg/psg3.bin"
0000206B                            PSG4:		incbin	"sound/psg/psg4.bin"
00002076                            PSG6:		incbin	"sound/psg/psg6.bin"
00002085                            PSG5:		incbin	"sound/psg/psg5.bin"
000020AF                            PSG7:		incbin	"sound/psg/psg7.bin"
000020CB                            PSG8:		incbin	"sound/psg/psg8.bin"
000020F3                            PSG9:		incbin	"sound/psg/psg9.bin"
00002104                            ; ---------------------------------------------------------------------------
00002104                            ; New tempos for songs during speed shoes
00002104                            ; ---------------------------------------------------------------------------
00002104                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00002104                            ; tempos while speed shoes are active. If you don't want that, you should add
00002104                            ; their "correct" sped-up main tempos to the list.
00002104                            ; byte_71A94:
00002104                            SpeedUpIndex:
00002104 07                         		dc.b 7		; GHZ
00002105 72                         		dc.b $72	; LZ
00002106 73                         		dc.b $73	; MZ
00002107 26                         		dc.b $26	; SLZ
00002108 15                         		dc.b $15	; SYZ
00002109 08                         		dc.b 8		; SBZ
0000210A FF                         		dc.b $FF	; Invincibility
0000210B 05                         		dc.b 5		; Extra Life
0000210C                            		;dc.b ?		; Special Stage
0000210C                            		;dc.b ?		; Title Screen
0000210C                            		;dc.b ?		; Ending
0000210C                            		;dc.b ?		; Boss
0000210C                            		;dc.b ?		; FZ
0000210C                            		;dc.b ?		; Sonic Got Through
0000210C                            		;dc.b ?		; Game Over
0000210C                            		;dc.b ?		; Continue Screen
0000210C                            		;dc.b ?		; Credits
0000210C                            		;dc.b ?		; Drowning
0000210C                            		;dc.b ?		; Get Emerald
0000210C                            
0000210C                            ; ---------------------------------------------------------------------------
0000210C                            ; Music	Pointers
0000210C                            ; ---------------------------------------------------------------------------
0000210C                            MusicIndex:
0000210C 0000 0000                  ptr_mus81:	dc.l S81
00002110                            ptr_musend
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00002110                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00002110                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00002110                            ; any music or SFX can override it (as long as it can override whatever was
00002110                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00002110                            ; will only override special SFX and music will only override music.
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; SoundTypes:
00002110                            SoundPriorities:
00002110 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
0000211F 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0000212F 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0000213F 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0000214F 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0000215F 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
0000216F 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00002174                            
00002174                            ; ---------------------------------------------------------------------------
00002174                            ; Subroutine to update music more than once per frame
00002174                            ; (Called by horizontal & vert. interrupts)
00002174                            ; ---------------------------------------------------------------------------
00002174                            
00002174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002174                            
00002174                            ; sub_71B4C:
00002174                            UpdateMusic:
00002174 33FC 0100 00A1 1100        		stopZ80
0000217C 4E71                       		nop	
0000217E 4E71                       		nop	
00002180 4E71                       		nop	
00002182                            ; loc_71B5A:
00002182                            @updateloop:
00002182 0839 0000 00A1 1100        		btst	#0,(Z80BUS).l		; Is the z80 busy?
0000218A 66F6                       		bne.s	@updateloop			; If so, wait
0000218C                            
0000218C 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00002194 6700                       		beq.s	@driverinput			; Branch if yes
00002196 33FC 0000 00A1 1100        		startZ80
0000219E 4E71                       		nop	
000021A0 4E71                       		nop	
000021A2 4E71                       		nop	
000021A4 4E71                       		nop	
000021A6 4E71                       		nop	
000021A8 60CA                       		bra.s	UpdateMusic
000021AA                            ; ===========================================================================
000021AA                            ; loc_71B82:
000021AA                            @driverinput:
000021AA 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000021B0 422E 000E                  		clr.b	f_voice_selector(a6)
000021B4 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000021B8 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000021BC 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
000021C0 6600                       		bne.s	@skipdelay
000021C2 4EBA 0000                  		jsr	TempoWait(pc)
000021C6                            ; loc_71B9E:
000021C6                            @skipdelay:
000021C6 102E 0004                  		move.b	v_fadeout_counter(a6),d0
000021CA 6700                       		beq.s	@skipfadeout
000021CC 4EBA 0000                  		jsr	DoFadeOut(pc)
000021D0                            ; loc_71BA8:
000021D0                            @skipfadeout:
000021D0 4A2E 0024                  		tst.b	f_fadein_flag(a6)
000021D4 6700                       		beq.s	@skipfadein
000021D6 4EBA 0000                  		jsr	DoFadeIn(pc)
000021DA                            ; loc_71BB2:
000021DA                            @skipfadein:
000021DA                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
000021DA 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for playing?
000021DE 6700                       		beq.s	@nosndinput		; if not, branch
000021E0 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000021E4                            ; loc_71BBC:
000021E4                            @nosndinput:
000021E4 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000021EA 6700                       		beq.s	@nonewsound		; If yes, branch
000021EC 4EBA 0000                  		jsr	PlaySoundID(pc)
000021F0                            ; loc_71BC8:
000021F0                            @nonewsound:
000021F0 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000021F4 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000021F6 6A00                       		bpl.s	@dacdone		; Branch if not
000021F8 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000021FC                            ; loc_71BD4:
000021FC                            @dacdone:
000021FC 422E 0008                  		clr.b	f_updating_dac(a6)
00002200 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00002202                            ; loc_71BDA:
00002202                            @bgmfmloop:
00002202 DAFC 0030                  		adda.w	#TrackSz,a5
00002206 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002208 6A00                       		bpl.s	@bgmfmnext		; Branch if not
0000220A 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0000220E                            ; loc_71BE6:
0000220E                            @bgmfmnext:
0000220E 51CF FFF2                  		dbf	d7,@bgmfmloop
00002212                            
00002212 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00002214                            ; loc_71BEC:
00002214                            @bgmpsgloop:
00002214 DAFC 0030                  		adda.w	#TrackSz,a5
00002218 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0000221A 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
0000221C 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00002220                            ; loc_71BF8:
00002220                            @bgmpsgnext:
00002220 51CF FFF2                  		dbf	d7,@bgmpsgloop
00002224                            
00002224 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
0000222A 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
0000222C                            ; loc_71C04:
0000222C                            @sfxfmloop:
0000222C DAFC 0030                  		adda.w	#TrackSz,a5
00002230 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002232 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00002234 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00002238                            ; loc_71C10:
00002238                            @sfxfmnext:
00002238 51CF FFF2                  		dbf	d7,@sfxfmloop
0000223C                            
0000223C 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
0000223E                            ; loc_71C16:
0000223E                            @sfxpsgloop:
0000223E DAFC 0030                  		adda.w	#TrackSz,a5
00002242 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002244 6A00                       		bpl.s	@sfxpsgnext		; Branch if not
00002246 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0000224A                            ; loc_71C22:
0000224A                            @sfxpsgnext:
0000224A 51CF FFF2                  		dbf	d7,@sfxpsgloop
0000224E                            		
0000224E 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00002254 DAFC 0030                  		adda.w	#TrackSz,a5
00002258 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0000225A 6A00                       		bpl.s	@specfmdone		; Branch if not
0000225C 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00002260                            ; loc_71C38:
00002260                            @specfmdone:
00002260 DAFC 0030                  		adda.w	#TrackSz,a5
00002264 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00002266 6A00                       		bpl.s	DoStartZ80		; Branch if not
00002268 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0000226C                            ; loc_71C44:
0000226C                            DoStartZ80:
0000226C 33FC 0000 00A1 1100        		startZ80
00002274 4E75                       		rts	
00002276                            ; End of function UpdateMusic
00002276                            
00002276                            
00002276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002276                            
00002276                            ; sub_71C4E: UpdateDAC:
00002276                            DACUpdateTrack:
00002276 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
0000227A 6600                       		bne.s	@locret				; Return if not
0000227C 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00002282                            ;DACDoNext:
00002282 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00002286                            ; loc_71C5E:
00002286                            @sampleloop:
00002286 7A00                       		moveq	#0,d5
00002288 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
0000228A 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0000228E 6500                       		blo.s	@notcoord	; Branch if not
00002290 4EBA 0000                  		jsr	CoordFlag(pc)
00002294 60F0                       		bra.s	@sampleloop
00002296                            ; ===========================================================================
00002296                            ; loc_71C6E:
00002296                            @notcoord:
00002296 4A05                       		tst.b	d5			; Is it a sample?
00002298 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
0000229A 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
0000229E 1A1C                       		move.b	(a4)+,d5		; Get another byte
000022A0 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
000022A2 534C                       		subq.w	#1,a4			; Put byte back
000022A4 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
000022AA 6000                       		bra.s	@gotsampleduration
000022AC                            ; ===========================================================================
000022AC                            ; loc_71C84:
000022AC                            @gotduration:
000022AC 4EBA 0000                  		jsr	SetDuration(pc)
000022B0                            ; loc_71C88:
000022B0                            @gotsampleduration:
000022B0 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
000022B4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000022B8 6600                       		bne.s	@locret			; Return if yes
000022BA 7000                       		moveq	#0,d0
000022BC 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
000022C0 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
000022C4 6700                       		beq.s	@locret			; Return if yes
000022C6 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
000022CA 6600                       		bne.s	@timpani		; Various timpani
000022CC 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
000022D2                            ; locret_71CAA:
000022D2                            @locret:
000022D2 4E75                       		rts	
000022D4                            ; ===========================================================================
000022D4                            ; loc_71CAC:
000022D4                            @timpani:
000022D4 0400 0088                  		subi.b	#$88,d0		; Convert into an index
000022D8 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
000022DC                            		; Warning: this affects the raw pitch of sample $83, meaning it will
000022DC                            		; use this value from then on.
000022DC 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
000022E2 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
000022EA 4E75                       		rts	
000022EC                            ; End of function DACUpdateTrack
000022EC                            
000022EC                            ; ===========================================================================
000022EC                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
000022EC                            ; Also, $8C-$8D are so slow you may want to skip them.
000022EC                            ; byte_71CC4:
000022EC 1215 1C1D FFFF             DAC_sample_rate: dc.b $12, $15, $1C, $1D, $FF, $FF
000022F2                            
000022F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022F2                            
000022F2                            ; sub_71CCA:
000022F2                            FMUpdateTrack:
000022F2 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
000022F6 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
000022F8 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000022FC 4EBA 0000                  		jsr	FMDoNext(pc)
00002300 4EBA 0000                  		jsr	FMPrepareNote(pc)
00002304 6000 0000                  		bra.w	FMNoteOn
00002308                            ; ===========================================================================
00002308                            ; loc_71CE0:
00002308                            @notegoing:
00002308 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
0000230C 4EBA 0000                  		jsr	DoModulation(pc)
00002310 6000 0000                  		bra.w	FMUpdateFreq
00002314                            ; End of function FMUpdateTrack
00002314                            
00002314                            
00002314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002314                            
00002314                            ; sub_71CEC:
00002314                            FMDoNext:
00002314 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00002318 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
0000231C                            ; loc_71CF4:
0000231C                            @noteloop:
0000231C 7A00                       		moveq	#0,d5
0000231E 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00002320 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00002324 6500                       		blo.s	@gotnote	; Branch if not
00002326 4EBA 0000                  		jsr	CoordFlag(pc)
0000232A 60F0                       		bra.s	@noteloop
0000232C                            ; ===========================================================================
0000232C                            ; loc_71D04:
0000232C                            @gotnote:
0000232C 4EBA 0000                  		jsr	FMNoteOff(pc)
00002330 4A05                       		tst.b	d5		; Is this a note?
00002332 6A00                       		bpl.s	@gotduration	; Branch if not
00002334 4EBA 0000                  		jsr	FMSetFreq(pc)
00002338 1A1C                       		move.b	(a4)+,d5	; Get another byte
0000233A 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
0000233C 534C                       		subq.w	#1,a4		; Otherwise, put it back
0000233E 6000 0000                  		bra.w	FinishTrackUpdate
00002342                            ; ===========================================================================
00002342                            ; loc_71D1A:
00002342                            @gotduration:
00002342 4EBA 0000                  		jsr	SetDuration(pc)
00002346 6000 0000                  		bra.w	FinishTrackUpdate
0000234A                            ; End of function FMDoNext
0000234A                            
0000234A                            
0000234A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234A                            
0000234A                            ; sub_71D22:
0000234A                            FMSetFreq:
0000234A 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
0000234E 6700                       		beq.s	TrackSetRest
00002350 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00002354 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00002358 E34D                       		lsl.w	#1,d5
0000235A 41FA 0000                  		lea	FMFrequencies(pc),a0
0000235E 3C30 5000                  		move.w	(a0,d5.w),d6
00002362 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00002366 4E75                       		rts	
00002368                            ; End of function FMSetFreq
00002368                            
00002368                            
00002368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002368                            
00002368                            ; sub_71D40:
00002368                            SetDuration:
00002368 1005                       		move.b	d5,d0
0000236A 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
0000236E                            ; loc_71D46:
0000236E                            @multloop:
0000236E 5301                       		subq.b	#1,d1
00002370 6700                       		beq.s	@donemult
00002372 D005                       		add.b	d5,d0
00002374 60F8                       		bra.s	@multloop
00002376                            ; ===========================================================================
00002376                            ; loc_71D4E:
00002376                            @donemult:
00002376 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
0000237A 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
0000237E 4E75                       		rts	
00002380                            ; End of function SetDuration
00002380                            
00002380                            ; ===========================================================================
00002380                            ; loc_71D58:
00002380                            TrackSetRest:
00002380 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00002384 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00002388                            
00002388                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002388                            
00002388                            ; sub_71D60:
00002388                            FinishTrackUpdate:
00002388 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
0000238C 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00002392 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00002396 6600                       		bne.s	@locret				; If so, branch
00002398 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
0000239E 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
000023A2 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
000023A6 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
000023A8 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
000023AC 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
000023B0 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
000023B4 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
000023B8 1018                       		move.b	(a0)+,d0			; Get steps
000023BA E208                       		lsr.b	#1,d0				; Halve them
000023BC 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
000023C0 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
000023C4                            ; locret_71D9C:
000023C4                            @locret:
000023C4 4E75                       		rts	
000023C6                            ; End of function FinishTrackUpdate
000023C6                            
000023C6                            
000023C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023C6                            
000023C6                            ; sub_71D9E: NoteFillUpdate
000023C6                            NoteTimeoutUpdate:
000023C6 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
000023CA 6700                       		beq.s	@locret
000023CC 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
000023D0 6600                       		bne.s	@locret				; Return if it hasn't expired
000023D2 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
000023D6 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a PSG track?
000023DA 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
000023DE 4EBA 0000                  		jsr	FMNoteOff(pc)
000023E2 584F                       		addq.w	#4,sp				; Do not return to caller
000023E4 4E75                       		rts	
000023E6                            ; ===========================================================================
000023E6                            ; loc_71DBE:
000023E6                            @psgnoteoff:
000023E6 4EBA 0000                  		jsr	PSGNoteOff(pc)
000023EA 584F                       		addq.w	#4,sp		; Do not return to caller
000023EC                            ; locret_71DC4:
000023EC                            @locret:
000023EC 4E75                       		rts	
000023EE                            ; End of function NoteTimeoutUpdate
000023EE                            
000023EE                            
000023EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023EE                            
000023EE                            ; sub_71DC6:
000023EE                            DoModulation:
000023EE 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
000023F0 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
000023F4 6700                       		beq.s	@locret				; Return if not
000023F6 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
000023FA 6700                       		beq.s	@waitdone			; If yes, branch
000023FC 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00002400 4E75                       		rts	
00002402                            ; ===========================================================================
00002402                            ; loc_71DDA:
00002402                            @waitdone:
00002402 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00002406 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00002408 4E75                       		rts	
0000240A                            ; ===========================================================================
0000240A                            ; loc_71DE2:
0000240A                            @updatemodulation:
0000240A 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
0000240E 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00002414 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00002418 6600                       		bne.s	@calcfreq			; If nonzero, branch
0000241A 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00002420 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00002424 4E75                       		rts	
00002426                            ; ===========================================================================
00002426                            ; loc_71DFE:
00002426                            @calcfreq:
00002426 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
0000242A 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
0000242E 4886                       		ext.w	d6
00002430 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00002434 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00002438 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
0000243C 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
0000243E                            ; locret_71E16:
0000243E                            @locret:
0000243E 4E75                       		rts	
00002440                            ; End of function DoModulation
00002440                            
00002440                            
00002440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002440                            
00002440                            ; sub_71E18:
00002440                            FMPrepareNote:
00002440 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00002444 6600                       		bne.s	locret_71E48		; Return if so
00002446 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
0000244A 6700                       		beq.s	FMSetRest		; Branch if zero
0000244C                            ; loc_71E24:
0000244C                            FMUpdateFreq:
0000244C 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00002450 4880                       		ext.w	d0
00002452 DC40                       		add.w	d0,d6			; Add note frequency
00002454 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00002458 6600                       		bne.s	locret_71E48		; Return if so
0000245A 3206                       		move.w	d6,d1
0000245C E049                       		lsr.w	#8,d1
0000245E 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00002462 4EBA 0000                  		jsr	WriteFMIorII(pc)
00002466 1206                       		move.b	d6,d1
00002468 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
0000246C 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00002470                            ; locret_71E48:
00002470                            locret_71E48:
00002470 4E75                       		rts	
00002472                            ; ===========================================================================
00002472                            ; loc_71E4A:
00002472                            FMSetRest:
00002472 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00002476 4E75                       		rts	
00002478                            ; End of function FMPrepareNote
00002478                            
00002478                            ; ===========================================================================
00002478                            ; loc_71E50:
00002478                            PauseMusic:
00002478 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
0000247A 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00002480 6700 0000                  		beq.w	@unpausedallfm
00002484 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
0000248A 7602                       		moveq	#2,d3
0000248C 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00002490 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00002492                            ; loc_71E6A:
00002492                            @killpanloop:
00002492 4EBA 0000                  		jsr	WriteFMI(pc)
00002496 4EBA 0000                  		jsr	WriteFMII(pc)
0000249A 5200                       		addq.b	#1,d0
0000249C 51CB FFF4                  		dbf	d3,@killpanloop
000024A0                            
000024A0 7602                       		moveq	#2,d3
000024A2 7028                       		moveq	#$28,d0		; Key on/off register
000024A4                            ; loc_71E7C:
000024A4                            @noteoffloop:
000024A4 1203                       		move.b	d3,d1		; FM1, FM2, FM3
000024A6 4EBA 0000                  		jsr	WriteFMI(pc)
000024AA 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000024AC 4EBA 0000                  		jsr	WriteFMI(pc)
000024B0 51CB FFF2                  		dbf	d3,@noteoffloop
000024B4                            
000024B4 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000024B8 6000 FDB2                  		bra.w	DoStartZ80
000024BC                            ; ===========================================================================
000024BC                            ; loc_71E94:
000024BC                            @unpausemusic:
000024BC 422E 0003                  		clr.b	f_pausemusic(a6)
000024C0 7630                       		moveq	#TrackSz,d3
000024C2 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000024C6 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000024C8                            ; loc_71EA0:
000024C8                            @bgmfmloop:
000024C8 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000024CC 6700                       		beq.s	@bgmfmnext		; Branch if not
000024CE 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000024D2 6600                       		bne.s	@bgmfmnext		; Branch if yes
000024D4 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000024D8 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000024DC 4EBA 0000                  		jsr	WriteFMIorII(pc)
000024E0                            ; loc_71EB8:
000024E0                            @bgmfmnext:
000024E0 DAC3                       		adda.w	d3,a5
000024E2 51CC FFE4                  		dbf	d4,@bgmfmloop
000024E6                            
000024E6 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
000024EA 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
000024EC                            ; loc_71EC4:
000024EC                            @sfxfmloop:
000024EC 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000024F0 6700                       		beq.s	@sfxfmnext		; Branch if not
000024F2 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000024F6 6600                       		bne.s	@sfxfmnext		; Branch if yes
000024F8 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000024FC 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00002500 4EBA 0000                  		jsr	WriteFMIorII(pc)
00002504                            ; loc_71EDC:
00002504                            @sfxfmnext:
00002504 DAC3                       		adda.w	d3,a5
00002506 51CC FFE4                  		dbf	d4,@sfxfmloop
0000250A                            
0000250A 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
0000250E 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00002512 6700                       		beq.s	@unpausedallfm		; Branch if not
00002514 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00002518 6600                       		bne.s	@unpausedallfm		; Branch if yes
0000251A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0000251E 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00002522 4EBA 0000                  		jsr	WriteFMIorII(pc)
00002526                            ; loc_71EFE:
00002526                            @unpausedallfm:
00002526 6000 FD44                  		bra.w	DoStartZ80
0000252A                            
0000252A                            ; ---------------------------------------------------------------------------
0000252A                            ; Subroutine to	play a sound or	music track
0000252A                            ; ---------------------------------------------------------------------------
0000252A                            
0000252A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000252A                            
0000252A                            ; Sound_Play:
0000252A                            CycleSoundQueue:
0000252A 2079 0000 2000             		movea.l	(Go_SoundPriorities).l,a0
00002530 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00002534 162E 0000                  		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00002538 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
0000253A                            ; loc_71F12:
0000253A                            @inputloop:
0000253A 1011                       		move.b	(a1),d0			; move track number to d0
0000253C 1200                       		move.b	d0,d1
0000253E 4219                       		clr.b	(a1)+			; Clear entry
00002540 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00002544 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00002546 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
0000254C 6700                       		beq.s	@havesound		; If yes, branch
0000254E 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00002552 6000                       		bra.s	@nextinput
00002554                            ; ===========================================================================
00002554                            ; loc_71F2C:
00002554                            @havesound:
00002554 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00002558 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
0000255C B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
0000255E 6500                       		blo.s	@nextinput		; Branch if yes
00002560 1602                       		move.b	d2,d3			; Store new priority
00002562 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for playing
00002566                            ; loc_71F3E:
00002566                            @nextinput:
00002566 51CC FFD2                  		dbf	d4,@inputloop
0000256A                            
0000256A 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
0000256C 6B00                       		bmi.s	@locret
0000256E 1D43 0000                  		move.b	d3,v_sndprio(a6)	; Set new sound priority
00002572                            ; locret_71F4A:
00002572                            @locret:
00002572 4E75                       		rts	
00002574                            ; End of function CycleSoundQueue
00002574                            
00002574                            
00002574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002574                            
00002574                            ; Sound_ChkValue:
00002574                            PlaySoundID:
00002574 7E00                       		moveq	#0,d7
00002576 1E2E 0009                  		move.b	v_sound_id(a6),d7
0000257A 6700 0000                  		beq.w	StopAllSound
0000257E 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00002580 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00002586                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00002586                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00002586                            		; See LevSel_NoCheat for more.
00002586 0C07 0000                  		cmpi.b	#bgm__Last+$C,d7	; Is this music ($81-$9F)?
0000258A 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
0000258E 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00002592 6500 0000                  		blo.w	@locret			; Return if yes
00002596 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
0000259A 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
0000259E 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
000025A2 6500 0000                  		blo.w	@locret			; Return if yes
000025A6                            		; DANGER! Special SFXes end at $D0, yet this checks until $DF; attempting to
000025A6                            		; play sounds $D1-$DF will cause a crash! Remove the '+$10' and change the 'blo' to a 'bls'
000025A6                            		; and uncomment the two lines below to fix this.
000025A6 0C07 0000                  		cmpi.b	#spec__Last+$10,d7	; Is this special sfx ($D0-$DF)?
000025AA 6500 0000                  		blo.w	Sound_PlaySpecial	; Branch if yes
000025AE                            		;cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000025AE                            		;blo.w	@locret			; Return if yes
000025AE 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000025B2 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000025B4                            ; locret_71F8C:
000025B4                            @locret:
000025B4 4E75                       		rts	
000025B6                            ; ===========================================================================
000025B6                            
000025B6                            Sound_E0toE4:
000025B6 0407 00E0                  		subi.b	#flg__First,d7
000025BA E54F                       		lsl.w	#2,d7
000025BC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000025C0                            ; ===========================================================================
000025C0                            
000025C0                            Sound_ExIndex:
000025C0 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000025C4 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000025C8 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
000025CC 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
000025D0 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
000025D4                            ptr_flgend
000025D4                            ; ===========================================================================
000025D4                            ; ---------------------------------------------------------------------------
000025D4                            ; Play "Say-gaa" PCM sound
000025D4                            ; ---------------------------------------------------------------------------
000025D4                            ; Sound_E1: PlaySega:
000025D4                            PlaySegaSound:
000025D4 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
000025DC 33FC 0000 00A1 1100        		startZ80
000025E4 323C 0011                  		move.w	#$11,d1
000025E8                            ; loc_71FC0:
000025E8                            @busyloop_outer:
000025E8 303C FFFF                  		move.w	#-1,d0
000025EC                            ; loc_71FC4:
000025EC                            @busyloop:
000025EC 4E71                       		nop	
000025EE 51C8 FFFC                  		dbf	d0,@busyloop
000025F2                            
000025F2 51C9 FFF4                  		dbf	d1,@busyloop_outer
000025F6                            
000025F6 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000025F8 4E75                       		rts	
000025FA                            ; ===========================================================================
000025FA                            ; ---------------------------------------------------------------------------
000025FA                            ; Play music track $81-$9F
000025FA                            ; ---------------------------------------------------------------------------
000025FA                            ; Sound_81to9F:
000025FA                            Sound_PlayBGM:
000025FA                            ; loc_72024:
000025FA                            @bgmnot1up:
000025FA 422E 0027                  		clr.b	f_1up_playing(a6)
000025FE 422E 0026                  		clr.b	v_fadein_counter(a6)
00002602                            ; loc_7202C:
00002602                            @bgm_loadMusic:
00002602 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00002606 2879 0000 2010             		movea.l	(Go_SpeedUpIndex).l,a4
0000260C 0407 0081                  		subi.b	#bgm__First,d7
00002610 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00002616 2879 0000 2008             		movea.l	(Go_MusicIndex).l,a4
0000261C E54F                       		lsl.w	#2,d7
0000261E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00002622 7000                       		moveq	#0,d0
00002624 3014                       		move.w	(a4),d0			; load voice pointer
00002626 D08C                       		add.l	a4,d0			; It is a relative pointer
00002628 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
0000262C 102C 0005                  		move.b	5(a4),d0		; load tempo
00002630 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00002634 4A2E 002A                  		tst.b	f_speedup(a6)
00002638 6700                       		beq.s	@nospeedshoes
0000263A 102E 0029                  		move.b	v_speeduptempo(a6),d0
0000263E                            ; loc_72068:
0000263E                            @nospeedshoes:
0000263E 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00002642 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00002646 7200                       		moveq	#0,d1
00002648 264C                       		movea.l	a4,a3
0000264A 5C4C                       		addq.w	#6,a4			; Point past header
0000264C 7E00                       		moveq	#0,d7
0000264E 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00002652 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00002656 5307                       		subq.b	#1,d7
00002658 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
0000265C 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00002660 7C30                       		moveq	#TrackSz,d6
00002662 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00002666 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
0000266A 45FA 0000                  		lea	FMDACInitBytes(pc),a2
0000266E                            ; loc_72098:
0000266E                            @bgm_fmloadloop:
0000266E 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00002672 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00002676 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
0000267A 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
0000267E 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00002682 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00002686 7000                       		moveq	#0,d0
00002688 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
0000268A D08B                       		add.l	a3,d0				; Relative pointer
0000268C 2340 0004                  		move.l	d0,TrackDataPointer(a1)		; Store track pointer
00002690 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00002694 D2C6                       		adda.w	d6,a1
00002696 51CF FFD6                  		dbf	d7,@bgm_fmloadloop
0000269A                            		
0000269A 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000026A0 6600                       		bne.s	@silencefm6
000026A2 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000026A4 7200                       		moveq	#0,d1		; Disable DAC
000026A6 4EBA 0000                  		jsr	WriteFMI(pc)
000026AA 6000 0000                  		bra.w	@bgm_fmdone
000026AE                            ; ===========================================================================
000026AE                            ; loc_720D8:
000026AE                            @silencefm6:
000026AE 7028                       		moveq	#$28,d0		; Key on/off register
000026B0 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000026B2 4EBA 0000                  		jsr	WriteFMI(pc)
000026B6 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000026BA 727F                       		moveq	#$7F,d1		; Total silence
000026BC 4EBA 0000                  		jsr	WriteFMII(pc)
000026C0 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000026C4 727F                       		moveq	#$7F,d1		; Total silence
000026C6 4EBA 0000                  		jsr	WriteFMII(pc)
000026CA 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000026CE 727F                       		moveq	#$7F,d1		; Total silence
000026D0 4EBA 0000                  		jsr	WriteFMII(pc)
000026D4 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000026D8 727F                       		moveq	#$7F,d1		; Total silence
000026DA 4EBA 0000                  		jsr	WriteFMII(pc)
000026DE 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000026E2 123C 00C0                  		move.b	#$C0,d1		; Stereo
000026E6 4EBA 0000                  		jsr	WriteFMII(pc)
000026EA                            ; loc_72114:
000026EA                            @bgm_fmdone:
000026EA 7E00                       		moveq	#0,d7
000026EC 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000026F0 6700                       		beq.s	@bgm_psgdone	; branch if zero
000026F2 5307                       		subq.b	#1,d7
000026F4 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
000026F8 45FA 0000                  		lea	PSGInitBytes(pc),a2
000026FC                            ; loc_72126:
000026FC                            @bgm_psgloadloop:
000026FC 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00002700 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00002704 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00002708 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
0000270C 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00002710 7000                       		moveq	#0,d0
00002712 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00002714 D08B                       		add.l	a3,d0				; Relative pointer
00002716 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0000271A 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
0000271E 101C                       		move.b	(a4)+,d0			; load redundant byte
00002720 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00002724 D2C6                       		adda.w	d6,a1
00002726 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
0000272A                            ; loc_72154:
0000272A                            @bgm_psgdone:
0000272A 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
0000272E 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00002730                            ; loc_7215A:
00002730                            @sfxstoploop:
00002730 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00002732 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00002736 7000                       		moveq	#0,d0
00002738 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
0000273C 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
0000273E 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00002740 E508                       		lsl.b	#2,d0			; Convert to index
00002742 6000                       		bra.s	@gotchannelindex
00002744                            ; ===========================================================================
00002744                            ; loc_7216E:
00002744                            @sfxpsgchannel:
00002744 E608                       		lsr.b	#3,d0		; Convert to index
00002746                            ; loc_72170:
00002746                            @gotchannelindex:
00002746 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
0000274A 2070 0000                  		movea.l	(a0,d0.w),a0
0000274E 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00002752                            ; loc_7217C:
00002752                            @sfxnext:
00002752 D2C6                       		adda.w	d6,a1
00002754 51CF FFDA                  		dbf	d7,@sfxstoploop
00002758                            
00002758 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0000275C 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
0000275E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002764                            ; loc_7218E:
00002764                            @checkspecialpsg:
00002764 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00002768 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
0000276A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002770                            ; loc_7219A:
00002770                            @sendfmnoteoff:
00002770 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00002774 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00002776                            ; loc_721A0:
00002776                            @fmnoteoffloop:
00002776 4EBA 0000                  		jsr	FMNoteOff(pc)
0000277A DAC6                       		adda.w	d6,a5
0000277C 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00002780 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00002782                            ; loc_721AC:
00002782                            @psgnoteoffloop:
00002782 4EBA 0000                  		jsr	PSGNoteOff(pc)
00002786 DAC6                       		adda.w	d6,a5
00002788 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
0000278C                            ; loc_721B6:
0000278C                            @locdblret:
0000278C 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
0000278E 4E75                       		rts	
00002790                            ; ===========================================================================
00002790                            ; byte_721BA:
00002790 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00002798 00                         		even
00002798                            ; byte_721C2:
00002798 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
0000279C 00                         		even
0000279C                            ; ===========================================================================
0000279C                            ; ---------------------------------------------------------------------------
0000279C                            ; Play normal sound effect
0000279C                            ; ---------------------------------------------------------------------------
0000279C                            ; Sound_A0toCF:
0000279C                            Sound_PlaySFX:
0000279C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000027A0 6600 0000                  		bne.w	@clear_sndprio		; Exit is it is
000027A4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000027A8 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
000027AC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000027B0 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
000027B4 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
000027B8 6600                       		bne.s	@sfx_notPush		; if not, branch
000027BA 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
000027BE 6600 0000                  		bne.w	@locret			; Return if not
000027C2 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
000027C8                            ; Sound_notA7:
000027C8                            @sfx_notPush:
000027C8 2079 0000 200C             		movea.l	(Go_SoundIndex).l,a0
000027CE 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
000027D2 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
000027D4 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
000027D8 224B                       		movea.l	a3,a1
000027DA 7200                       		moveq	#0,d1
000027DC 3219                       		move.w	(a1)+,d1		; Voice pointer
000027DE D28B                       		add.l	a3,d1			; Relative pointer
000027E0 1A19                       		move.b	(a1)+,d5		; Dividing timing
000027E2                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
000027E2                            		; index entry is above $3F will cause a crash. This is actually the same way that
000027E2                            		; this bug is fixed in Ristar's driver.
000027E2 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
000027E4 5307                       		subq.b	#1,d7
000027E6 7C30                       		moveq	#TrackSz,d6
000027E8                            ; loc_72228:
000027E8                            @sfx_loadloop:
000027E8 7600                       		moveq	#0,d3
000027EA 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
000027EE 1803                       		move.b	d3,d4
000027F0 6B00                       		bmi.s	@sfxinitpsg	; Branch if PSG
000027F2 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
000027F4 E54B                       		lsl.w	#2,d3
000027F6 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000027FA 2A75 3000                  		movea.l	(a5,d3.w),a5
000027FE 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00002802 6000                       		bra.s	@sfxoverridedone
00002804                            ; ===========================================================================
00002804                            ; loc_72244:
00002804                            @sfxinitpsg:
00002804 E64B                       		lsr.w	#3,d3
00002806 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0000280A 2A75 3000                  		movea.l	(a5,d3.w),a5
0000280E 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00002812 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00002816 6600                       		bne.s	@sfxoverridedone	; Branch if not
00002818 1004                       		move.b	d4,d0
0000281A 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0000281E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00002824 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00002828 13C0 00C0 0011             		move.b	d0,(psg_input).l
0000282E                            ; loc_7226E:
0000282E                            @sfxoverridedone:
0000282E 2A7B 3000                  		movea.l	SFX_SFXChannelRAM(pc,d3.w),a5
00002832 244D                       		movea.l	a5,a2
00002834 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00002836                            ; loc_72276:
00002836                            @clearsfxtrackram:
00002836 429A                       		clr.l	(a2)+
00002838 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0000283C                            
0000283C 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
0000283E 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00002842 7000                       		moveq	#0,d0
00002844 3019                       		move.w	(a1)+,d0			; Track data pointer
00002846 D08B                       		add.l	a3,d0				; Relative pointer
00002848 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0000284C 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00002850 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00002856 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
0000285A 4A04                       		tst.b	d4				; Is this a PSG channel?
0000285C 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
0000285E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00002864 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00002868                            ; loc_722A8:
00002868                            @sfxpsginitdone:
00002868 51CF FF7E                  		dbf	d7,@sfx_loadloop
0000286C                            
0000286C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00002870 6A00                       		bpl.s	@doneoverride					; Branch if not
00002872 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002878                            ; loc_722B8:
00002878                            @doneoverride:
00002878 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0000287C 6A00                       		bpl.s	@locret						; Branch if not
0000287E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002884                            ; locret_722C4:
00002884                            @locret:
00002884 4E75                       		rts	
00002886                            ; ===========================================================================
00002886                            ; loc_722C6:
00002886                            @clear_sndprio:
00002886 422E 0000                  		clr.b	v_sndprio(a6)	; Clear priority
0000288A 4E75                       		rts	
0000288C                            ; ===========================================================================
0000288C                            ; ---------------------------------------------------------------------------
0000288C                            ; RAM addresses for FM and PSG channel variables used by the SFX
0000288C                            ; ---------------------------------------------------------------------------
0000288C                            ; dword_722CC: BGMChannelRAM:
0000288C                            SFX_BGMChannelRAM:
0000288C 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00002890 0000 0000                  		dc.l 0
00002894 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00002898 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0000289C 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
000028A0 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
000028A4 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
000028A8 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
000028AC                            ; dword_722EC: SFXChannelRAM:
000028AC                            SFX_SFXChannelRAM:
000028AC 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
000028B0 0000 0000                  		dc.l 0
000028B4 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000028B8 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
000028BC 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
000028C0 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
000028C4 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
000028C8 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
000028CC                            ; ===========================================================================
000028CC                            ; ---------------------------------------------------------------------------
000028CC                            ; Play GHZ waterfall sound
000028CC                            ; ---------------------------------------------------------------------------
000028CC                            ; Sound_D0toDF:
000028CC                            Sound_PlaySpecial:
000028CC 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000028D0 6600 0000                  		bne.w	@locret			; Return if so
000028D4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000028D8 6600 0000                  		bne.w	@locret			; Exit if it is
000028DC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000028E0 6600 0000                  		bne.w	@locret			; Exit if it is
000028E4 2079 0000 2004             		movea.l	(Go_SpecSoundIndex).l,a0
000028EA 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000028EE E54F                       		lsl.w	#2,d7
000028F0 2670 7000                  		movea.l	(a0,d7.w),a3
000028F4 224B                       		movea.l	a3,a1
000028F6 7000                       		moveq	#0,d0
000028F8 3019                       		move.w	(a1)+,d0			; Voice pointer
000028FA D08B                       		add.l	a3,d0				; Relative pointer
000028FC 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00002900 1A19                       		move.b	(a1)+,d5			; Dividing timing
00002902                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00002902                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00002902 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00002904 5307                       		subq.b	#1,d7
00002906 7C30                       		moveq	#TrackSz,d6
00002908                            ; loc_72348:
00002908                            @sfxloadloop:
00002908 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0000290C 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
0000290E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002914 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00002918 6000                       		bra.s	@sfxinitpsg
0000291A                            ; ===========================================================================
0000291A                            ; loc_7235A:
0000291A                            @sfxoverridepsg:
0000291A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002920 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00002924                            ; loc_72364:
00002924                            @sfxinitpsg:
00002924 244D                       		movea.l	a5,a2
00002926 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00002928                            ; loc_72368:
00002928                            @clearsfxtrackram:
00002928 429A                       		clr.l	(a2)+
0000292A 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0000292E                            
0000292E 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00002930 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00002934 7000                       		moveq	#0,d0
00002936 3019                       		move.w	(a1)+,d0			; Track data pointer
00002938 D08B                       		add.l	a3,d0				; Relative pointer
0000293A 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0000293E 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00002942 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00002948 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
0000294C 4A04                       		tst.b	d4				; Is this a PSG channel?
0000294E 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00002950 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00002956                            ; loc_72396:
00002956                            @sfxpsginitdone:
00002956 51CF FFB0                  		dbf	d7,@sfxloadloop
0000295A                            
0000295A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
0000295E 6A00                       		bpl.s	@doneoverride					; Branch if not
00002960 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002966                            ; loc_723A6:
00002966                            @doneoverride:
00002966 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
0000296A 6A00                       		bpl.s	@locret						; Branch if not
0000296C 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002972 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00002976 13C4 00C0 0011             		move.b	d4,(psg_input).l
0000297C 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00002980 13C4 00C0 0011             		move.b	d4,(psg_input).l
00002986                            ; locret_723C6:
00002986                            @locret:
00002986 4E75                       		rts	
00002988                            ; End of function PlaySoundID
00002988                            
00002988                            ; ===========================================================================
00002988                            ; ---------------------------------------------------------------------------
00002988                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00002988                            ; ---------------------------------------------------------------------------
00002988                            ; The first block would have been used for overriding the music tracks
00002988                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00002988                            ; The third block would be used to set up the Special SFX
00002988                            ; The second block, however, is for the SFX tracks, which have a higher priority
00002988                            ; and would be checked for if they're currently playing
00002988                            ; If they are, then the third block would be used again, this time to mark
00002988                            ; the new tracks as 'currently playing'
00002988                            
00002988                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00002988                            
00002988                            ; BGMFM4PSG3RAM:
00002988                            ;SpecSFX_BGMChannelRAM:
00002988 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0000298C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00002990                            ; SFXFM4PSG3RAM:
00002990                            ;SpecSFX_SFXChannelRAM:
00002990 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00002994 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00002998                            ; SpecialSFXFM4PSG3RAM:
00002998                            ;SpecSFX_SpecSFXChannelRAM:
00002998 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
0000299C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
000029A0                            
000029A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A0                            
000029A0                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
000029A0                            StopSFX:
000029A0 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
000029A4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000029A8 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
000029AA                            ; loc_723EA:
000029AA                            @trackloop:
000029AA 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
000029AC 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
000029B0 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000029B4 7600                       		moveq	#0,d3
000029B6 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
000029BA 6B00                       		bmi.s	@trackpsg			; Branch if PSG
000029BC 4EBA 0000                  		jsr	FMNoteOff(pc)
000029C0 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
000029C4 6600                       		bne.s	@getfmpointer					; Branch if not
000029C6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000029CA 6A00                       		bpl.s	@getfmpointer					; Branch if not
000029CC                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
000029CC                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
000029CC                            		; is playing its sound!
000029CC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000029D0 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
000029D4 6000                       		bra.s	@gotfmpointer
000029D6                            ; ===========================================================================
000029D6                            ; loc_72416:
000029D6                            @getfmpointer:
000029D6 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
000029D8 E50B                       		lsl.b	#2,d3
000029DA 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
000029DE 264D                       		movea.l	a5,a3
000029E0 2A70 3000                  		movea.l	(a0,d3.w),a5
000029E4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
000029E8                            ; loc_72428:
000029E8                            @gotfmpointer:
000029E8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000029EC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000029F0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000029F4 4EBA 0000                  		jsr	SetVoice(pc)
000029F8 2A4B                       		movea.l	a3,a5
000029FA 6000                       		bra.s	@nexttrack
000029FC                            ; ===========================================================================
000029FC                            ; loc_7243C:
000029FC                            @trackpsg:
000029FC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00002A00 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00002A04 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00002A08 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00002A0A 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00002A0E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00002A10 E60B                       		lsr.b	#3,d3
00002A12 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00002A16 2070 3000                  		movea.l	(a0,d3.w),a0
00002A1A                            ; loc_7245A:
00002A1A                            @gotpsgpointer:
00002A1A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00002A1E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00002A22 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00002A28 6600                       		bne.s	@nexttrack			; Branch if not
00002A2A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00002A32                            ; loc_72472:
00002A32                            @nexttrack:
00002A32 DAFC 0030                  		adda.w	#TrackSz,a5
00002A36 51CF FF72                  		dbf	d7,@trackloop
00002A3A                            
00002A3A 4E75                       		rts	
00002A3C                            ; End of function StopSFX
00002A3C                            
00002A3C                            
00002A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A3C                            
00002A3C                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00002A3C                            StopSpecialSFX:
00002A3C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00002A40 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002A42 6A00                       		bpl.s	@fadedfm		; Branch if not
00002A44 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002A48 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00002A4C 6600                       		bne.s	@fadedfm		; Branch if not
00002A4E 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00002A52 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00002A56 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00002A5A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00002A5E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002A60 6A00                       		bpl.s	@fadedfm		; Branch if not
00002A62 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00002A66 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00002A6A 4EBA 0000                  		jsr	SetVoice(pc)
00002A6E                            ; loc_724AE:
00002A6E                            @fadedfm:
00002A6E 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00002A72 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002A74 6A00                       		bpl.s	@fadedpsg		; Branch if not
00002A76 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002A7A 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00002A7E 6600                       		bne.s	@fadedpsg		; Return if not
00002A80 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00002A84 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00002A88 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00002A8C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00002A90 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002A92 6A00                       		bpl.s	@fadedpsg		; Return if not
00002A94 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00002A9A 6600                       		bne.s	@fadedpsg			; Return if not
00002A9C 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00002AA4                            ; locret_724E4:
00002AA4                            @fadedpsg:
00002AA4 4E75                       		rts	
00002AA6                            ; End of function StopSpecialSFX
00002AA6                            
00002AA6                            ; ===========================================================================
00002AA6                            ; ---------------------------------------------------------------------------
00002AA6                            ; Fade out music
00002AA6                            ; ---------------------------------------------------------------------------
00002AA6                            ; Sound_E0:
00002AA6                            FadeOutMusic:
00002AA6 4EBA FEF8                  		jsr	StopSFX(pc)
00002AAA 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00002AAE 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00002AB4 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00002ABA 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00002ABE 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00002AC2 4E75                       		rts	
00002AC4                            
00002AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002AC4                            
00002AC4                            ; sub_72504:
00002AC4                            DoFadeOut:
00002AC4 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00002AC8 6700                       		beq.s	@continuefade		; Branch if yes
00002ACA 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00002ACE 4E75                       		rts	
00002AD0                            ; ===========================================================================
00002AD0                            ; loc_72510:
00002AD0                            @continuefade:
00002AD0 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00002AD4 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00002AD8 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00002ADE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00002AE2 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00002AE4                            ; loc_72524:
00002AE4                            @fmloop:
00002AE4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002AE6 6A00                       		bpl.s	@nextfm			; Branch if not
00002AE8 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00002AEC 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00002AEE 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002AF2 6000                       		bra.s	@nextfm
00002AF4                            ; ===========================================================================
00002AF4                            ; loc_72534:
00002AF4                            @sendfmtl:
00002AF4 4EBA 0000                  		jsr	SendVoiceTL(pc)
00002AF8                            ; loc_72538:
00002AF8                            @nextfm:
00002AF8 DAFC 0030                  		adda.w	#TrackSz,a5
00002AFC 51CF FFE6                  		dbf	d7,@fmloop
00002B00                            
00002B00 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00002B02                            ; loc_72542:
00002B02                            @psgloop:
00002B02 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002B04 6A00                       		bpl.s	@nextpsg		; branch if not
00002B06 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00002B0A 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00002B10 6500                       		blo.s	@sendpsgvol		; Branch if not
00002B12 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002B16 6000                       		bra.s	@nextpsg
00002B18                            ; ===========================================================================
00002B18                            ; loc_72558:
00002B18                            @sendpsgvol:
00002B18 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00002B1C 4EBA 0000                  		jsr	SetPSGVolume(pc)
00002B20                            ; loc_72560:
00002B20                            @nextpsg:
00002B20 DAFC 0030                  		adda.w	#TrackSz,a5
00002B24 51CF FFDC                  		dbf	d7,@psgloop
00002B28                            
00002B28 4E75                       		rts	
00002B2A                            ; End of function DoFadeOut
00002B2A                            
00002B2A                            
00002B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B2A                            
00002B2A                            ; sub_7256A:
00002B2A                            FMSilenceAll:
00002B2A 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00002B2C 7028                       		moveq	#$28,d0		; FM key on/off register
00002B2E                            ; loc_7256E:
00002B2E                            @noteoffloop:
00002B2E 1203                       		move.b	d3,d1
00002B30 4EBA 0000                  		jsr	WriteFMI(pc)
00002B34 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00002B36 4EBA 0000                  		jsr	WriteFMI(pc)
00002B3A 51CB FFF2                  		dbf	d3,@noteoffloop
00002B3E                            
00002B3E 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00002B40 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00002B42 7802                       		moveq	#2,d4		; ... for all 3 channels...
00002B44                            ; loc_72584:
00002B44                            @channelloop:
00002B44 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00002B46                            ; loc_72586:
00002B46                            @channeltlloop:
00002B46 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00002B4A 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00002B4E 5840                       		addq.w	#4,d0		; Next TL operator
00002B50 51CB FFF4                  		dbf	d3,@channeltlloop
00002B54                            
00002B54 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00002B58 51CC FFEA                  		dbf	d4,@channelloop
00002B5C                            
00002B5C 4E75                       		rts	
00002B5E                            ; End of function FMSilenceAll
00002B5E                            
00002B5E                            ; ===========================================================================
00002B5E                            ; ---------------------------------------------------------------------------
00002B5E                            ; Stop music
00002B5E                            ; ---------------------------------------------------------------------------
00002B5E                            ; Sound_E4: StopSoundAndMusic:
00002B5E                            StopAllSound:
00002B5E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00002B60 123C 0080                  		move.b	#$80,d1		; Enable DAC
00002B64 4EBA 0000                  		jsr	WriteFMI(pc)
00002B68 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00002B6A 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00002B6C 4EBA 0000                  		jsr	WriteFMI(pc)
00002B70 204E                       		movea.l	a6,a0
00002B72                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00002B72                            		; Remove the '-$10' to fix this.
00002B72 303C 00E3                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables-$10)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00002B76                            ; loc_725B6:
00002B76                            @clearramloop:
00002B76 4298                       		clr.l	(a0)+
00002B78 51C8 FFFC                  		dbf	d0,@clearramloop
00002B7C                            
00002B7C 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00002B82 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00002B86 6000 0000                  		bra.w	PSGSilenceAll
00002B8A                            
00002B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B8A                            
00002B8A                            ; sub_725CA:
00002B8A                            InitMusicPlayback:
00002B8A 204E                       		movea.l	a6,a0
00002B8C                            		; Save several values
00002B8C 122E 0000                  		move.b	v_sndprio(a6),d1
00002B90 142E 0027                  		move.b	f_1up_playing(a6),d2
00002B94 162E 002A                  		move.b	f_speedup(a6),d3
00002B98 182E 0026                  		move.b	v_fadein_counter(a6),d4
00002B9C                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00002B9C 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00002BA0 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00002BA4                            ; loc_725E4:
00002BA4                            @clearramloop:
00002BA4 4298                       		clr.l	(a0)+
00002BA6 51C8 FFFC                  		dbf	d0,@clearramloop
00002BAA                            
00002BAA                            		; Restore the values saved above
00002BAA 1D41 0000                  		move.b	d1,v_sndprio(a6)
00002BAE 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00002BB2 1D43 002A                  		move.b	d3,f_speedup(a6)
00002BB6 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00002BBA 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00002BBE 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00002BC4                            		; DANGER! This silences ALL channels, even the ones being used
00002BC4                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00002BC4                            		; doesn't affect SFX channels, either.
00002BC4                            		; This should be replaced with an 'rts'.
00002BC4 4EBA FF64                  		jsr	FMSilenceAll(pc)
00002BC8 6000 0000                  		bra.w	PSGSilenceAll
00002BCC                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00002BCC                            		; don't do a very good job of setting up the music tracks.
00002BCC                            		; Tracks that aren't defined in a music file's header don't have
00002BCC                            		; their channels defined, meaning @sendfmnoteoff won't silence
00002BCC                            		; hardware properly. In combination with removing the above
00002BCC                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00002BCC                            		; notes.
00002BCC                            		; To fix this, I suggest using this code, instead of an 'rts':
00002BCC                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00002BCC                            		;lea	FMDACInitBytes(pc),a2
00002BCC                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00002BCC                            		;bsr.s	@writeloop
00002BCC                            		;lea	PSGInitBytes(pc),a2
00002BCC                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00002BCC                            
00002BCC                            ;@writeloop:
00002BCC                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00002BCC                            		;lea	TrackSz(a1),a1		; Next track
00002BCC                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00002BCC                            
00002BCC                            		;rts
00002BCC                            	
00002BCC                            ; End of function InitMusicPlayback
00002BCC                            
00002BCC                            
00002BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BCC                            
00002BCC                            ; sub_7260C:
00002BCC                            TempoWait:
00002BCC 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00002BD2 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00002BD6 7030                       		moveq	#TrackSz,d0
00002BD8 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00002BDA                            ; loc_7261A:
00002BDA                            @tempoloop:
00002BDA 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00002BDC D0C0                       		adda.w	d0,a0	; Advance to next track
00002BDE 51C9 FFFA                  		dbf	d1,@tempoloop
00002BE2                            
00002BE2 4E75                       		rts	
00002BE4                            ; End of function TempoWait
00002BE4                            
00002BE4                            ; ===========================================================================
00002BE4                            ; ---------------------------------------------------------------------------
00002BE4                            ; Speed	up music
00002BE4                            ; ---------------------------------------------------------------------------
00002BE4                            ; Sound_E2:
00002BE4                            SpeedUpMusic:
00002BE4 4A2E 0027                  		tst.b	f_1up_playing(a6)
00002BE8 6600                       		bne.s	@speedup_1up
00002BEA 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00002BF0 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00002BF6 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00002BFC 4E75                       		rts	
00002BFE                            ; ===========================================================================
00002BFE                            ; loc_7263E:
00002BFE                            @speedup_1up:
00002BFE 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00002C04 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00002C0A 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00002C10 4E75                       		rts	
00002C12                            ; ===========================================================================
00002C12                            ; ---------------------------------------------------------------------------
00002C12                            ; Change music back to normal speed
00002C12                            ; ---------------------------------------------------------------------------
00002C12                            ; Sound_E3:
00002C12                            SlowDownMusic:
00002C12 4A2E 0027                  		tst.b	f_1up_playing(a6)
00002C16 6600                       		bne.s	@slowdown_1up
00002C18 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00002C1E 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00002C24 422E 002A                  		clr.b	f_speedup(a6)
00002C28 4E75                       		rts	
00002C2A                            ; ===========================================================================
00002C2A                            ; loc_7266A:
00002C2A                            @slowdown_1up:
00002C2A 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00002C30 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00002C36 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00002C3A 4E75                       		rts	
00002C3C                            
00002C3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3C                            
00002C3C                            ; sub_7267C:
00002C3C                            DoFadeIn:
00002C3C 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00002C40 6700                       		beq.s	@continuefade		; Branch if yes
00002C42 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00002C46 4E75                       		rts	
00002C48                            ; ===========================================================================
00002C48                            ; loc_72688:
00002C48                            @continuefade:
00002C48 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00002C4C 6700                       		beq.s	@fadedone		; Branch if yes
00002C4E 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00002C52 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00002C58 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00002C5C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00002C5E                            ; loc_7269E:
00002C5E                            @fmloop:
00002C5E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002C60 6A00                       		bpl.s	@nextfm			; Branch if not
00002C62 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00002C66 4EBA 0000                  		jsr	SendVoiceTL(pc)
00002C6A                            ; loc_726AA:
00002C6A                            @nextfm:
00002C6A DAFC 0030                  		adda.w	#TrackSz,a5
00002C6E 51CF FFEE                  		dbf	d7,@fmloop
00002C72 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00002C74                            ; loc_726B4:
00002C74                            @psgloop:
00002C74 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002C76 6A00                       		bpl.s	@nextpsg		; Branch if not
00002C78 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00002C7C 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00002C80 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00002C84 6500                       		blo.s	@sendpsgvol		; Branch if yes
00002C86 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00002C88                            ; loc_726C8:
00002C88                            @sendpsgvol:
00002C88 4EBA 0000                  		jsr	SetPSGVolume(pc)
00002C8C                            ; loc_726CC:
00002C8C                            @nextpsg:
00002C8C DAFC 0030                  		adda.w	#TrackSz,a5
00002C90 51CF FFE2                  		dbf	d7,@psgloop
00002C94 4E75                       		rts	
00002C96                            ; ===========================================================================
00002C96                            ; loc_726D6:
00002C96                            @fadedone:
00002C96 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00002C9C 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00002CA0 4E75                       		rts	
00002CA2                            ; End of function DoFadeIn
00002CA2                            
00002CA2                            ; ===========================================================================
00002CA2                            ; loc_726E2:
00002CA2                            FMNoteOn:
00002CA2 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00002CA6 6600                       		bne.s	@locret		; Return if so
00002CA8 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00002CAC 6600                       		bne.s	@locret		; Return if so
00002CAE 7028                       		moveq	#$28,d0		; Note on/off register
00002CB0 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00002CB4 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00002CB8 6000 0000                  		bra.w	WriteFMI
00002CBC                            ; ===========================================================================
00002CBC                            ; locret_726FC:
00002CBC                            @locret:
00002CBC 4E75                       		rts	
00002CBE                            
00002CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CBE                            
00002CBE                            ; sub_726FE:
00002CBE                            FMNoteOff:
00002CBE 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00002CC2 6600                       		bne.s	locret_72714	; Return if yes
00002CC4 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00002CC8 6600                       		bne.s	locret_72714	; Return if yes
00002CCA                            ; loc_7270A:
00002CCA                            SendFMNoteOff:
00002CCA 7028                       		moveq	#$28,d0		; Note on/off register
00002CCC 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00002CD0 6000 0000                  		bra.w	WriteFMI
00002CD4                            ; ===========================================================================
00002CD4                            
00002CD4                            locret_72714:
00002CD4 4E75                       		rts	
00002CD6                            ; End of function FMNoteOff
00002CD6                            
00002CD6                            ; ===========================================================================
00002CD6                            ; loc_72716:
00002CD6                            WriteFMIorIIMain:
00002CD6 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00002CDA 6600                       		bne.s	@locret		; Return if yes
00002CDC 6000 0000                  		bra.w	WriteFMIorII
00002CE0                            ; ===========================================================================
00002CE0                            ; locret_72720:
00002CE0                            @locret:
00002CE0 4E75                       		rts	
00002CE2                            
00002CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CE2                            
00002CE2                            ; sub_72722:
00002CE2                            WriteFMIorII:
00002CE2 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00002CE8 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00002CEA D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00002CEE                            ; End of function WriteFMIorII
00002CEE                            
00002CEE                            
00002CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CEE                            
00002CEE                            ; Strangely, despite this driver being SMPS 68k Type 1b,
00002CEE                            ; WriteFMI and WriteFMII are the Type 1a versions.
00002CEE                            ; In Sonic 1's prototype, they were the Type 1b versions.
00002CEE                            ; I wonder why they were changed?
00002CEE                            
00002CEE                            ; sub_7272E:
00002CEE                            WriteFMI:
00002CEE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002CF4 0802 0007                  		btst	#7,d2		; Is FM busy?
00002CF8 66F4                       		bne.s	WriteFMI	; Loop if so
00002CFA 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00002D00 4E71                       		nop	
00002D02 4E71                       		nop	
00002D04 4E71                       		nop	
00002D06                            ; loc_72746:
00002D06                            @waitloop:
00002D06 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002D0C 0802 0007                  		btst	#7,d2		; Is FM busy?
00002D10 66F4                       		bne.s	@waitloop	; Loop if so
00002D12                            
00002D12 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00002D18 4E75                       		rts	
00002D1A                            ; End of function WriteFMI
00002D1A                            
00002D1A                            ; ===========================================================================
00002D1A                            ; loc_7275A:
00002D1A                            WriteFMIIPart:
00002D1A 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00002D1E 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00002D22 D002                       		add.b	d2,d0			; Add in to destination register
00002D24                            
00002D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D24                            
00002D24                            ; sub_72764:
00002D24                            WriteFMII:
00002D24 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002D2A 0802 0007                  		btst	#7,d2		; Is FM busy?
00002D2E 66F4                       		bne.s	WriteFMII	; Loop if so
00002D30 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00002D36 4E71                       		nop	
00002D38 4E71                       		nop	
00002D3A 4E71                       		nop	
00002D3C                            ; loc_7277C:
00002D3C                            @waitloop:
00002D3C 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002D42 0802 0007                  		btst	#7,d2		; Is FM busy?
00002D46 66F4                       		bne.s	@waitloop	; Loop if so
00002D48                            
00002D48 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00002D4E 4E75                       		rts	
00002D50                            ; End of function WriteFMII
00002D50                            
00002D50                            ; ===========================================================================
00002D50                            ; ---------------------------------------------------------------------------
00002D50                            ; FM Note Values: b-0 to a#8
00002D50                            ;
00002D50                            ; Each row is an octave, starting with B and ending with A-sharp/B-flat.
00002D50                            ; Notably, this differs from the PSG frequency table, which starts with C and
00002D50                            ; ends with B. This is caused by 'FMSetFreq' subtracting $80 from the note
00002D50                            ; instead of $81, meaning that the first frequency in the table ironically
00002D50                            ; corresponds to the 'rest' note. The only way to use this frequency in a
00002D50                            ; real note is to transpose the channel to a lower semitone.
00002D50                            ;
00002D50                            ; Rather than use a complete lookup table, other SMPS drivers such as
00002D50                            ; Sonic 3's compute the octave, and only store a single octave's worth of
00002D50                            ; notes in the table.
00002D50                            ;
00002D50                            ; Invalid transposition values will cause this table to be overflowed,
00002D50                            ; resulting in garbage data being used as frequency values. In drivers that
00002D50                            ; compute the octave instead, invalid transposition values merely cause the
00002D50                            ; notes to wrap-around (the note below the lowest note will be the highest
00002D50                            ; note). It's important to keep this in mind when porting buggy songs.
00002D50                            ; ---------------------------------------------------------------------------
00002D50                            ; word_72790: FM_Notes:
00002D50                            FMFrequencies:
00002D50 025E 0284 02AB 02D3 02FE+  		dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00002D68 0A5E 0A84 0AAB 0AD3 0AFE+  		dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00002D80 125E 1284 12AB 12D3 12FE+  		dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00002D98 1A5E 1A84 1AAB 1AD3 1AFE+  		dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00002DB0 225E 2284 22AB 22D3 22FE+  		dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00002DC8 2A5E 2A84 2AAB 2AD3 2AFE+  		dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00002DE0 325E 3284 32AB 32D3 32FE+  		dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00002DF8 3A5E 3A84 3AAB 3AD3 3AFE+  		dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00002E10                            
00002E10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E10                            
00002E10                            ; sub_72850:
00002E10                            PSGUpdateTrack:
00002E10 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00002E14 6600                       		bne.s	@notegoing
00002E16 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00002E1A 4EBA 0000                  		jsr	PSGDoNext(pc)
00002E1E 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00002E22 6000 0000                  		bra.w	PSGDoVolFX
00002E26                            ; ===========================================================================
00002E26                            ; loc_72866:
00002E26                            @notegoing:
00002E26 4EBA F59E                  		jsr	NoteTimeoutUpdate(pc)
00002E2A 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00002E2E 4EBA F5BE                  		jsr	DoModulation(pc)
00002E32 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00002E36 4E75                       		rts
00002E38                            ; End of function PSGUpdateTrack
00002E38                            
00002E38                            
00002E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E38                            
00002E38                            ; sub_72878:
00002E38                            PSGDoNext:
00002E38 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00002E3C 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00002E40                            ; loc_72880:
00002E40                            @noteloop:
00002E40 7A00                       		moveq	#0,d5
00002E42 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00002E44 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00002E48 6500                       		blo.s	@gotnote	; Branch if not
00002E4A 4EBA 0000                  		jsr	CoordFlag(pc)
00002E4E 60F0                       		bra.s	@noteloop
00002E50                            ; ===========================================================================
00002E50                            ; loc_72890:
00002E50                            @gotnote:
00002E50 4A05                       		tst.b	d5		; Is it a note?
00002E52 6A00                       		bpl.s	@gotduration	; Branch if not
00002E54 4EBA 0000                  		jsr	PSGSetFreq(pc)
00002E58 1A1C                       		move.b	(a4)+,d5	; Get another byte
00002E5A 4A05                       		tst.b	d5		; Is it a duration?
00002E5C 6A00                       		bpl.s	@gotduration	; Branch if yes
00002E5E 534C                       		subq.w	#1,a4		; Put byte back
00002E60 6000 F526                  		bra.w	FinishTrackUpdate
00002E64                            ; ===========================================================================
00002E64                            ; loc_728A4:
00002E64                            @gotduration:
00002E64 4EBA F502                  		jsr	SetDuration(pc)
00002E68 6000 F51E                  		bra.w	FinishTrackUpdate
00002E6C                            ; End of function PSGDoNext
00002E6C                            
00002E6C                            
00002E6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E6C                            
00002E6C                            ; sub_728AC:
00002E6C                            PSGSetFreq:
00002E6C 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00002E70 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00002E72 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00002E76 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00002E7A E34D                       		lsl.w	#1,d5
00002E7C 41FA 0000                  		lea	PSGFrequencies(pc),a0
00002E80 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00002E86 6000 F500                  		bra.w	FinishTrackUpdate
00002E8A                            ; ===========================================================================
00002E8A                            ; loc_728CA:
00002E8A                            @restpsg:
00002E8A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00002E8E 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00002E94 4EBA F4F2                  		jsr	FinishTrackUpdate(pc)
00002E98 6000 0000                  		bra.w	PSGNoteOff
00002E9C                            ; End of function PSGSetFreq
00002E9C                            
00002E9C                            
00002E9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E9C                            
00002E9C                            ; sub_728DC:
00002E9C                            PSGDoNoteOn:
00002E9C 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00002EA0 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00002EA2                            ; End of function PSGDoNoteOn
00002EA2                            
00002EA2                            
00002EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EA2                            
00002EA2                            ; sub_728E2:
00002EA2                            PSGUpdateFreq:
00002EA2 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00002EA6 4880                       		ext.w	d0
00002EA8 DC40                       		add.w	d0,d6		; Add to frequency
00002EAA 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00002EAE 6600                       		bne.s	@locret		; Return if yes
00002EB0 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00002EB4 6600                       		bne.s	@locret		; Return if yes
00002EB6 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00002EBA 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00002EBE 6600                       		bne.s	@notnoise	; Branch if not
00002EC0 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00002EC4                            ; loc_72904:
00002EC4                            @notnoise:
00002EC4 3206                       		move.w	d6,d1
00002EC6 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00002ECA 8001                       		or.b	d1,d0		; Latch tone data to channel
00002ECC E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00002ECE 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00002ED2 13C0 00C0 0011             		move.b	d0,(psg_input).l
00002ED8 13C6 00C0 0011             		move.b	d6,(psg_input).l
00002EDE                            ; locret_7291E:
00002EDE                            @locret:
00002EDE 4E75                       		rts	
00002EE0                            ; End of function PSGUpdateFreq
00002EE0                            
00002EE0                            ; ===========================================================================
00002EE0                            ; loc_72920:
00002EE0                            PSGSetRest:
00002EE0 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00002EE4 4E75                       		rts	
00002EE6                            
00002EE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EE6                            
00002EE6                            ; sub_72926:
00002EE6                            PSGUpdateVolFX:
00002EE6 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00002EEA 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00002EEE                            ; loc_7292E:
00002EEE                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00002EEE 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00002EF2 7000                       		moveq	#0,d0
00002EF4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00002EF8 6700                       		beq.s	SetPSGVolume
00002EFA 2079 0000 2014             		movea.l	(Go_PSGIndex).l,a0
00002F00 5340                       		subq.w	#1,d0
00002F02 E548                       		lsl.w	#2,d0
00002F04 2070 0000                  		movea.l	(a0,d0.w),a0
00002F08 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00002F0C 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00002F10 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00002F14 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00002F18 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00002F1A 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00002F1E 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00002F20                            ; loc_72960:
00002F20                            @gotflutter:
00002F20 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00002F22 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00002F26 6500                       		blo.s	SetPSGVolume	; Branch if not
00002F28 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00002F2A                            ; End of function PSGUpdateVolFX
00002F2A                            
00002F2A                            
00002F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F2A                            
00002F2A                            ; sub_7296A:
00002F2A                            SetPSGVolume:
00002F2A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00002F2E 6600                       		bne.s	locret_7298A	; Return if so
00002F30 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00002F34 6600                       		bne.s	locret_7298A	; Return if so
00002F36 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00002F3A 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00002F3C                            ; loc_7297C:
00002F3C                            PSGSendVolume:
00002F3C 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00002F40 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00002F44 13C6 00C0 0011             		move.b	d6,(psg_input).l
00002F4A                            
00002F4A                            locret_7298A:
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            ; loc_7298C: PSGCheckNoteFill:
00002F4C                            PSGCheckNoteTimeout:
00002F4C 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00002F50 67EA                       		beq.s	PSGSendVolume			; Branch if not
00002F52 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00002F56 66E4                       		bne.s	PSGSendVolume			; Branch if not
00002F58 4E75                       		rts	
00002F5A                            ; End of function SetPSGVolume
00002F5A                            
00002F5A                            ; ===========================================================================
00002F5A                            ; loc_7299A: FlutterDone:
00002F5A                            VolEnvHold:
00002F5A 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00002F5E 4E75                       		rts	
00002F60                            
00002F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F60                            
00002F60                            ; sub_729A0:
00002F60                            PSGNoteOff:
00002F60 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00002F64 6600                       		bne.s	locret_729B4	; Return if so
00002F66                            ; loc_729A6:
00002F66                            SendPSGNoteOff:
00002F66 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00002F6A 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00002F6E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00002F74                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00002F74                            		; risk of music accidentally playing noise because it can't detect if
00002F74                            		; the PSG4/noise channel needs muting on track initialisation.
00002F74                            		; S&K's driver fixes it by doing this:
00002F74                            		;cmpi.b	#$DF,d0				; Are stopping PSG3?
00002F74                            		;bne.s	locret_729B4
00002F74                            		;move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00002F74                            
00002F74                            locret_729B4:
00002F74 4E75                       		rts	
00002F76                            ; End of function PSGNoteOff
00002F76                            
00002F76                            
00002F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F76                            
00002F76                            ; sub_729B6:
00002F76                            PSGSilenceAll:
00002F76 41F9 00C0 0011             		lea	(psg_input).l,a0
00002F7C 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00002F80 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00002F84 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00002F88 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00002F8C 4E75                       		rts	
00002F8E                            ; End of function PSGSilenceAll
00002F8E                            
00002F8E                            ; ===========================================================================
00002F8E                            ; ---------------------------------------------------------------------------
00002F8E                            ; PSG Note Values: c-1 to a-6
00002F8E                            ;
00002F8E                            ; Each row is an octave, starting with C and ending with B. Sonic 3's driver
00002F8E                            ; adds another octave at the start, as well as two more notes and the end to
00002F8E                            ; complete the last octave. Notably, a-6 is changed from 0 to $10. These
00002F8E                            ; changes need to be applied here in order for ports of songs from Sonic 3
00002F8E                            ; and later to sound correct.
00002F8E                            ;
00002F8E                            ; Here is what Sonic 3's version of this table looks like:
00002F8E                            ;	dc.w $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3F7, $3BE, $388
00002F8E                            ;	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
00002F8E                            ;	dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00002F8E                            ;	dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
00002F8E                            ;	dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00002F8E                            ;	dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
00002F8E                            ;	dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,  $10,    0,    0
00002F8E                            ; ---------------------------------------------------------------------------
00002F8E                            ; word_729CE:
00002F8E                            PSGFrequencies:
00002F8E 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
00002FA6 01AB 0193 017D 0167 0153+  		dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00002FBE 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
00002FD6 006B 0065 005F 005A 0055+  		dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00002FEE 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
00003006 001B 001A 0018 0017 0016+  		dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,    0
0000301A                            
0000301A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000301A                            
0000301A                            ; sub_72A5A:
0000301A                            CoordFlag:
0000301A 0445 00E0                  		subi.w	#$E0,d5
0000301E E54D                       		lsl.w	#2,d5
00003020 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00003024                            ; End of function CoordFlag
00003024                            
00003024                            ; ===========================================================================
00003024                            ; loc_72A64:
00003024                            coordflagLookup:
00003024 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00003028                            ; ===========================================================================
00003028 6000 0000                  		bra.w	cfDetune		; $E1
0000302C                            ; ===========================================================================
0000302C 6000 0000                  		bra.w	cfSetCommunication	; $E2
00003030                            ; ===========================================================================
00003030 6000 0000                  		bra.w	cfJumpReturn		; $E3
00003034                            ; ===========================================================================
00003034 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00003038                            ; ===========================================================================
00003038 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
0000303C                            ; ===========================================================================
0000303C 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00003040                            ; ===========================================================================
00003040 6000 0000                  		bra.w	cfHoldNote		; $E7
00003044                            ; ===========================================================================
00003044 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00003048                            ; ===========================================================================
00003048 6000 0000                  		bra.w	cfChangeTransposition	; $E9
0000304C                            ; ===========================================================================
0000304C 6000 0000                  		bra.w	cfSetTempo		; $EA
00003050                            ; ===========================================================================
00003050 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00003054                            ; ===========================================================================
00003054 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00003058                            ; ===========================================================================
00003058 6000 0000                  		bra.w	cfClearPush		; $ED
0000305C                            ; ===========================================================================
0000305C 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00003060                            ; ===========================================================================
00003060 6000 0000                  		bra.w	cfSetVoice		; $EF
00003064                            ; ===========================================================================
00003064 6000 0000                  		bra.w	cfModulation		; $F0
00003068                            ; ===========================================================================
00003068 6000 0000                  		bra.w	cfEnableModulation	; $F1
0000306C                            ; ===========================================================================
0000306C 6000 0000                  		bra.w	cfStopTrack		; $F2
00003070                            ; ===========================================================================
00003070 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00003074                            ; ===========================================================================
00003074 6000 0000                  		bra.w	cfDisableModulation	; $F4
00003078                            ; ===========================================================================
00003078 6000 0000                  		bra.w	cfSetPSGTone		; $F5
0000307C                            ; ===========================================================================
0000307C 6000 0000                  		bra.w	cfJumpTo		; $F6
00003080                            ; ===========================================================================
00003080 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00003084                            ; ===========================================================================
00003084 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00003088                            ; ===========================================================================
00003088 6000 0000                  		bra.w	cfOpF9			; $F9
0000308C                            ; ===========================================================================
0000308C                            ; loc_72ACC:
0000308C                            cfPanningAMSFMS:
0000308C 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
0000308E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00003092 6B00                       		bmi.s	locret_72AEA		; Return if yes
00003094 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00003098 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0000309C 8200                       		or.b	d0,d1			; Mask in new value
0000309E 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
000030A2 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000030A6 6000 FC2E                  		bra.w	WriteFMIorIIMain
000030AA                            ; ===========================================================================
000030AA                            
000030AA                            locret_72AEA:
000030AA 4E75                       		rts	
000030AC                            ; ===========================================================================
000030AC                            ; loc_72AEC: cfAlterNotes:
000030AC                            cfDetune:
000030AC 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
000030B0 4E75                       		rts	
000030B2                            ; ===========================================================================
000030B2                            ; loc_72AF2: cfUnknown1:
000030B2                            cfSetCommunication:
000030B2 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
000030B6 4E75                       		rts	
000030B8                            ; ===========================================================================
000030B8                            ; loc_72AF8:
000030B8                            cfJumpReturn:
000030B8 7000                       		moveq	#0,d0
000030BA 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
000030BE 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
000030C2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
000030CA 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
000030CC 5800                       		addq.b	#4,d0			; Actually 'pop' value
000030CE 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
000030D2 4E75                       		rts	
000030D4                            ; ===========================================================================
000030D4                            ; loc_72B14:
000030D4                            cfFadeInToPrevious:
000030D4 204E                       		movea.l	a6,a0
000030D6 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000030DA 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000030DE                            ; loc_72B1E:
000030DE                            @restoreramloop:
000030DE 20D9                       		move.l	(a1)+,(a0)+
000030E0 51C8 FFFC                  		dbf	d0,@restoreramloop
000030E4                            
000030E4 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000030EA 264D                       		movea.l	a5,a3
000030EC 1C3C 0028                  		move.b	#$28,d6
000030F0 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000030F4 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000030F6 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000030FA                            ; loc_72B3A:
000030FA                            @fmloop:
000030FA 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000030FE 6700                       		beq.s	@nextfm		; Branch if not
00003100 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00003104 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00003108 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0000310C 6600                       		bne.s	@nextfm		; Branch if yes
0000310E 7000                       		moveq	#0,d0
00003110 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00003114 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00003118 4EBA 0000                  		jsr	SetVoice(pc)
0000311C                            ; loc_72B5C:
0000311C                            @nextfm:
0000311C DAFC 0030                  		adda.w	#TrackSz,a5
00003120 51CF FFD8                  		dbf	d7,@fmloop
00003124                            
00003124 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00003126                            ; loc_72B66:
00003126                            @psgloop:
00003126 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0000312A 6700                       		beq.s	@nextpsg	; Branch if not
0000312C 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00003130 4EBA FE2E                  		jsr	PSGNoteOff(pc)
00003134 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00003138                            ; loc_72B78:
00003138                            @nextpsg:
00003138 DAFC 0030                  		adda.w	#TrackSz,a5
0000313C 51CF FFE8                  		dbf	d7,@psgloop
00003140                            		
00003140 2A4B                       		movea.l	a3,a5
00003142 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00003148 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
0000314E 422E 0027                  		clr.b	f_1up_playing(a6)
00003152 33FC 0000 00A1 1100        		startZ80
0000315A 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
0000315C 4E75                       		rts	
0000315E                            ; ===========================================================================
0000315E                            ; loc_72B9E:
0000315E                            cfSetTempoDivider:
0000315E 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00003162 4E75                       		rts	
00003164                            ; ===========================================================================
00003164                            ; loc_72BA4: cfSetVolume:
00003164                            cfChangeFMVolume:
00003164 101C                       		move.b	(a4)+,d0		; Get parameter
00003166 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
0000316A 6000 0000                  		bra.w	SendVoiceTL
0000316E                            ; ===========================================================================
0000316E                            ; loc_72BAE: cfPreventAttack:
0000316E                            cfHoldNote:
0000316E 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00003172 4E75                       		rts	
00003174                            ; ===========================================================================
00003174                            ; loc_72BB4: cfNoteFill
00003174                            cfNoteTimeout:
00003174 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00003178 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
0000317C 4E75                       		rts	
0000317E                            ; ===========================================================================
0000317E                            ; loc_72BBE: cfAddKey:
0000317E                            cfChangeTransposition:
0000317E 101C                       		move.b	(a4)+,d0		; Get parameter
00003180 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00003184 4E75                       		rts	
00003186                            ; ===========================================================================
00003186                            ; loc_72BC6:
00003186                            cfSetTempo:
00003186 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
0000318A 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
0000318E 4E75                       		rts	
00003190                            ; ===========================================================================
00003190                            ; loc_72BD0: cfSetTempoMod:
00003190                            cfSetTempoDividerAll:
00003190 41EE 0040                  		lea	v_music_track_ram(a6),a0
00003194 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00003196 7230                       		moveq	#TrackSz,d1
00003198 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
0000319A                            ; loc_72BDA:
0000319A                            @trackloop:
0000319A 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
0000319E D0C1                       		adda.w	d1,a0
000031A0 51CA FFF8                  		dbf	d2,@trackloop
000031A4                            
000031A4 4E75                       		rts	
000031A6                            ; ===========================================================================
000031A6                            ; loc_72BE6: cfChangeVolume:
000031A6                            cfChangePSGVolume:
000031A6 101C                       		move.b	(a4)+,d0		; Get volume change
000031A8 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
000031AC 4E75                       		rts	
000031AE                            ; ===========================================================================
000031AE                            ; loc_72BEE:
000031AE                            cfClearPush:
000031AE 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
000031B2 4E75                       		rts	
000031B4                            ; ===========================================================================
000031B4                            ; loc_72BF4:
000031B4                            cfStopSpecialFM4:
000031B4 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000031B8 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
000031BC 4EBA FB00                  		jsr	FMNoteOff(pc)
000031C0 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
000031C4 6B00                       		bmi.s	@locexit					; Branch if yes
000031C6 264D                       		movea.l	a5,a3
000031C8 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000031CC 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000031D0 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000031D4 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000031D8 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000031DC 4EBA 0000                  		jsr	SetVoice(pc)
000031E0 2A4B                       		movea.l	a3,a5
000031E2                            ; loc_72C22:
000031E2                            @locexit:
000031E2 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
000031E4 4E75                       		rts	
000031E6                            ; ===========================================================================
000031E6                            ; loc_72C26:
000031E6                            cfSetVoice:
000031E6 7000                       		moveq	#0,d0
000031E8 101C                       		move.b	(a4)+,d0		; Get new voice
000031EA 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
000031EE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
000031F2 6600 0000                  		bne.w	locret_72CAA		; Return if yes
000031F6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
000031FA 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
000031FE 6700                       		beq.s	SetVoice		; If yes, branch
00003200 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00003204 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00003208 6B00                       		bmi.s	SetVoice		; If yes, branch
0000320A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
0000320E                            
0000320E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000320E                            
0000320E                            ; sub_72C4E:
0000320E                            SetVoice:
0000320E 5340                       		subq.w	#1,d0
00003210 6B00                       		bmi.s	@havevoiceptr
00003212 323C 0019                  		move.w	#25,d1
00003216                            ; loc_72C56:
00003216                            @voicemultiply:
00003216 D2C1                       		adda.w	d1,a1
00003218 51C8 FFFC                  		dbf	d0,@voicemultiply
0000321C                            ; loc_72C5C:
0000321C                            @havevoiceptr:
0000321C 1219                       		move.b	(a1)+,d1		; feedback/algorithm
0000321E 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00003222 1801                       		move.b	d1,d4
00003224 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00003228 4EBA FAB8                  		jsr	WriteFMIorII(pc)
0000322C 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00003230 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00003232                            ; loc_72C72:
00003232                            @sendvoiceloop:
00003232 101A                       		move.b	(a2)+,d0
00003234 1219                       		move.b	(a1)+,d1
00003236 4EBA FAAA                  		jsr	WriteFMIorII(pc)
0000323A 51CB FFF6                  		dbf	d3,@sendvoiceloop
0000323E                            
0000323E 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00003240 0244 0007                  		andi.w	#7,d4			; Get algorithm
00003244 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00003248 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
0000324C                            ; loc_72C8C:
0000324C                            @sendtlloop:
0000324C 101A                       		move.b	(a2)+,d0
0000324E 1219                       		move.b	(a1)+,d1
00003250 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00003252 6400                       		bcc.s	@sendtl		; Branch if not
00003254 D203                       		add.b	d3,d1		; Include additional attenuation
00003256                            ; loc_72C96:
00003256                            @sendtl:
00003256 4EBA FA8A                  		jsr	WriteFMIorII(pc)
0000325A 51CD FFF0                  		dbf	d5,@sendtlloop
0000325E                            		
0000325E 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00003262 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00003266 4EBA FA7A                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
0000326A                            
0000326A                            locret_72CAA:
0000326A 4E75                       		rts	
0000326C                            ; End of function SetVoice
0000326C                            
0000326C                            ; ===========================================================================
0000326C                            ; byte_72CAC:
0000326C 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00003274                            
00003274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003274                            
00003274                            ; sub_72CB4:
00003274                            SendVoiceTL:
00003274 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00003278 6600                       		bne.s	@locret		; Return if so
0000327A 7000                       		moveq	#0,d0
0000327C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00003280 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00003284 4A2E 000E                  		tst.b	f_voice_selector(a6)
00003288 6700                       		beq.s	@gotvoiceptr
0000328A                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
0000328A                            		; of a6!
0000328A 226E 0020                  		movea.l	TrackVoicePtr(a6),a1
0000328E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00003292 6B00                       		bmi.s	@gotvoiceptr
00003294 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00003298                            ; loc_72CD8:
00003298                            @gotvoiceptr:
00003298 5340                       		subq.w	#1,d0
0000329A 6B00                       		bmi.s	@gotvoice
0000329C 323C 0019                  		move.w	#25,d1
000032A0                            ; loc_72CE0:
000032A0                            @voicemultiply:
000032A0 D2C1                       		adda.w	d1,a1
000032A2 51C8 FFFC                  		dbf	d0,@voicemultiply
000032A6                            ; loc_72CE6:
000032A6                            @gotvoice:
000032A6 D2FC 0015                  		adda.w	#21,a1				; Want TL
000032AA 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
000032AE 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
000032B2 0240 0007                  		andi.w	#7,d0				; Want only algorithm
000032B6 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
000032BA 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
000032BE 6B00                       		bmi.s	@locret				; If negative, stop
000032C0 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
000032C2                            ; loc_72D02:
000032C2                            @sendtlloop:
000032C2 101A                       		move.b	(a2)+,d0
000032C4 1219                       		move.b	(a1)+,d1
000032C6 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000032C8 6400                       		bcc.s	@senttl		; Branch if not
000032CA D203                       		add.b	d3,d1		; Include additional attenuation
000032CC 6500                       		bcs.s	@senttl		; Branch on overflow
000032CE 4EBA FA12                  		jsr	WriteFMIorII(pc)
000032D2                            ; loc_72D12:
000032D2                            @senttl:
000032D2 51CD FFEE                  		dbf	d5,@sendtlloop
000032D6                            ; locret_72D16:
000032D6                            @locret:
000032D6 4E75                       		rts	
000032D8                            ; End of function SendVoiceTL
000032D8                            
000032D8                            ; ===========================================================================
000032D8                            ; byte_72D18:
000032D8                            FMInstrumentOperatorTable:
000032D8 30                         		dc.b  $30		; Detune/multiple operator 1
000032D9 38                         		dc.b  $38		; Detune/multiple operator 3
000032DA 34                         		dc.b  $34		; Detune/multiple operator 2
000032DB 3C                         		dc.b  $3C		; Detune/multiple operator 4
000032DC 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
000032DD 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
000032DE 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
000032DF 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
000032E0 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
000032E1 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
000032E2 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
000032E3 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
000032E4 70                         		dc.b  $70		; Secondary decay rate operator 1
000032E5 78                         		dc.b  $78		; Secondary decay rate operator 3
000032E6 74                         		dc.b  $74		; Secondary decay rate operator 2
000032E7 7C                         		dc.b  $7C		; Secondary decay rate operator 4
000032E8 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
000032E9 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
000032EA 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
000032EB 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
000032EC                            FMInstrumentOperatorTable_End
000032EC                            ; byte_72D2C:
000032EC                            FMInstrumentTLTable:
000032EC 40                         		dc.b  $40		; Total level operator 1
000032ED 48                         		dc.b  $48		; Total level operator 3
000032EE 44                         		dc.b  $44		; Total level operator 2
000032EF 4C                         		dc.b  $4C		; Total level operator 4
000032F0                            FMInstrumentTLTable_End
000032F0                            ; ===========================================================================
000032F0                            ; loc_72D30:
000032F0                            cfModulation:
000032F0 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
000032F4 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
000032F8 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
000032FC 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00003300 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00003304 101C                       		move.b	(a4)+,d0			; Modulation steps...
00003306 E208                       		lsr.b	#1,d0				; ... divided by 2...
00003308 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
0000330C 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00003310 4E75                       		rts	
00003312                            ; ===========================================================================
00003312                            ; loc_72D52:
00003312                            cfEnableModulation:
00003312 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00003316 4E75                       		rts	
00003318                            ; ===========================================================================
00003318                            ; loc_72D58:
00003318                            cfStopTrack:
00003318 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0000331C 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00003320 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00003324 6B00                       		bmi.s	@stoppsg		; Branch if yes
00003326 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
0000332A 6B00 0000                  		bmi.w	@locexit		; Exit if yes
0000332E 4EBA F98E                  		jsr	FMNoteOff(pc)
00003332 6000                       		bra.s	@stoppedchannel
00003334                            ; ===========================================================================
00003334                            ; loc_72D74:
00003334                            @stoppsg:
00003334 4EBA FC2A                  		jsr	PSGNoteOff(pc)
00003338                            ; loc_72D78:
00003338                            @stoppedchannel:
00003338 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
0000333C 6A00 0000                  		bpl.w	@locexit		; Exit if not
00003340 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
00003344 7000                       		moveq	#0,d0
00003346 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
0000334A 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
0000334C 41FA F53E                  		lea	SFX_BGMChannelRAM(pc),a0
00003350 264D                       		movea.l	a5,a3
00003352 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00003356 6600                       		bne.s	@getpointer		; Branch if not
00003358 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0000335C 6A00                       		bpl.s	@getpointer		; Branch if not
0000335E 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00003362 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00003366 6000                       		bra.s	@gotpointer
00003368                            ; ===========================================================================
00003368                            ; loc_72DA8:
00003368                            @getpointer:
00003368 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
0000336A E508                       		lsl.b	#2,d0
0000336C 2A70 0000                  		movea.l	(a0,d0.w),a5
00003370 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00003372 6A00                       		bpl.s	@novoiceupd		; Branch if not
00003374 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00003378                            ; loc_72DB8:
00003378                            @gotpointer:
00003378 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
0000337C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00003380 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00003384 4EBA FE88                  		jsr	SetVoice(pc)
00003388                            ; loc_72DC8:
00003388                            @novoiceupd:
00003388 2A4B                       		movea.l	a3,a5
0000338A 6000                       		bra.s	@locexit
0000338C                            ; ===========================================================================
0000338C                            ; loc_72DCC:
0000338C                            @getpsgptr:
0000338C 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00003390 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00003392 6A00                       		bpl.s	@getchannelptr	; Branch if not
00003394 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00003398 6700                       		beq.s	@gotchannelptr	; Branch if yes
0000339A 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
0000339E 6700                       		beq.s	@gotchannelptr	; Branch if yes
000033A0                            ; loc_72DE0:
000033A0                            @getchannelptr:
000033A0 41FA F4EA                  		lea	SFX_BGMChannelRAM(pc),a0
000033A4 E608                       		lsr.b	#3,d0
000033A6 2070 0000                  		movea.l	(a0,d0.w),a0
000033AA                            ; loc_72DEA:
000033AA                            @gotchannelptr:
000033AA 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
000033AE 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000033B2 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
000033B8 6600                       		bne.s	@locexit			; Branch if not
000033BA 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
000033C2                            ; loc_72E02:
000033C2                            @locexit:
000033C2 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
000033C4 4E75                       		rts	
000033C6                            ; ===========================================================================
000033C6                            ; loc_72E06:
000033C6                            cfSetPSGNoise:
000033C6 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
000033CC 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
000033D0 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
000033D4 6600                       		bne.s	@locret				; Return if yes
000033D6 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000033DE                            ; locret_72E1E:
000033DE                            @locret:
000033DE 4E75                       		rts	
000033E0                            ; ===========================================================================
000033E0                            ; loc_72E20:
000033E0                            cfDisableModulation:
000033E0 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000033E4 4E75                       		rts	
000033E6                            ; ===========================================================================
000033E6                            ; loc_72E26:
000033E6                            cfSetPSGTone:
000033E6 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000033EA 4E75                       		rts	
000033EC                            ; ===========================================================================
000033EC                            ; loc_72E2C:
000033EC                            cfJumpTo:
000033EC 101C                       		move.b	(a4)+,d0	; High byte of offset
000033EE E148                       		lsl.w	#8,d0		; Shift it into place
000033F0 101C                       		move.b	(a4)+,d0	; Low byte of offset
000033F2 D8C0                       		adda.w	d0,a4		; Add to current position
000033F4 534C                       		subq.w	#1,a4		; Put back one byte
000033F6 4E75                       		rts	
000033F8                            ; ===========================================================================
000033F8                            ; loc_72E38:
000033F8                            cfRepeatAtPos:
000033F8 7000                       		moveq	#0,d0
000033FA 101C                       		move.b	(a4)+,d0			; Loop index
000033FC 121C                       		move.b	(a4)+,d1			; Repeat count
000033FE 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00003402 6600                       		bne.s	@loopexists			; Branch if yes
00003404 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00003408                            ; loc_72E48:
00003408                            @loopexists:
00003408 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
0000340C 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
0000340E 544C                       		addq.w	#2,a4				; Skip target address
00003410 4E75                       		rts	
00003412                            ; ===========================================================================
00003412                            ; loc_72E52:
00003412                            cfJumpToGosub:
00003412 7000                       		moveq	#0,d0
00003414 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00003418 5900                       		subq.b	#4,d0				; Add space for another target
0000341A 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
0000341E 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00003422 60C8                       		bra.s	cfJumpTo
00003424                            ; ===========================================================================
00003424                            ; loc_72E64:
00003424                            cfOpF9:
00003424 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00003428 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0000342C 4EBA F8C0                  		jsr	WriteFMI(pc)
00003430 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00003434 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00003438 6000 F8B4                  		bra.w	WriteFMI
0000343C                            ; ===========================================================================
0000343C                            ; ---------------------------------------------------------------------------
0000343C                            ; DAC driver
0000343C                            ; ---------------------------------------------------------------------------
0000343C                            Kos_Z80:
0000343C                            		incbin	"sound\z80.bin"
00004B9C                            		even
00004B9C                            		
00004B9C                            	pusho
00004B9C                            	opt		l?,an+
00004B9C                            		include	"sound\tb.lib"
00004B9C                            ;=======================================================;
00004B9C                            ;           $$$TB.LIB  (Sound Table Assign Library)     ;
00004B9C                            ;                       ORG. MDTB11.LIB                 ;
00004B9C                            ;               'Sound-Source'                          ;
00004B9C                            ;                for Mega Drive (68K)                   ;
00004B9C                            ;                       Ver  1.1 / 1990.9.1             ;
00004B9C                            ;                                     By  H.Kubota      ;
00004B9C                            ;=======================================================;
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;            STANDARD VOLUME            ;
00004B9C                            ;=======================================;
00004B9C =00000010                  FV_DR           EQU     $10
00004B9C =00000010                  FV_ML           EQU     $10
00004B9C =00000010                  FV_BS           EQU     $10
00004B9C =00000010                  FV_BK1          EQU     $10
00004B9C =00000010                  FV_BK2          EQU     $10
00004B9C =00000010                  FV_BK3          EQU     $10
00004B9C =00000010                  FV_BK4          EQU     $10
00004B9C =00000008                  PV_ML           EQU     $08
00004B9C =00000008                  PV_BS           EQU     $08
00004B9C =00000008                  PV_BK           EQU     $08
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;                 DRUM                  ;
00004B9C                            ;=======================================;
00004B9C =00000081                  B               EQU     $81             ; bass drum
00004B9C =00000082                  S               EQU     $82             ; snare
00004B9C =00000083                  S2              EQU     $83             ; handclap
00004B9C =00000084                  O               EQU     $84             ; close hihat
00004B9C =00000085                  TT              EQU     $85             ; tom
00004B9C                            
00004B9C =00000088                  HT              EQU     $88             ; high tom 2
00004B9C =00000089                  HT2             EQU     $89             ; high tom
00004B9C =0000008A                  MT              EQU     $8A             ; middle tom
00004B9C =0000008B                  MT2             EQU     $8B             ; middle tom2
00004B9C =0000008C                  MT3             EQU     $8C             ; middle tom2
00004B9C =0000008D                  LT              EQU     $8D             ; low tom
00004B9C =0000008E                  LT2             EQU     $8E             ; low tom2
00004B9C =0000008F                  LT3             EQU     $8F             ; low tom2
00004B9C                            
00004B9C =00000090                  SNR2            EQU     $90             ; snare2
00004B9C =00000091                  SNR_B           EQU     $91             ; snare (scale back)
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;               PRIORITY                ;
00004B9C                            ;=======================================;
00004B9C =00000080                  PR81            EQU     $80
00004B9C =00000080                  PR82            EQU     $80
00004B9C =00000080                  PR83            EQU     $80
00004B9C =00000080                  PR84            EQU     $80
00004B9C =00000080                  PR85            EQU     $80
00004B9C =00000080                  PR86            EQU     $80
00004B9C =00000080                  PR87            EQU     $80
00004B9C =00000080                  PR88            EQU     $80
00004B9C =00000080                  PR89            EQU     $80
00004B9C =00000080                  PR8A            EQU     $80
00004B9C =00000080                  PR8B            EQU     $80
00004B9C =00000080                  PR8C            EQU     $80
00004B9C =00000080                  PR8D            EQU     $80
00004B9C =00000080                  PR8E            EQU     $80
00004B9C =00000080                  PR8F            EQU     $80
00004B9C                            
00004B9C =00000080                  PR90            EQU     $80
00004B9C =00000080                  PR91            EQU     $80
00004B9C =00000080                  PR92            EQU     $80
00004B9C =00000080                  PR93            EQU     $80
00004B9C =00000080                  PR94            EQU     $80
00004B9C =00000080                  PR95            EQU     $80
00004B9C =00000080                  PR96            EQU     $80
00004B9C =00000080                  PR97            EQU     $80
00004B9C =00000080                  PR98            EQU     $80
00004B9C =00000080                  PR99            EQU     $80
00004B9C =00000080                  PR9A            EQU     $80
00004B9C =00000080                  PR9B            EQU     $80
00004B9C =00000080                  PR9C            EQU     $80
00004B9C =00000080                  PR9D            EQU     $80
00004B9C =00000080                  PR9E            EQU     $80
00004B9C =00000080                  PR9F            EQU     $80
00004B9C                            
00004B9C                            ;---------------< S.E. >----------------;
00004B9C                            
00004B9C =00000010                  PRA0            EQU     $10
00004B9C =00000010                  PRA1            EQU     $10
00004B9C =0000007F                  PRA2            EQU     $7F
00004B9C =0000006F                  PRA3            EQU     $6F
00004B9C =0000007F                  PRA4            EQU     $7F
00004B9C =0000005F                  PRA5            EQU     $5F
00004B9C =0000007F                  PRA6            EQU     $7F
00004B9C =0000007F                  PRA7            EQU     $7F
00004B9C =0000007F                  PRA8            EQU     $7F
00004B9C =0000005F                  PRA9            EQU     $5F
00004B9C =0000004F                  PRAA            EQU     $4F
00004B9C =0000004F                  PRAB            EQU     $4F
00004B9C =0000007F                  PRAC            EQU     $7F
00004B9C =0000007F                  PRAD            EQU     $7F
00004B9C =00000070                  PRAE            EQU     $70
00004B9C =0000006F                  PRAF            EQU     $6F
00004B9C                            
00004B9C =0000007F                  PRB0            EQU     $7F
00004B9C =0000007F                  PRB1            EQU     $7F
00004B9C =0000007F                  PRB2            EQU     $7F
00004B9C =0000007F                  PRB3            EQU     $7F
00004B9C =0000007F                  PRB4            EQU     $7F
00004B9C =0000007F                  PRB5            EQU     $7F
00004B9C =0000007F                  PRB6            EQU     $7F
00004B9C =0000007F                  PRB7            EQU     $7F
00004B9C =0000007F                  PRB8            EQU     $7F
00004B9C =0000007F                  PRB9            EQU     $7F
00004B9C =0000007F                  PRBA            EQU     $7F
00004B9C =0000007F                  PRBB            EQU     $7F
00004B9C =0000007F                  PRBC            EQU     $7F
00004B9C =0000007F                  PRBD            EQU     $7F
00004B9C =0000007F                  PRBE            EQU     $7F
00004B9C =0000007F                  PRBF            EQU     $7F
00004B9C                            
00004B9C =0000007F                  PRC0            EQU     $7F
00004B9C =0000007F                  PRC1            EQU     $7F
00004B9C =0000007F                  PRC2            EQU     $7F
00004B9C =0000007F                  PRC3            EQU     $7F
00004B9C =0000007F                  PRC4            EQU     $7F
00004B9C =0000007F                  PRC5            EQU     $7F
00004B9C =0000007F                  PRC6            EQU     $7F
00004B9C =0000007F                  PRC7            EQU     $7F
00004B9C =0000007F                  PRC8            EQU     $7F
00004B9C =0000007F                  PRC9            EQU     $7F
00004B9C =0000007F                  PRCA            EQU     $7F
00004B9C =0000007F                  PRCB            EQU     $7F
00004B9C =0000007F                  PRCC            EQU     $7F
00004B9C =0000007F                  PRCD            EQU     $7F
00004B9C =0000007F                  PRCE            EQU     $7F
00004B9C =0000007F                  PRCF            EQU     $7F
00004B9C                            
00004B9C =00000080                  PRD0            EQU     $80
00004B9C =00000080                  PRD1            EQU     $80
00004B9C =00000080                  PRD2            EQU     $80
00004B9C =00000080                  PRD3            EQU     $80
00004B9C =00000080                  PRD4            EQU     $80
00004B9C =00000080                  PRD5            EQU     $80
00004B9C =00000080                  PRD6            EQU     $80
00004B9C =00000080                  PRD7            EQU     $80
00004B9C =00000080                  PRD8            EQU     $80
00004B9C =00000080                  PRD9            EQU     $80
00004B9C =00000080                  PRDA            EQU     $80
00004B9C =00000080                  PRDB            EQU     $80
00004B9C =00000080                  PRDC            EQU     $80
00004B9C =00000080                  PRDD            EQU     $80
00004B9C =00000080                  PRDE            EQU     $80
00004B9C =00000080                  PRDF            EQU     $80
00004B9C                            
00004B9C =00000080                  PRE0            EQU     $80
00004B9C =00000080                  PRE1            EQU     $80
00004B9C =00000080                  PRE2            EQU     $80
00004B9C =00000080                  PRE3            EQU     $80
00004B9C =00000080                  PRE4            EQU     $80
00004B9C =00000080                  PRE5            EQU     $80
00004B9C =00000080                  PRE6            EQU     $80
00004B9C =00000080                  PRE7            EQU     $80
00004B9C =00000080                  PRE8            EQU     $80
00004B9C =00000080                  PRE9            EQU     $80
00004B9C =00000080                  PREA            EQU     $80
00004B9C =00000080                  PREB            EQU     $80
00004B9C =00000080                  PREC            EQU     $80
00004B9C =00000080                  PRED            EQU     $80
00004B9C =00000080                  PREE            EQU     $80
00004B9C =00000080                  PREF            EQU     $80
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;                COMMAND                ;
00004B9C                            ;=======================================;
00004B9C                            
00004B9C                            
00004B9C =000000E0                  LRPAN           EQU     $E0             ; FM left/right set
00004B9C =000000E1                  FDT             EQU     $E1             ; FM frequency detune (don't s.e. mode)
00004B9C =000000E2                  SET_TFLG        EQU     $E2             ; timing flag set
00004B9C =000000E3                  CMRET           EQU     $E3             ; subroutin return
00004B9C                            ;	e4
00004B9C =000000E5                  CMBASE          EQU     $E5             ; tempo base set
00004B9C =000000E6                  CMVADD          EQU     $E6             ; FM (only) volume add
00004B9C =000000E7                  CMTAB           EQU     $E7             ; don't key off
00004B9C =000000E7                  TIE             EQU     CMTAB           ; tie (if length over L1+L1)(= CMTAB)
00004B9C =000000E7                  SRE             EQU     CMTAB           ; sre (= CMTAB)
00004B9C =000000E8                  CMGATE          EQU     $E8             ; gate time set
00004B9C =000000E9                  CMBIAS          EQU     $E9             ; bias set (transpose)
00004B9C                            ;	ea
00004B9C                            ;	eb
00004B9C =000000EC                  PVADD           EQU     $EC             ; PSG (only) volume add
00004B9C =000000ED                  CMTREND         EQU     $ED             ; total level,release off & end
00004B9C =000000EE                  CMEND           EQU     $EE             ; music table end
00004B9C =000000EF                  FEV             EQU     $EF             ; FM voice no. set
00004B9C =000000F0                  FVR             EQU     $F0             ; FM auto vibrate set
00004B9C =000000F1                  VRON            EQU     $F1             ; FVR on (before FVR parameter set)
00004B9C                            ;	f2
00004B9C =000000F3                  CMNOIS          EQU     $F3             ; PSG noise mode set
00004B9C =000000F4                  VROFF           EQU     $F4             ; FVR stop
00004B9C =000000F5                  EV              EQU     $F5             ; PSG envelope no. set
00004B9C =000000F6                  CMJUMP          EQU     $F6             ; table jump
00004B9C =000000F7                  CMREPT          EQU     $F7             ; repeat set
00004B9C =000000F8                  CMCALL          EQU     $F8             ; subroutin call
00004B9C                            ;	f9
00004B9C                            
00004B9C                            ;KEYSET          EQU     $EB             ; key no. set
00004B9C                            ;AUTOPAN         EQU     $E4             ; autopan set
00004B9C                            ;PFVADD          EQU     $E5             ; PSG & FM volume add
00004B9C =000000F0                  LFO             EQU     FVR             ; LFO set
00004B9C                            ;TEMPO_CHG       EQU     $EA             ; tempo change (delay counter add)
00004B9C                            ;PVADD           EQU     $EC             ; PSG (only) volume add
00004B9C                            ;REGSET          EQU     $ED             ; chip direct write (channel look)
00004B9C                            ;FMWRITE         EQU     $EE             ; chip direct write (channel not look)
00004B9C                            ;SNG_BASE        EQU     $FC             ; song base set (all channel base set)
00004B9C                            ;TVR             EQU     $FD             ; table FVR
00004B9C                            ;DT              EQU     $FE             ; FM s.e mode
00004B9C =000000FF                  EXCOM           EQU     $FF             ; extend command
00004B9C =00000000                  S_PSE           EQU     0               ; song pause (song only)
00004B9C =00000001                  SSG             EQU     1               ; SSG set
00004B9C                            
00004B9C                            ;-------------< PAN MODE >--------------;
00004B9C =00000080                  LSET            EQU     $80             ; LRPAN left set
00004B9C =00000040                  RSET            EQU     $40             ; LRPAN right set
00004B9C =000000C0                  LRSET           EQU     $C0             ; LRPAN left & right set
00004B9C                            
00004B9C                            ;------------< NOISE MODE >-------------;
00004B9C =000000E0                  NOIS0           EQU     $E0             ; PSG noise mode 0 set
00004B9C =000000E1                  NOIS1           EQU     $E1             ; PSG noise mode 1 set
00004B9C =000000E2                  NOIS2           EQU     $E2             ; PSG noise mode 2 set
00004B9C =000000E3                  NOIS3           EQU     $E3             ; PSG noise mode 3 set
00004B9C =000000E4                  NOIS4           EQU     $E4             ; PSG noise mode 4 set
00004B9C =000000E5                  NOIS5           EQU     $E5             ; PSG noise mode 5 set
00004B9C =000000E6                  NOIS6           EQU     $E6             ; PSG noise mode 6 set
00004B9C =000000E7                  NOIS7           EQU     $E7             ; PSG noise mode 7 set
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;                LENGTH                 ;
00004B9C                            ;=======================================;
00004B9C =00000001                  L32_3           SET     1               ; 1
00004B9C =00000002                  L16_3           SET     2               ; 2
00004B9C =00000003                  L16             SET     3               ; 3
00004B9C =00000004                  L8_3            SET     L16_3*2         ; 4
00004B9C =00000006                  L8              SET     L16*2           ; 6
00004B9C =00000008                  L4_3            SET     L8_3*2          ; 8
00004B9C =00000009                  LF8             SET     L16*3           ; 9
00004B9C =0000000C                  L4              SET     L8*2            ; 12
00004B9C =00000012                  LF4             SET     L8*3            ; 18
00004B9C =00000018                  L2              SET     L4*2            ; 24
00004B9C =00000024                  LF2             SET     L4*3            ; 36
00004B9C =00000030                  L1              SET     L2*2            ; 48
00004B9C                            
00004B9C =00000008                  L83             SET     8               ; 8
00004B9C =00000004                  L163            SET     4               ; 4
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;                SCALE                  ;
00004B9C                            ;=======================================;
00004B9C =00000080                  NL              EQU     $80
00004B9C =00000081                  CN0             EQU     $81
00004B9C =00000082                  CS0             EQU     $82
00004B9C =00000082                  DF0             EQU     $82
00004B9C =00000083                  DN0             EQU     $83
00004B9C =00000084                  DS0             EQU     $84
00004B9C =00000084                  EF0             EQU     $84
00004B9C =00000085                  EN0             EQU     $85
00004B9C =00000086                  ES0             EQU     $86
00004B9C =00000085                  FF0             EQU     $85
00004B9C =00000086                  FN0             EQU     $86
00004B9C =00000087                  FS0             EQU     $87
00004B9C =00000087                  GF0             EQU     $87
00004B9C =00000088                  GN0             EQU     $88
00004B9C =00000089                  GS0             EQU     $89
00004B9C =00000089                  AF0             EQU     $89
00004B9C =0000008A                  AN0             EQU     $8A
00004B9C =0000008B                  AS0             EQU     $8B
00004B9C =0000008B                  BF0             EQU     $8B
00004B9C =0000008C                  BN0             EQU     $8C
00004B9C =0000008D                  BS0             EQU     $8D
00004B9C =0000008C                  CF1             EQU     $8C
00004B9C =0000008D                  CN1             EQU     CN0+12          ; $80
00004B9C =0000008E                  CS1             EQU     CS0+12
00004B9C =0000008E                  DF1             EQU     DF0+12
00004B9C =0000008F                  DN1             EQU     DN0+12
00004B9C =00000090                  DS1             EQU     DS0+12
00004B9C =00000090                  EF1             EQU     EF0+12
00004B9C =00000091                  EN1             EQU     EN0+12          ; $91
00004B9C =00000092                  ES1             EQU     ES0+12
00004B9C =00000091                  FF1             EQU     FF0+12
00004B9C =00000092                  FN1             EQU     FN0+12
00004B9C =00000093                  FS1             EQU     FS0+12
00004B9C =00000093                  GF1             EQU     GF0+12
00004B9C =00000094                  GN1             EQU     GN0+12          ; $94
00004B9C =00000095                  GS1             EQU     GS0+12
00004B9C =00000095                  AF1             EQU     AF0+12
00004B9C =00000096                  AN1             EQU     AN0+12
00004B9C =00000097                  AS1             EQU     AS0+12
00004B9C =00000097                  BF1             EQU     BF0+12
00004B9C =00000098                  BN1             EQU     BN0+12
00004B9C =00000099                  BS1             EQU     BS0+12
00004B9C =00000098                  CF2             EQU     CF1+12
00004B9C =00000099                  CN2             EQU     CN1+12          ; $99
00004B9C =0000009A                  CS2             EQU     CS1+12
00004B9C =0000009A                  DF2             EQU     DF1+12
00004B9C =0000009B                  DN2             EQU     DN1+12
00004B9C =0000009C                  DS2             EQU     DS1+12
00004B9C =0000009C                  EF2             EQU     EF1+12
00004B9C =0000009D                  EN2             EQU     EN1+12          ; $9D
00004B9C =0000009E                  ES2             EQU     ES1+12
00004B9C =0000009D                  FF2             EQU     FF1+12
00004B9C =0000009E                  FN2             EQU     FN1+12
00004B9C =0000009F                  FS2             EQU     FS1+12
00004B9C =0000009F                  GF2             EQU     GF1+12
00004B9C =000000A0                  GN2             EQU     GN1+12          ; $A0
00004B9C =000000A1                  GS2             EQU     GS1+12
00004B9C =000000A1                  AF2             EQU     AF1+12
00004B9C =000000A2                  AN2             EQU     AN1+12
00004B9C =000000A3                  AS2             EQU     AS1+12
00004B9C =000000A3                  BF2             EQU     BF1+12
00004B9C =000000A4                  BN2             EQU     BN1+12
00004B9C =000000A5                  BS2             EQU     BS1+12
00004B9C                            
00004B9C =000000A4                  CF3             EQU     CF2+12
00004B9C =000000A5                  CN3             EQU     CN2+12          ; $A5
00004B9C =000000A6                  CS3             EQU     CS2+12
00004B9C =000000A6                  DF3             EQU     DF2+12
00004B9C =000000A7                  DN3             EQU     DN2+12
00004B9C =000000A8                  DS3             EQU     DS2+12
00004B9C =000000A8                  EF3             EQU     EF2+12
00004B9C =000000A9                  EN3             EQU     EN2+12          ; $A9
00004B9C =000000AA                  ES3             EQU     ES2+12
00004B9C =000000A9                  FF3             EQU     FF2+12
00004B9C =000000AA                  FN3             EQU     FN2+12
00004B9C =000000AB                  FS3             EQU     FS2+12
00004B9C =000000AB                  GF3             EQU     GF2+12
00004B9C =000000AC                  GN3             EQU     GN2+12          ; $AC
00004B9C =000000AD                  GS3             EQU     GS2+12
00004B9C =000000AD                  AF3             EQU     AF2+12
00004B9C =000000AE                  AN3             EQU     AN2+12
00004B9C =000000AF                  AS3             EQU     AS2+12
00004B9C =000000AF                  BF3             EQU     BF2+12
00004B9C =000000B0                  BN3             EQU     BN2+12
00004B9C =000000B1                  BS3             EQU     BS2+12
00004B9C                            
00004B9C =000000B0                  CF4             EQU     CF3+12
00004B9C =000000B1                  CN4             EQU     CN3+12          ; $B1
00004B9C =000000B2                  CS4             EQU     CS3+12
00004B9C =000000B2                  DF4             EQU     DF3+12
00004B9C =000000B3                  DN4             EQU     DN3+12
00004B9C =000000B4                  DS4             EQU     DS3+12
00004B9C =000000B4                  EF4             EQU     EF3+12
00004B9C =000000B5                  EN4             EQU     EN3+12          ; $B5
00004B9C =000000B6                  ES4             EQU     ES3+12
00004B9C =000000B5                  FF4             EQU     FF3+12
00004B9C =000000B6                  FN4             EQU     FN3+12
00004B9C =000000B7                  FS4             EQU     FS3+12
00004B9C =000000B7                  GF4             EQU     GF3+12
00004B9C =000000B8                  GN4             EQU     GN3+12          ; $B8
00004B9C =000000B9                  GS4             EQU     GS3+12
00004B9C =000000B9                  AF4             EQU     AF3+12
00004B9C =000000BA                  AN4             EQU     AN3+12
00004B9C =000000BB                  AS4             EQU     AS3+12
00004B9C =000000BB                  BF4             EQU     BF3+12
00004B9C =000000BC                  BN4             EQU     BN3+12
00004B9C =000000BD                  BS4             EQU     BS3+12
00004B9C                            
00004B9C =000000BC                  CF5             EQU     CF4+12
00004B9C =000000BD                  CN5             EQU     CN4+12          ; $BD
00004B9C =000000BE                  CS5             EQU     CS4+12
00004B9C =000000BE                  DF5             EQU     DF4+12
00004B9C =000000BF                  DN5             EQU     DN4+12
00004B9C =000000C0                  DS5             EQU     DS4+12
00004B9C =000000C0                  EF5             EQU     EF4+12
00004B9C =000000C1                  EN5             EQU     EN4+12          ; $C1
00004B9C =000000C2                  ES5             EQU     ES4+12
00004B9C =000000C1                  FF5             EQU     FF4+12
00004B9C =000000C2                  FN5             EQU     FN4+12
00004B9C =000000C3                  FS5             EQU     FS4+12
00004B9C =000000C3                  GF5             EQU     GF4+12
00004B9C =000000C4                  GN5             EQU     GN4+12          ; $C4
00004B9C =000000C5                  GS5             EQU     GS4+12
00004B9C =000000C5                  AF5             EQU     AF4+12
00004B9C =000000C6                  AN5             EQU     AN4+12
00004B9C =000000C7                  AS5             EQU     AS4+12
00004B9C =000000C7                  BF5             EQU     BF4+12
00004B9C =000000C8                  BN5             EQU     BN4+12
00004B9C =000000C9                  BS5             EQU     BS4+12
00004B9C                            
00004B9C =000000C8                  CF6             EQU     CF5+12
00004B9C =000000C9                  CN6             EQU     CN5+12
00004B9C =000000CA                  CS6             EQU     CS5+12
00004B9C =000000CA                  DF6             EQU     DF5+12
00004B9C =000000CB                  DN6             EQU     DN5+12
00004B9C =000000CC                  DS6             EQU     DS5+12
00004B9C =000000CC                  EF6             EQU     EF5+12
00004B9C =000000CD                  EN6             EQU     EN5+12
00004B9C =000000CE                  ES6             EQU     ES5+12
00004B9C =000000CD                  FF6             EQU     FF5+12
00004B9C =000000CE                  FN6             EQU     FN5+12
00004B9C =000000CF                  FS6             EQU     FS5+12
00004B9C =000000CF                  GF6             EQU     GF5+12
00004B9C =000000D0                  GN6             EQU     GN5+12
00004B9C =000000D1                  GS6             EQU     GS5+12
00004B9C =000000D1                  AF6             EQU     AF5+12
00004B9C =000000D2                  AN6             EQU     AN5+12
00004B9C =000000D3                  AS6             EQU     AS5+12
00004B9C =000000D3                  BF6             EQU     BF5+12
00004B9C =000000D4                  BN6             EQU     BN5+12
00004B9C =000000D5                  BS6             EQU     BS5+12
00004B9C                            
00004B9C =000000D4                  CF7             EQU     CF6+12
00004B9C =000000D5                  CN7             EQU     CN6+12
00004B9C =000000D6                  CS7             EQU     CS6+12
00004B9C =000000D6                  DF7             EQU     DF6+12
00004B9C =000000D7                  DN7             EQU     DN6+12
00004B9C =000000D8                  DS7             EQU     DS6+12
00004B9C =000000D8                  EF7             EQU     EF6+12
00004B9C =000000D9                  EN7             EQU     EN6+12
00004B9C =000000DA                  ES7             EQU     ES6+12
00004B9C =000000D9                  FF7             EQU     FF6+12
00004B9C =000000DA                  FN7             EQU     FN6+12
00004B9C =000000DB                  FS7             EQU     FS6+12
00004B9C =000000DB                  GF7             EQU     GF6+12
00004B9C =000000DC                  GN7             EQU     GN6+12
00004B9C =000000DD                  GS7             EQU     GS6+12
00004B9C =000000DD                  AF7             EQU     AF6+12
00004B9C =000000DE                  AN7             EQU     AN6+12
00004B9C =000000DF                  AS7             EQU     AS6+12
00004B9C =000000DF                  BF7             EQU     BF6+12
00004B9C =000000E0                  BN7             EQU     BN6+12
00004B9C =000000E1                  BS7             EQU     BS6+12
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;             END OF FILE               ;
00004B9C                            ;=======================================;
00004B9C                            
00004B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00004B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00004B9C                            		include	"sound\mcr.lib"
00004B9C                            ;=======================================================;
00004B9C                            ;			$$$MCR.LIB	(Sound Macro Library)			;
00004B9C                            ;						ORG. MDMCR11.LIB				;
00004B9C                            ;				'Sound-Source'							;
00004B9C                            ;				 for Mega Drive (68K)					;
00004B9C                            ;						Ver  1.1 / 1990.9.1				;
00004B9C                            ;									  By  H.Kubota		;
00004B9C                            ;=======================================================;
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;				  TDW					;
00004B9C                            ;=======================================;
00004B9C                            TDW		macro	x1,x2			;　相対アドレスの算出
00004B9C                            		dc.b	(((\x1-\x2)&$ff00)>>8)
00004B9C                            		dc.b	((\x1-\x2)&$ff)
00004B9C                            		endm
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;				  JDW					;
00004B9C                            ;=======================================;
00004B9C                            JDW		macro	addr
00004B9C                            		dc.b	(((\addr-*-1)&$ff00)>>8)
00004B9C                            		dc.b	((\addr-*)&$ff)
00004B9C                            		endm
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;		   Z80 BUS REQUEST ON			;
00004B9C                            ;=======================================;
00004B9C                            z80bus_on		macro
00004B9C                            		move.w	#$100,z80busreq
00004B9C                            		endm
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;		   Z80 BUS REQUEST ON			;
00004B9C                            ;=======================================;
00004B9C                            z80bus_off		macro
00004B9C                            		move.w	#$000,z80busreq
00004B9C                            		endm
00004B9C                            
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;				FM VOICE				;
00004B9C                            ;=======================================;
00004B9C                            ;		CNF		ALG,FBK
00004B9C                            ;		MD		M1,D1,M2,D2,M3,D3,M4,D4
00004B9C                            ;		TL		T1,T2,T3,T4
00004B9C                            ;		RSAR	X1,X2,X3,X4
00004B9C                            ;		D1R		X1,X2,X3,X4
00004B9C                            ;		D2R		X1,X2,X3,X4
00004B9C                            ;		RRL		R1,DL1,R2,DL2,R3,DL3,R4,DL4
00004B9C                            
00004B9C                            ;----------------< CNF >----------------;
00004B9C                            CNF		MACRO	ALG,FBK
00004B9C                            cnect	set		\ALG
00004B9C                            		DC.B	\ALG+\FBK*8
00004B9C                            		ENDM
00004B9C                            ;----------------< MD >-----------------;
00004B9C                            MD		MACRO	M1,D1,M2,D2,M3,D3,M4,D4
00004B9C                            		DC.B	\D1*10H+\M1,\D2*10H+\M2
00004B9C                            		DC.B	\D3*10H+\M3,\D4*10H+\M4
00004B9C                            		ENDM
00004B9C                            ;----------------< TL >-----------------;
00004B9C                            TL		MACRO	T1,T2,T3,T4
00004B9C                            		if		cnect=0
00004B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00004B9C                            		endif
00004B9C                            		if		cnect=1
00004B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00004B9C                            		endif
00004B9C                            		if		cnect=2
00004B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00004B9C                            		endif
00004B9C                            		if		cnect=3
00004B9C                            		dc.b	\T1,\T2,\T3,\T4|80h
00004B9C                            		endif
00004B9C                            		if		cnect=4
00004B9C                            		dc.b	\T1,\T2|80h,\T3,\T4|80h
00004B9C                            		endif
00004B9C                            		if		cnect=5
00004B9C                            		dc.b	\T1,\T2|80h,\T3|80h,\T4|80h
00004B9C                            		endif
00004B9C                            		if		cnect=6
00004B9C                            		dc.b	\T1,\T2|80h,\T3|80h,\T4|80h
00004B9C                            		endif
00004B9C                            		if		cnect=7
00004B9C                            		dc.b	\T1|80h,\T2|80h,\T3|80h,\T4|80h
00004B9C                            		endif
00004B9C                            		ENDM
00004B9C                            ;----------------< RSAR >---------------;
00004B9C                            RSAR	MACRO	K1,A1,K2,A2,K3,A3,K4,A4
00004B9C                            		DC.B	\K1*40H+\A1,\K2*40H+\A2,\K3*40H+\A3,\K4*40H+\A4
00004B9C                            		ENDM
00004B9C                            ;----------------< D1R >----------------;
00004B9C                            D1R		MACRO	X1,X2,X3,X4
00004B9C                            		DC.B	\X1,\X2,\X3,\X4
00004B9C                            		ENDM
00004B9C                            ;----------------< D2R >----------------;
00004B9C                            D2R		MACRO	X1,X2,X3,X4
00004B9C                            		DC.B	\X1,\X2,\X3,\X4
00004B9C                            		ENDM
00004B9C                            ;----------------< RRL >----------------;
00004B9C                            RRL		MACRO	R1,DL1,R2,DL2,R3,DL3,R4,DL4
00004B9C                            		DC.B	\R1+\DL1*10H,\R2+\DL2*10H
00004B9C                            		DC.B	\R3+\DL3*10H,\R4+\DL4*10H
00004B9C                            		ENDM
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			  END OF FILE				;
00004B9C                            ;=======================================;
00004B9C                            
00004B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00004B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00004B9C                            		include	"sound\eq.lib"
00004B9C                            ;=======================================================;
00004B9C                            ;			$$$EQ.LIB  (Sound Assign Library)			;
00004B9C                            ;						ORG. MDEQ11.LIB					;
00004B9C                            ;				'Sound-Source'							;
00004B9C                            ;				 for Mega Drive (68K)					;
00004B9C                            ;						Ver  1.1 / 1990.9.1				;
00004B9C                            ;									  By  H.Kubota		;
00004B9C                            ;=======================================================;
00004B9C                            ;=======================================;
00004B9C                            ;				 ON/OFF					;
00004B9C                            ;=======================================;
00004B9C =00000001                  on				EQU		1
00004B9C =00000001                  ON				EQU		1
00004B9C =00000000                  off				EQU		0
00004B9C =00000000                  OFF				EQU		0
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			  MACRO SWITCH				;
00004B9C                            ;=======================================;
00004B9C =00000000                  prg				EQU		off				; off=develop  on=for programer
00004B9C =00000000                  s14				EQU		off				; system14 mode
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;		   SOUND START ADDRESS			;
00004B9C                            ;=======================================;
00004B9C                            ;sound_top		EQU		$20000			; adrtb address (sound top address)
00004B9C                            ;se_top			EQU		$28000			; develop ver use
00004B9C                            ;control_top	EQU		$2e000			; control top address
00004B9C                            ;voice_top		EQU		$30000			; voice top address
00004B9C                            
00004B9C                            ; Modified by ctr to match position expected by ED11.
00004B9C =0000C000                  sound_top		EQU		$0c000			; adrtb address (sound top address)
00004B9C =00020000                  voice_top		EQU		$20000			; voice top address
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			 ADDRTB ASSIGN				;
00004B9C                            ;=======================================;
00004B9C =00000000                  hd_prtb			EQU		0				; 
00004B9C =00000001                  hd_backtb		EQU		1				; 
00004B9C =00000002                  hd_bgmtb		EQU		2				; 
00004B9C =00000003                  hd_setb			EQU		3				; 
00004B9C =00000004                  hd_tvrtb		EQU		4				; 
00004B9C =00000005                  hd_envetb		EQU		5				; 
00004B9C =00000007                  hd_sound		EQU		7				; fix 7 (sound editor use)
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			BACK S.E. USE NO.			;
00004B9C                            ;=======================================;
00004B9C =00000002                  back_se			EQU		2				; BACK S.E USING
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			   REQUEST NO.				;
00004B9C                            ;=======================================;
00004B9C =00000081                  songstrt		EQU		$81				; song start no.
00004B9C =0000008F                  songend			EQU		$8F				; song end no.
00004B9C =000000A0                  sestrt			EQU		$A0				; s.e start no.
00004B9C =000000AF                  seend			EQU		$AF				; s.e end no.
00004B9C =000000D0                  bkstrt			EQU		$D0				; back s.e start no.
00004B9C =000000D8                  vostrt			EQU		$D8				; voice start no.
00004B9C =000000E0                  utlst			EQU		$E0				; utility start no.
00004B9C =000000E2                  lstno			EQU		$E2				; last no.
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			FAID OUT COUNTER			;
00004B9C                            ;=======================================;
00004B9C =00000003                  fout_ct0		EQU		$03				; faid out counter 0
00004B9C =00000028                  fout_ct1		EQU		$28				; faid out counter 1(INTRUPPET SUU)
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			USE CHANNEL TOTAL			;
00004B9C                            ;=======================================;
00004B9C =00000006                  fm_no			EQU		6
00004B9C =00000001                  pcm_no			EQU		1
00004B9C =00000003                  psg_no			EQU		3
00004B9C =0000000A                  song_no			EQU		10
00004B9C =00000003                  fm_se_no		EQU		3
00004B9C =00000003                  psg_se_no		EQU		3
00004B9C =00000006                  se_no			EQU		fm_se_no+psg_se_no
00004B9C =00000012                  chian_no		EQU		fm_no+pcm_no+psg_no+se_no+2		; 2:back_se
00004B9C =00000019                  voice_vol		EQU		25				; FM voice table volm
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			Z80 SRAM (PCM)				;
00004B9C                            ;=======================================;
00004B9C =00A01FFF                  z80kyflag		EQU		$A01FFF			; z80 key flag
00004B9C =00A01FFD                  z80_flg			EQU		$A01FFD			; z80 opn using = 80h
00004B9C =00A01FF6                  z80use_flg		EQU		$A01FF6			; z80 using flag
00004B9C =00A00183                  z80tom_dl_str	EQU		$A00183			; mdDT.src tom delay address
00004B9C =00A00227                  z80snr_dl_str	EQU		$A00227			; mdDT.src snare delay address
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			   SOUND RAM				;
00004B9C                            ;=======================================;
00004B9C                            ;--------------< COMMON >---------------;
00004B9C =00FFD300                  sound_ram		EQU		$ffd300			; sound ram top address
00004B9C =00000000                  prfl			EQU		$00				; priority flag
00004B9C =00000001                  rcunt			EQU		$01				; delay count work
00004B9C =00000002                  cuntst			EQU		$02				; delay store
00004B9C =00000003                  t_flg			EQU		$03				; timing flag 
00004B9C =00000004                  foutfl			EQU		$04				; faid out flag (volume suu)
00004B9C =00000005                  fouttm_ct		EQU		$05				; faid out timer (work)
00004B9C =00000006                  fouttm			EQU		$06				; faid out timer (interrupt)
00004B9C =00000007                  pause_flg		EQU		$07				; pause flg (nz: pause on)(RAM+8)
00004B9C =00000008                  rythm_flag		EQU		$08				; rythm flag
00004B9C =00000009                  kyflag0			EQU		$09				; sound key flag
00004B9C =0000000A                  kyflag			EQU		$0A				; key flag (buffer top)
00004B9C =0000000A                  buf1			EQU		kyflag			; buffer 1
00004B9C =0000000B                  buf2			EQU		kyflag+1		; buffer 2
00004B9C =0000000C                  buf3			EQU		kyflag+2		; buffer 3
00004B9C =0000000E                  seflag			EQU		$0E				; se flag
00004B9C =0000000F                  se_mode_flg		EQU		$0F				; effect mode
00004B9C =00000010                  dt1				EQU		$10				; store slot 1 detune freq (2byte)
00004B9C =00000012                  dt2				EQU		$12				; store slot 2 detune freq (2byte)
00004B9C =00000014                  dt3				EQU		$14				; store slot 3 detune freq (2byte)
00004B9C =00000016                  dt4				EQU		$16				; store slot 4 detune freq (2byte)
00004B9C =00000018                  sng_voice_addr	EQU		$18				; song voice top address (long word)
00004B9C =0000001C                  se_voice_addr	EQU		$1C				; se voice top address (long word)
00004B9C =00000020                  back_voice_addr	EQU		$20				; backse voice top address (long word)
00004B9C =00000040                  flags			EQU		$40
00004B9C                            
00004B9C                            ;-----< CHANNEL WORK RAM (OFFSET) >-----;
00004B9C =00000030                  flgvol			EQU		$30				; channel work ram size
00004B9C                            
00004B9C =00000040                  tb20ch			EQU		$40				; FM 6ch (rythm)
00004B9C =00000070                  tb21ch			EQU		tb20ch+flgvol	; FM 0ch (tone)
00004B9C =000000A0                  tb22ch			EQU		tb21ch+flgvol	; FM 1ch (tone)
00004B9C =000000D0                  tb23ch			EQU		tb22ch+flgvol	; FM 2ch (tone)
00004B9C =00000100                  tb24ch			EQU		tb23ch+flgvol	; FM 4ch (tone)
00004B9C =00000130                  tb25ch			EQU		tb24ch+flgvol	; FM 5ch (tone)
00004B9C =00000160                  tb26ch			EQU		tb25ch+flgvol	; FM 6ch (tone)
00004B9C =00000190                  tb27ch			EQU		tb26ch+flgvol	; PSG 0ch
00004B9C =000001C0                  tb28ch			EQU		tb27ch+flgvol	; PSG 1ch
00004B9C =000001F0                  tb29ch			EQU		tb28ch+flgvol	; PSG 2ch (rythm)
00004B9C =00000220                  tb2Ach			EQU		tb29ch+flgvol	; FM S.E 2ch
00004B9C =00000250                  tb2Bch			EQU		tb2Ach+flgvol	; FM S.E 5ch
00004B9C =00000280                  tb2Cch			EQU		tb2Bch+flgvol	; FM S.E 6ch
00004B9C =000002B0                  tb2Dch			EQU		tb2Cch+flgvol	; PSG S.E 1ch
00004B9C =000002E0                  tb2Ech			EQU		tb2Dch+flgvol	; PSG S.E 2ch
00004B9C =00000310                  tb2Fch			EQU		tb2Ech+flgvol	; PSG S.E 3ch
00004B9C =00000340                  tb30ch			EQU		tb2Fch+flgvol	; back S.E 1ch
00004B9C =00000370                  tb31ch			EQU		tb30ch+flgvol	; back S.E 2ch
00004B9C                            
00004B9C                            ;-------< WORK RAM DIRECT ASSIGN >------;
00004B9C =00000040                  wk_top			EQU		tb20ch
00004B9C =00000040                  pcm_rythm_wk	EQU		tb20ch
00004B9C =00000070                  fm_wk_top		EQU		tb21ch
00004B9C =00000070                  fm0_wk			EQU		tb21ch
00004B9C =000000A0                  fm1_wk			EQU		tb22ch
00004B9C =000000D0                  fm2_wk			EQU		tb23ch
00004B9C =00000100                  fm4_wk			EQU		tb24ch
00004B9C =00000130                  fm5_wk			EQU		tb25ch
00004B9C =00000160                  fm6_wk			EQU		tb26ch
00004B9C =00000190                  psg_wk_top		EQU		tb27ch
00004B9C =00000190                  psg0_wk			EQU		tb27ch
00004B9C =000001C0                  psg1_wk			EQU		tb28ch
00004B9C =000001F0                  psg2_wk			EQU		tb29ch
00004B9C =00000220                  fm_se_wk_top	EQU		tb2Ach
00004B9C =00000220                  fm_se1_wk		EQU		tb2Ach
00004B9C =00000250                  fm_se2_wk		EQU		tb2Bch
00004B9C =00000280                  fm_se3_wk		EQU		tb2Cch
00004B9C =000002B0                  psg_se_wk_top	EQU		tb2Dch
00004B9C =000002B0                  psg_se1_wk		EQU		tb2Dch
00004B9C =000002E0                  psg_se2_wk		EQU		tb2Ech
00004B9C =00000310                  psg_se3_wk		EQU		tb2Fch
00004B9C =00000340                  back_se_wk		EQU		tb30ch
00004B9C =00000370                  back_se2_wk		EQU		tb31ch
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;				 FLAGS					;
00004B9C                            ;=======================================;
00004B9C =00000000                  flag			EQU		$00				; flag
00004B9C =00000007                  _en				EQU		7				;  bit 7: enable
00004B9C =00000004                  _tie			EQU		4				;	   4: tie flag
00004B9C =00000003                  _fvr			EQU		3				;	   3: fvr flag
00004B9C =00000002                  _wr				EQU		2				;	   2: data write enable flag
00004B9C =00000001                  _null			EQU		1				;	   1: null (NL) flag
00004B9C =00000001                  _nl				EQU		1				;	   1: null (NL) flag
00004B9C =00000000                  _pse			EQU		0				;	   0: song pause flag
00004B9C                            
00004B9C =00000001                  chian			EQU		$01				; channel no.
00004B9C =00000002                  cbase			EQU		$02				; constant base counter
00004B9C =00000003                  dtstr			EQU		$03				; DMY
00004B9C =00000004                  tbpon			EQU		$04				; music table pointer (4 bytes)
00004B9C =00000008                  bias			EQU		$08				; scale data bias
00004B9C =00000009                  volm			EQU		$09				; volume date
00004B9C =0000000A                  panstr			EQU		$0A				; lrpan mode store
00004B9C =0000000B                  enve			EQU		$0B				; FM: voice no./ PSG: envelope no.store
00004B9C =0000000C                  econt			EQU		$0C				; envelope counter (PSG)
00004B9C =0000000D                  stac			EQU		$0D				; [CMCALL] stack pointer
00004B9C =0000000E                  lcont			EQU		$0E				; length data
00004B9C =0000000F                  ecstr			EQU		$0F				; length counter
00004B9C =00000010                  freqb			EQU		$10				; base frequency (2 bytes)
00004B9C =00000012                  gate			EQU		$12				; gate counter
00004B9C =00000013                  gate_str		EQU		$13				; gate data
00004B9C =00000014                  fvr_str			EQU		$14				; [FVR] store address (4 bytes)
00004B9C =00000018                  v_delay			EQU		$18				; [FVR] delay
00004B9C =00000019                  v_cont			EQU		$19				; [FVR] counter
00004B9C =0000001A                  v_add			EQU		$1A				; [FVR] add data
00004B9C =0000001B                  v_limit			EQU		$1B				; [FVR] limit
00004B9C =0000001C                  v_freq			EQU		$1C				; [FVR] frequency (2 bytes)
00004B9C =0000001E                  fdt_freq		EQU		$1E				; [FDT] frequency
00004B9C =0000001F                  pan_no			EQU		$1F				; pan mode stpre
00004B9C =00000020                  pan_tb			EQU		$20				; pan table no.
00004B9C =00000021                  pan_start		EQU		$21				; pan start point
00004B9C =00000022                  pan_limit		EQU		$22				; pan limit
00004B9C =00000023                  pan_leng		EQU		$23				; pan length
00004B9C =00000024                  pan_cont		EQU		$24				; pan count
00004B9C =00000025                  algo			EQU		$25				; FM algorythm
00004B9C =00000026                  ntype			EQU		$26				; noise type (E0h-E7h)
00004B9C                            ;env_s			EQU		$27				; song no.store (other song enve use)
00004B9C =00000028                  reptr			EQU		$28				; repeat counter (4 bytes)
00004B9C                            
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			ENVELOPE COMMAND			;
00004B9C                            ;=======================================;
00004B9C =00000080                  TBREPT			EQU		$80				; table repeat sign
00004B9C =00000081                  TBSTAY			EQU		$81				; table staying sign
00004B9C =00000083                  TBEND			EQU		$83				; table end sign
00004B9C =00000084                  TBADD			EQU		$84				; after this command
00004B9C                            										; data=([table data]-0)*[add data]
00004B9C =00000085                  TBBAK			EQU		$85				; table pointer set next data
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;				HEADDER					;
00004B9C                            ;=======================================;
00004B9C =00000000                  hd_voice		EQU		0
00004B9C =00000002                  hd_fmch_no		EQU		2
00004B9C =00000003                  hd_psgch_no		EQU		3
00004B9C =00000004                  hd_base			EQU		4
00004B9C =00000005                  hd_delay		EQU		5
00004B9C =00000006                  hd_fmdt_top		EQU		6
00004B9C                            
00004B9C =00000002                  hd_se_base		EQU		2				; s.e base
00004B9C =00000003                  hd_se_use		EQU		3				; s.e use total
00004B9C =00000004                  hd_sedt_top		EQU		4				; s.e table channel data start addr
00004B9C                            
00004B9C =00000001                  hd_sech_no		EQU		1				; offset from hd chiannel  top
00004B9C                            
00004B9C =0000000C                  hd_psg_vol		EQU		6+6				; ram using
00004B9C =0000000A                  hd_fm_vol		EQU		4+6				; ram using
00004B9C =0000000A                  hd_sepg_vol		EQU		10
00004B9C =0000000C                  hd_sefm_vol		EQU		12
00004B9C                            ;=======================================;
00004B9C                            ;			FM CHIP REGISTOR			;
00004B9C                            ;=======================================;
00004B9C =0000002B                  dsel			EQU		$2B				;
00004B9C =0000002A                  dreg			EQU		$2A				;
00004B9C =00000021                  fmtest			EQU		$21				; lsi test data
00004B9C =00000022                  lfo_fq			EQU		$22				;
00004B9C =00000024                  timer_a			EQU		$24				; timer A msb 8 bit data
00004B9C                            										; 25H = lsb 2 bit data
00004B9C =00000026                  timer_b			EQU		$26				; timer B data
00004B9C =00000027                  mode_tim		EQU		$27				; TIMER & FM MODE CONTROL
00004B9C =00000028                  key_cont		EQU		$28				; KEY ON OFF CONTROL
00004B9C =00000030                  dt_mult			EQU		$30				; detune/multiple data
00004B9C =00000040                  t_lvl			EQU		$40				; total level data
00004B9C =00000050                  ks_at_rt		EQU		$50				; key scale/attack rate data
00004B9C =00000060                  dec_rt			EQU		$60				; decay rate data
00004B9C =00000070                  sus_rt			EQU		$70				; sustain rate data
00004B9C =00000080                  sus_lv_rl_rt	EQU		$80				; sustain level/release rate data
00004B9C =000000A0                  f_num1			EQU		$A0				; frequency number 1
00004B9C =000000A4                  blk_f_num2		EQU		$A4				; frequency number 2 & block data
00004B9C =000000A8                  f_num3ch		EQU		$A8				; 3ch slot F-number 1
00004B9C =000000AC                  bl_fnum3ch		EQU		$AC				; 3ch slot F-number 2 & block data
00004B9C =000000B0                  fb_con			EQU		$B0				; self feedback/connection
00004B9C =000000B4                  lr_mod			EQU		$B4
00004B9C                            
00004B9C =00000004                  FMNON			EQU		$04
00004B9C =00000080                  PGNON			EQU		$80
00004B9C                            
00004B9C =00000040                  se_mode			EQU		$40
00004B9C =00000000                  nomal_mode		EQU		0
00004B9C                            
00004B9C                            ;---------------< SLOT >----------------;
00004B9C =000000B0                  FBC				EQU		$B0				; self feedback/connection
00004B9C =000000B4                  RL				EQU		$B4
00004B9C                            
00004B9C =00000030                  MU1				EQU		$30
00004B9C =00000038                  MU2				EQU		$38
00004B9C =00000034                  MU3				EQU		$34
00004B9C =0000003C                  MU4				EQU		$3C
00004B9C =00000030                  DM1				EQU		$30
00004B9C =00000038                  DM2				EQU		$38
00004B9C =00000034                  DM3				EQU		$34
00004B9C =0000003C                  DM4				EQU		$3C
00004B9C =00000040                  TL1				EQU		$40
00004B9C =00000048                  TL2				EQU		$48
00004B9C =00000044                  TL3				EQU		$44
00004B9C =0000004C                  TL4				EQU		$4C
00004B9C =00000050                  AR1				EQU		$50
00004B9C =00000058                  AR2				EQU		$58
00004B9C =00000054                  AR3				EQU		$54
00004B9C =0000005C                  AR4				EQU		$5C
00004B9C =00000060                  DR1				EQU		$60
00004B9C =00000068                  DR2				EQU		$68
00004B9C =00000064                  DR3				EQU		$64
00004B9C =0000006C                  DR4				EQU		$6C
00004B9C =00000070                  SR1				EQU		$70
00004B9C =00000078                  SR2				EQU		$78
00004B9C =00000074                  SR3				EQU		$74
00004B9C =0000007C                  SR4				EQU		$7C
00004B9C =00000080                  RR1				EQU		$80
00004B9C =00000088                  RR2				EQU		$88
00004B9C =00000084                  RR3				EQU		$84
00004B9C =0000008C                  RR4				EQU		$8C
00004B9C =00000090                  SSG1			EQU		$90
00004B9C =00000098                  SSG2			EQU		$98
00004B9C =00000094                  SSG3			EQU		$94
00004B9C =0000009C                  SSG4			EQU		$9C
00004B9C =000000AD                  bfsl1			EQU		$AD				; 3ch 1slot F-number 2 & block data
00004B9C =000000AE                  bfsl2			EQU		$AE				; 3ch 2slot F-number 2 & block data
00004B9C =000000AC                  bfsl3			EQU		$AC				; 3ch 3slot F-number 2 & block data
00004B9C =000000A6                  bfsl4			EQU		$A6				; 3ch 3slot F-number 2 & block data		
00004B9C                            ;=======================================;
00004B9C                            ;			  FM CHIP I/O				;
00004B9C                            ;=======================================;
00004B9C =00A04000                  opn1			EQU		$a04000
00004B9C =00A04002                  opn2			EQU		opn1+$02
00004B9C                            
00004B9C =00A04000                  opn_status		EQU		opn1+$00		; 2612 status
00004B9C =00A04000                  opn1_adr		EQU		opn1+$00		; 2612 OPN1 address
00004B9C =00A04001                  opn1_data		EQU		opn1+$01		; 2612 OPN1 data
00004B9C                            
00004B9C =00A04002                  opn2_adr		EQU		opn2+$00		; 2612 ADDRESS
00004B9C =00A04003                  opn2_data		EQU		opn2+$01		; 2612 data
00004B9C                            
00004B9C =00C00011                  psg68k			EQU		$C00011			; PSG address
00004B9C                            
00004B9C =00A11100                  z80busreq		EQU		$a11100			; z80 bus rEQUest
00004B9C =00A11200                  z80reset		EQU		$a11200			; z80 reset
00004B9C                            
00004B9C                            
00004B9C                            ;=======================================;
00004B9C                            ;			  END OF FILE				;
00004B9C                            ;=======================================;
00004B9C                            
00004B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00004B9C                            ; vim: set ft=asm68k sw=4 ts=4 noet:
00004B9C                            
00004B9C                            ; ---------------------------------------------------------------------------
00004B9C                            ; Music data
00004B9C                            ; ---------------------------------------------------------------------------
00004B9C                            		include	"sound/sng81.s"
00004B9C                            ;=======================================================;
00004B9C                            ;			*$$SNG81.S	(Song Data)						;
00004B9C                            ;						ORG. MDSNG111.S					;
00004B9C                            ;				'Sound-Source'							;
00004B9C                            ;				 for Mega Drive (68K)					;
00004B9C                            ;						Ver  1.1 / 1990.9.1				;
00004B9C                            ;									  By  H.Kubota		;
00004B9C                            ;=======================================================;
00004B9C                            
00004B9C                            ;		public	S81
00004B9C                            
00004B9C                            ;		list off
00004B9C                            ;		include	mdEQ11.LIB
00004B9C                            ;		include	mdMCR11.LIB
00004B9C                            ;		include	mdTB11.LIB
00004B9C                            ;		list on
00004B9C                            
00004B9C                            		even
00004B9C                            
00004B9C                            ;===============================================;
00004B9C                            ;												;
00004B9C                            ;					 ASSIGN						;
00004B9C                            ;												;
00004B9C                            ;===============================================;
00004B9C                            ;=====< S81 CHANNEL TOTAL >=====;
00004B9C =00000006                  FM81	EQU		6				; FM Channel Total
00004B9C =00000003                  PSG81	EQU		3				; PSG Channel Total
00004B9C                            ;=========< S81 TEMPO >=========;
00004B9C =00000002                  TP81	EQU		2				; Tempo
00004B9C =00000005                  DL81	EQU		5				; Delay
00004B9C                            ;==========< S81 BIAS >=========;
00004B9C =0000000C                  FB810	EQU		12				; FM 0ch
00004B9C =00000000                  FB811	EQU		0				; FM 1ch
00004B9C =00000000                  FB812	EQU		0				; FM 2ch
00004B9C =00000000                  FB814	EQU		0				; FM 4ch
00004B9C =00000000                  FB815	EQU		0				; FM 5ch
00004B9C =00000000                  FB816	EQU		0				; FM 6ch (if don't use PCM drum)
00004B9C =FFFFFFDC                  PB818	EQU		-12*3			; PSG 80ch
00004B9C =FFFFFFDC                  PB81A	EQU		-12*3			; PSG A0ch
00004B9C =00000000                  PB81C	EQU		0				; PSG C0ch
00004B9C                            ;==========< S81 VOLM >=========;
00004B9C =00000016                  FA810	EQU		$16				; FM 0ch
00004B9C =00000004                  FA811	EQU		$04				; FM 1ch
00004B9C =00000016                  FA812	EQU		$16				; FM 2ch
00004B9C =00000016                  FA814	EQU		$16				; FM 4ch
00004B9C =00000016                  FA815	EQU		$16				; FM 5ch
00004B9C =00000010                  FA816	EQU		$10				; FM 6ch (if don't use PCM drum)
00004B9C =00000007                  PA818	EQU		$07				; PSG 80ch
00004B9C =00000007                  PA81A	EQU		$07				; PSG A0ch
00004B9C =00000003                  PA81C	EQU		$03				; PSG C0ch
00004B9C                            ;==========< S81 ENVE >=========;
00004B9C =00000000                  PE818	EQU		0				; PSG 80ch
00004B9C =00000000                  PE81A	EQU		0				; PSG A0ch
00004B9C =00000004                  PE81C	EQU		4				; PSG C0ch
00004B9C                            
00004B9C                            ;===============================================;
00004B9C                            ;												;
00004B9C                            ;					 HEADER						;
00004B9C                            ;												;
00004B9C                            ;===============================================;
00004B9C                            S81:
00004B9C 0000                       		TDW		TIMB81,S81				; Voice Top Address
00004B9E 0603 0205                  		DC.B	FM81,PSG81,TP81,DL81	; FM Total,PSG Total,Tempo,Delay
00004BA2                            
00004BA2 0000                       		TDW		TAB81D,S81				; PCM Drum Table Pointer
00004BA4 0000                       		DC.B	0,0						; Bias,Volm (Dummy)
00004BA6                            
00004BA6 0000                       		TDW		TAB810,S81				; FM 0ch Table Pointer
00004BA8 0C16                       		DC.B	FB810,FA810				; Bias,Volm
00004BAA                            
00004BAA 0000                       		TDW		TAB811,S81				; FM 1ch Table Pointer
00004BAC 0004                       		DC.B	FB811,FA811				; Bias,Volm
00004BAE                            
00004BAE 0000                       		TDW		TAB812,S81				; FM 2ch Table Pointer
00004BB0 0016                       		DC.B	FB812,FA812				; Bias,Volm
00004BB2                            
00004BB2 0000                       		TDW		TAB814,S81				; FM 4ch Table Pointer
00004BB4 0016                       		DC.B	FB814,FA814				; Bias,Volm
00004BB6                            
00004BB6 0000                       		TDW		TAB815,S81				; FM 5ch Table Pointer
00004BB8 0016                       		DC.B	FB815,FA815				; Bias,Volm
00004BBA                            
00004BBA 0000                       		TDW		TAB818,S81				; PSG 80ch Table Pointer
00004BBC DC07 0000                  		DC.B	PB818,PA818,0,PE818		; Bias,Volm,Dummy,Enve
00004BC0                            
00004BC0 0000                       		TDW		TAB81A,S81				; PSG A0ch Table Pointer
00004BC2 DC07 0000                  		DC.B	PB81A,PA81A,0,PE81A		; Bias,Volm,Dummy,Enve
00004BC6                            
00004BC6 0000                       		TDW		TAB81C,S81				; PSG C0ch Table Pointer
00004BC8 0003 0004                  		DC.B	PB81C,PA81C,0,PE81C		; Bias,Volm,Dummy,Enve
00004BCC                            
00004BCC                            ;===============================================;
00004BCC                            ;												;
00004BCC                            ;				   SONG TABLE					;
00004BCC                            ;												;
00004BCC                            ;===============================================;
00004BCC                            ;===============================================;
00004BCC                            ;					 FM 0ch						;
00004BCC                            ;===============================================;
00004BCC =00004BCC                  TAB810	EQU		*
00004BCC EF00                       		DC.B	FEV,0
00004BCE =00004BCE                  T8100	EQU		*
00004BCE 8060 80                    		DC.B	NL,L1+L1,NL
00004BD1 =00004BD1                  T810A	EQU		*
00004BD1 =00004BD1                  T810A_0	EQU		*
00004BD1 F8                         		DC.B	CMCALL
00004BD2 0000                       		JDW		SUB8100M
00004BD4 F700 03                    		DC.B	CMREPT,0,3
00004BD7 FFF9                       		JDW		T810A_0
00004BD9 8006 F00B 01F0 FFA3 06F4+  		DC.B	NL,L8,FVR,0BH,1,0F0H,0FFH,BF2,L8,VROFF,BF2,L16,BF2,AF2,BF2
00004BE8 A506 F001 0103 04A5 F480+  		DC.B	CN3,L8,FVR,1,1,3,4,CN3,VROFF,NL,BF2,L16,CN3
00004BF5 A606 F001 0103 04A6 F480+  		DC.B	DF3,L8,FVR,1,1,3,4,DF3,VROFF,NL,CN3,L16,DF3
00004C02 A401 E7A5 05F0 0101 0404+  		DC.B	BN2,1,TIE,CN3,L8-1,FVR,1,1,4,4,AF2,L8+2,VROFF,NL,L8-2,NL,L8
00004C13                            		
00004C13 =00004C13                  T810B	EQU		*
00004C13 =00004C13                  T810B_0	EQU		*
00004C13 F8                         		DC.B	CMCALL
00004C14 0000                       		JDW		SUB810B
00004C16                            		
00004C16 F700 03                    		DC.B	CMREPT,0,3
00004C19 FFF9                       		JDW		T810B_0
00004C1B                            		
00004C1B A303 A3A3 AAF0 0101 0604+  		DC.B	BF2,L16,BF2,BF2,FN3,FVR,1,1,6,4,EF3,L8,VROFF,BF2,L8
00004C2A 800C AA03 AAAA AA          		DC.B	NL,L4,FN3,L16,FN3,FN3,FN3
00004C31 F001 0106 04AD 06F4 AA03+  		DC.B	FVR,1,1,6,4,AF3,L8,VROFF,FN3,L16,NL,L16+L8,FN3,L16,FN3
00004C40 E6FE F001 0106 04AD 06F4+  		DC.B	CMVADD,-2,FVR,1,1,6,4,AF3,L8,VROFF,CMVADD,2,FN3,L16,NL
00004C4F E6FE F001 0106 04AD 06F4+  		DC.B	CMVADD,-2,FVR,1,1,6,4,AF3,L8,VROFF,CMVADD,2,BF3,L16,NL
00004C5E                            		
00004C5E =00004C5E                  T810C	EQU		*
00004C5E E080                       		DC.B	LRPAN,LSET
00004C60 F8                         		DC.B	CMCALL
00004C61 0000                       		JDW		SUB810C
00004C63 8006                       		DC.B	NL,L8
00004C65 =00004C65                  T810D	EQU		*
00004C65 E0C0                       		DC.B	LRPAN,LRSET
00004C67 F8                         		DC.B	CMCALL
00004C68 0000                       		JDW		SUB810B
00004C6A                            		
00004C6A F700 03                    		DC.B	CMREPT,0,3
00004C6D FFF7                       		JDW		T810D
00004C6F                            		
00004C6F =00004C6F                  T810D2	EQU		*
00004C6F                            		
00004C6F F8                         		DC.B	CMCALL
00004C70 0000                       		JDW		SUB810D
00004C72                            		
00004C72 F6                         		DC.B	CMJUMP
00004C73 FF5A                       		JDW		T8100
00004C75 =00004C75                  SUB8100	EQU		*
00004C75 8006 A306 A303 A3A1 A3     		DC.B	NL,L8,BF2,L8,BF2,L16,BF2,AF2,BF2
00004C7E A506 A580 A303 A5          		DC.B	CN3,L8,CN3,NL,BF2,L16,CN3
00004C85 A606 A680 A503 A6          		DC.B	DF3,L8,DF3,NL,CN3,L16,DF3
00004C8C A506 A1                    		DC.B	CN3,L8,AF2
00004C8F E3                         		DC.B	CMRET
00004C90 =00004C90                  SUB8100M		EQU		*
00004C90 8006 F00B 01F0 FFA3 06F4+  		DC.B	NL,L8,FVR,0BH,1,0F0H,0FFH,BF2,L8,VROFF,BF2,L16,BF2,AF2,BF2
00004C9F A506 F001 0103 04A5 F480+  		DC.B	CN3,L8,FVR,1,1,3,4,CN3,VROFF,NL,BF2,L16,CN3
00004CAC A606 F001 0103 04A6 F480+  		DC.B	DF3,L8,FVR,1,1,3,4,DF3,VROFF,NL,CN3,L16,DF3
00004CB9 A401 E7A5 05F0 0101 0404+  		DC.B	BN2,1,TIE,CN3,L8-1,FVR,1,1,4,4,AF2,L8+2,VROFF,NL,L8-2,BF2,L8
00004CCA E3                         		DC.B	CMRET
00004CCB =00004CCB                  SUB810B	EQU		*
00004CCB A303 A3A3 AAF0 0101 0604+  		DC.B	BF2,L16,BF2,BF2,FN3,FVR,1,1,6,4,EF3,L8,VROFF,BF2,L8
00004CDA 800C A303 A3A3 AA          		DC.B	NL,L4,BF2,L16,BF2,BF2,FN3
00004CE1 F001 0106 04A8 06F4 A380+  		DC.B	FVR,1,1,6,4,EF3,L8,VROFF,BF2,NL,BF2,L16,BF2
00004CEE A503 80A1 0603 A380 06     		DC.B	CN3,L16,NL,AF2,L8,L16,BF2,NL,L8
00004CF7 E3                         		DC.B	CMRET
00004CF8 =00004CF8                  SUB810C	EQU		*
00004CF8 800C                       		DC.B	NL,L4
00004CFA B603 B6B6 B6               		DC.B	FN4,L16,FN4,FN4,FN4
00004CFF F000 0106 04               		DC.B	FVR,0,1,6,4
00004D04                            		
00004D04 F8                         		DC.B	CMCALL
00004D05 0000                       		JDW		SUB810C0
00004D07                            		
00004D07 8006 B603 03F1 06F4 0303   		DC.B	NL,L8,FN4,L16,L16,VRON,L8,VROFF,L16,L16
00004D11 F1B4 06F4 B180 B203 B4     		DC.B	VRON,EF4,L8,VROFF,CN4,NL,DF4,L16,EF4
00004D1A B203 80F1 AF06 F480 B103+  		DC.B	DF4,L16,NL,VRON,BF3,L8,VROFF,NL,CN4,L16,DF4
00004D25 B106 B1B4 F1B6 08F4        		DC.B	CN4,L8,CN4,EF4,VRON,FN4,L8+2,VROFF
00004D2D                            		
00004D2D 8004 B603 B6B6 B6F1 B606   		DC.B	NL,L8-2,FN4,L16,FN4,FN4,FN4,VRON,FN4,L8
00004D37                            		
00004D37 F8                         		DC.B	CMCALL
00004D38 0000                       		JDW		SUB810C0
00004D3A                            		
00004D3A 8006 B603 0303 0303 03     		DC.B	NL,L8,FN4,L16,L16,L16,L16,L16,L16
00004D43 F1B4 06F4 B180 B203 B4     		DC.B	VRON,EF4,L8,VROFF,CN4,NL,DF4,L16,EF4
00004D4C B203 80AF 0680 B203 B2     		DC.B	DF4,L16,NL,BF3,L8,NL,DF4,L16,DF4
00004D55 F1B4 06F4 B109 8003        		DC.B	VRON,EF4,L8,VROFF,CN4,L8+3,NL,L8-3
00004D5D E3                         		DC.B	CMRET
00004D5E =00004D5E                  SUB810C0		EQU		*
00004D5E B406 F4B1 80B2 03B4        		DC.B	EF4,L8,VROFF,CN4,NL,DF4,L16,EF4
00004D66 F1B2 06F4 AF80 B203 B2     		DC.B	VRON,DF4,L8,VROFF,BF3,NL,DF4,L16,DF4
00004D6F F1B4 06F4 B109 8003 8006   		DC.B	VRON,EF4,L8,VROFF,CN4,L8+3,NL,L8-3,NL,L8
00004D79 E3                         		DC.B	CMRET
00004D7A =00004D7A                  SUB810D	EQU		*
00004D7A A901 E7AA 05E6 04A5 06E6+  		DC.B	EN3,1,CMTAB,FN3,L8-1,CMVADD,4,CN3,L8,CMVADD,-4,EF3,FVR,10H,1,0E0H,0FFH,EF3,L4-2
00004D8D F480 08A9 01E7 AA05 E604+  		DC.B	VROFF,NL,L8+2,EN3,1,CMTAB,FN3,L8-1,CMVADD,4,CN3,L8,CMVADD,-4
00004D9B A8F0 1001 E0FF A80A F480+  		DC.B	EF3,FVR,10H,1,0E0H,0FFH,EF3,L4-2,VROFF,NL,2,FN3,L16,FN3
00004DA9 F001 0108 04A9 01E7 AA08+  		DC.B	FVR,1,1,8,4,EN3,1,CMTAB,FN3,LF8-1,VROFF,L16,EF3,L16,DF3,BF2,L8
00004DBA E3                         		DC.B	CMRET
00004DBB                            ;===============================================;
00004DBB                            ;					 FM 1ch						;
00004DBB                            ;===============================================;
00004DBB =00004DBB                  TAB811	EQU		*
00004DBB EF01                       		DC.B	FEV,1
00004DBD =00004DBD                  T8110	EQU		*
00004DBD =00004DBD                  T811A	EQU		*
00004DBD F8                         		DC.B	CMCALL
00004DBE FEB6                       		JDW		SUB8100
00004DC0 80A3                       		DC.B	NL,BF2
00004DC2 F700 05                    		DC.B	CMREPT,0,5
00004DC5 FFF7                       		JDW		T8110
00004DC7 8006 A306 A303 A3A1 A3     		DC.B	NL,L8,BF2,L8,BF2,L16,BF2,AF2,BF2
00004DD0 A506 A580 A303 A5          		DC.B	CN3,L8,CN3,NL,BF2,L16,CN3
00004DD7 A606 A680 A503 A6          		DC.B	DF3,L8,DF3,NL,CN3,L16,DF3
00004DDE A506 A1                    		DC.B	CN3,L8,AF2
00004DE1 809F                       		DC.B	NL,GF2
00004DE3 =00004DE3                  T811B	EQU		*
00004DE3 F8                         		DC.B	CMCALL
00004DE4 0000                       		JDW		SUB811B
00004DE6 A112 9F06                  		DC.B	AF2,LF4,GF2,L8
00004DEA                            		
00004DEA E706 9F06 9F0C             		DC.B	TIE,L8,GF2,L8,GF2,L4
00004DF0 9F06 060C                  		DC.B	GF2,L8,L8,L4
00004DF4 9E9E                       		DC.B	FN2,FN2
00004DF6 9E06 A0A1 A3               		DC.B	FN2,L8,GN2,AF2,BF2
00004DFB                            		
00004DFB =00004DFB                  T811C	EQU		*
00004DFB F8                         		DC.B	CMCALL
00004DFC 0000                       		JDW		SUB811C
00004DFE 8003 A0A1 06A3             		DC.B	NL,L16,GN2,AF2,L8,BF2
00004E04                            		
00004E04 F8                         		DC.B	CMCALL
00004E05 0000                       		JDW		SUB811C
00004E07 A006 A29F                  		DC.B	GN2,L8,AN2,GF2
00004E0B                            		
00004E0B =00004E0B                  T811D	EQU		*
00004E0B F8                         		DC.B	CMCALL
00004E0C 0000                       		JDW		SUB811B
00004E0E A10C 9F                    		DC.B	AF2,L4,GF2
00004E11                            		
00004E11 =00004E11                  T811D2	EQU		*
00004E11 E6FC                       		DC.B	CMVADD,-4
00004E13 9E0C 80                    		DC.B	FN2,L4,NL
00004E16 9E06 9E80 18               		DC.B	FN2,L8,FN2,NL,L4+L4
00004E1B 9E0C                       		DC.B	FN2,L4
00004E1D 8012 A306                  		DC.B	NL,LF4,BF2,L8
00004E21 E604                       		DC.B	CMVADD,4
00004E23                            		
00004E23 F6                         		DC.B	CMJUMP
00004E24 FF98                       		JDW		T8110
00004E26 =00004E26                  SUB811C	EQU		*
00004E26 F8                         		DC.B	CMCALL
00004E27 0000                       		JDW		SUB811C0
00004E29 A106 A1A1 A3               		DC.B	AF2,L8,AF2,AF2,BF2
00004E2E                            		
00004E2E F8                         		DC.B	CMCALL
00004E2F 0000                       		JDW		SUB811C0
00004E31 9E06                       		DC.B	FN2,L8
00004E33 E3                         		DC.B	CMRET
00004E34 =00004E34                  SUB811C0		EQU		*
00004E34 8006 A3A3 A303 A3          		DC.B	NL,L8,BF2,BF2,BF2,L16,BF2
00004E3B A106 A106 80A1 03A1        		DC.B	AF2,L8,AF2,L8,NL,AF2,L16,AF2
00004E43 9F06 9F06 809F 039F        		DC.B	GF2,L8,GF2,L8,NL,GF2,L16,GF2
00004E4B E3                         		DC.B	CMRET
00004E4C =00004E4C                  SUB811B	EQU		*
00004E4C E706 9F9F 0C               		DC.B	TIE,L8,GF2,GF2,L4
00004E51 9F06 AB0C 9F06             		DC.B	GF2,L8,GF3,L4,GF2,L8
00004E57 06AB 9F0C                  		DC.B	L8,GF3,GF2,L4
00004E5B A112 9F06                  		DC.B	AF2,LF4,GF2,L8
00004E5F                            		
00004E5F F700 02                    		DC.B	CMREPT,0,2
00004E62 FFE9                       		JDW		SUB811B
00004E64 E706 9F9F 0C               		DC.B	TIE,L8,GF2,GF2,L4
00004E69 9F06 AB0C 9F06             		DC.B	GF2,L8,GF3,L4,GF2,L8
00004E6F 06AB 9F0C                  		DC.B	L8,GF3,GF2,L4
00004E73 E3                         		DC.B	CMRET
00004E74                            ;===============================================;
00004E74                            ;					 FM 2ch						;
00004E74                            ;===============================================;
00004E74 =00004E74                  TAB812	EQU		*
00004E74 =00004E74                  T8120	EQU		*
00004E74 E6FC                       		DC.B	CMVADD,-4
00004E76 EF02                       		DC.B	FEV,2
00004E78 E080                       		DC.B	LRPAN,LSET
00004E7A =00004E7A                  T8120_0	EQU		*
00004E7A F8                         		DC.B	CMCALL
00004E7B FDF9                       		JDW		SUB8100
00004E7D 80A3                       		DC.B	NL,BF2
00004E7F F700 02                    		DC.B	CMREPT,0,2
00004E82 FFF7                       		JDW		T8120_0
00004E84 E604                       		DC.B	CMVADD,4
00004E86 =00004E86                  T812A	EQU		*
00004E86 EF03                       		DC.B	FEV,3
00004E88 E080                       		DC.B	LRPAN,LSET
00004E8A =00004E8A                  T812A_0	EQU		*
00004E8A 8018                       		DC.B	NL,L2
00004E8C A506 A580 80               		DC.B	CN3,L8,CN3,NL,NL
00004E91 A6A6 8080                  		DC.B	DF3,DF3,NL,NL
00004E95 A5A5 80A3                  		DC.B	CN3,CN3,NL,BF2
00004E99 F700 03                    		DC.B	CMREPT,0,3
00004E9C FFED                       		JDW		T812A_0
00004E9E 8018                       		DC.B	NL,L2
00004EA0 A506 A580 80               		DC.B	CN3,L8,CN3,NL,NL
00004EA5 A6A6 8080                  		DC.B	DF3,DF3,NL,NL
00004EA9 A5A5 80                    		DC.B	CN3,CN3,NL
00004EAC =00004EAC                  T812B	EQU		*
00004EAC EF04                       		DC.B	FEV,4
00004EAE E080                       		DC.B	LRPAN,LSET
00004EB0 E60A                       		DC.B	CMVADD,10
00004EB2 F020 0104 05               		DC.B	FVR,32,1,4,5
00004EB7 AF                         		DC.B	BF3
00004EB8 =00004EB8                  T812B_0	EQU		*
00004EB8 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
00004EBE F700 03                    		DC.B	CMREPT,0,3
00004EC1 FFF6                       		JDW		T812B_0
00004EC3 E730 AE                    		DC.B	CMTAB,L1,AN3
00004EC6                            		
00004EC6 E6F6                       		DC.B	CMVADD,-10
00004EC8 E602                       		DC.B	CMVADD,2
00004ECA =00004ECA                  T812C	EQU		*
00004ECA E0C0                       		DC.B	LRPAN,LRSET
00004ECC EF00                       		DC.B	FEV,0
00004ECE 800C BE03 BEBE BE          		DC.B	NL,L4,DF5,L16,DF5,DF5,DF5
00004ED5 F001 0106 04BD 06F4 B980+  		DC.B	FVR,1,1,6,4,CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00004EE2 F1BB 06F4 B780 BB03 BB     		DC.B	VRON,BF4,L8,VROFF,GF4,NL,BF4,L16,BF4
00004EEB F1BD 06F4 B909 8003 8006   		DC.B	VRON,CN5,L8,VROFF,AF4,L8+3,NL,L8-3,NL,L8
00004EF5                            		
00004EF5 8006 BE03 03F1 06F4 0303   		DC.B	NL,L8,DF5,L16,L16,VRON,L8,VROFF,L16,L16
00004EFF F1BD 06F4 B980 BB03 BD     		DC.B	VRON,CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00004F08 BB03 80F1 B706 F480 B903+  		DC.B	BF4,L16,NL,VRON,GF4,L8,VROFF,NL,AF4,L16,BF4
00004F13 F1BA 06F4 BABD F1BE 08F4   		DC.B	VRON,AN4,L8,VROFF,AN4,CN5,VRON,DF5,L8+2,VROFF
00004F1D                            		
00004F1D 8004 BE03 BEBE BEF1 BE06   		DC.B	NL,L8-2,DF5,L16,DF5,DF5,DF5,VRON,DF5,L8
00004F27 BD06 F4B9 80BB 03BD        		DC.B	CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00004F2F F1BB 06F4 B780 BB03 BB     		DC.B	VRON,BF4,L8,VROFF,GF4,NL,BF4,L16,BF4
00004F38 F1BD 06F4 B909 8003 8006   		DC.B	VRON,CN5,L8,VROFF,AF4,L8+3,NL,L8-3,NL,L8
00004F42                            		
00004F42 8006 BE03 0303 0303 03     		DC.B	NL,L8,DF5,L16,L16,L16,L16,L16,L16
00004F4B F1BD 06F4 B980 BB03 BD     		DC.B	VRON,CN5,L8,VROFF,AF4,NL,BF4,L16,CN5
00004F54 BB03 80F1 B706 F480 BB03+  		DC.B	BF4,L16,NL,VRON,GF4,L8,VROFF,NL,BF4,L16,BF4
00004F5F F1BD 06F4 BA09 8003        		DC.B	VRON,CN5,L8,VROFF,AN4,L8+3,NL,L8-3
00004F67                            		
00004F67 E6FE                       		DC.B	CMVADD,-2
00004F69 =00004F69                  T812D	EQU		*
00004F69 E080                       		DC.B	LRPAN,LSET
00004F6B EF04                       		DC.B	FEV,4
00004F6D E60A                       		DC.B	CMVADD,10
00004F6F F020 0104 05               		DC.B	FVR,32,1,4,5
00004F74 AF06                       		DC.B	BF3,L8
00004F76 =00004F76                  T812D_0	EQU		*
00004F76 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
00004F7C F700 03                    		DC.B	CMREPT,0,3
00004F7F FFF6                       		JDW		T812D_0
00004F81 E6F6                       		DC.B	CMVADD,-10
00004F83 =00004F83                  T812D2	EQU		*
00004F83 EF00                       		DC.B	FEV,0
00004F85 F8                         		DC.B	CMCALL
00004F86 FDF3                       		JDW		SUB810D
00004F88                            		
00004F88 F6                         		DC.B	CMJUMP
00004F89 FEEA                       		JDW		T8120
00004F8B                            		
00004F8B                            ;===============================================;
00004F8B                            ;					 FM 4ch						;
00004F8B                            ;===============================================;
00004F8B =00004F8B                  TAB814	EQU		*
00004F8B =00004F8B                  T8140	EQU		*
00004F8B EF05                       		DC.B	FEV,5
00004F8D E040                       		DC.B	LRPAN,RSET
00004F8F E6FC                       		DC.B	CMVADD,-4
00004F91 =00004F91                  T8140_0	EQU		*
00004F91 F8                         		DC.B	CMCALL
00004F92 FCE2                       		JDW		SUB8100
00004F94 80A3                       		DC.B	NL,BF2
00004F96 F700 02                    		DC.B	CMREPT,0,2
00004F99 FFF7                       		JDW		T8140_0
00004F9B E604                       		DC.B	CMVADD,4
00004F9D =00004F9D                  T814A	EQU		*
00004F9D EF03                       		DC.B	FEV,3
00004F9F E040                       		DC.B	LRPAN,RSET
00004FA1 8018                       		DC.B	NL,L2
00004FA3 A806 A880 80               		DC.B	EF3,L8,EF3,NL,NL
00004FA8 AAAA 8080                  		DC.B	FN3,FN3,NL,NL
00004FAC A8A8 80A6                  		DC.B	EF3,EF3,NL,DF3
00004FB0 F700 03                    		DC.B	CMREPT,0,3
00004FB3 FFE9                       		JDW		T814A
00004FB5 8018                       		DC.B	NL,L2
00004FB7 A806 A880 80               		DC.B	EF3,L8,EF3,NL,NL
00004FBC AAAA 8080                  		DC.B	FN3,FN3,NL,NL
00004FC0 A8A8 80                    		DC.B	EF3,EF3,NL
00004FC3 =00004FC3                  T814B	EQU		*
00004FC3 EF04                       		DC.B	FEV,4
00004FC5 E0C0                       		DC.B	LRPAN,LRSET
00004FC7 E60A                       		DC.B	CMVADD,10
00004FC9 F022 0104 05               		DC.B	FVR,34,1,4,5
00004FCE A6                         		DC.B	DF3
00004FCF =00004FCF                  T814B_0	EQU		*
00004FCF E748 A80C A60C             		DC.B	CMTAB,L1+L2,EF3,L4,DF3,L4
00004FD5 F700 03                    		DC.B	CMREPT,0,3
00004FD8 FFF6                       		JDW		T814B_0
00004FDA E730 A5                    		DC.B	CMTAB,L1,CN3
00004FDD                            		
00004FDD E6F6                       		DC.B	CMVADD,-10
00004FDF E602                       		DC.B	CMVADD,2
00004FE1 =00004FE1                  T814C	EQU		*
00004FE1 EF00                       		DC.B	FEV,0
00004FE3 E0C0                       		DC.B	LRPAN,LRSET
00004FE5                            		
00004FE5 800C BB03 BBBB BB          		DC.B	NL,L4,BF4,L16,BF4,BF4,BF4
00004FEC F002 0106 04B9 06F4 B480+  		DC.B	FVR,2,1,6,4,AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
00004FF9 F1B7 06F4 B280 B703 B7     		DC.B	VRON,GF4,L8,VROFF,DF4,NL,GF4,L16,GF4
00005002 F1B9 06F4 B409 8003 8006   		DC.B	VRON,AF4,L8,VROFF,EF4,L8+3,NL,L8-3,NL,L8
0000500C                            		
0000500C 8006 BB03 03F1 06F4 0303   		DC.B	NL,L8,BF4,L16,L16,VRON,L8,VROFF,L16,L16
00005016 F1B9 06F4 B480 B703 B9     		DC.B	VRON,AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
0000501F B703 80F1 B206 F480 B403+  		DC.B	GF4,L16,NL,VRON,DF4,L8,VROFF,NL,EF4,L16,GF4
0000502A F1B6 06F4 B6B9 F1BB 08F4   		DC.B	VRON,FN4,L8,VROFF,FN4,AF4,VRON,BF4,L8+2,VROFF
00005034                            		
00005034 8004 BB03 0303 03F1 06F4   		DC.B	NL,L8-2,BF4,L16,L16,L16,L16,VRON,L8,VROFF
0000503E B906 F4B4 80B7 03B9        		DC.B	AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
00005046 F1B7 06F4 B280 B703 B7     		DC.B	VRON,GF4,L8,VROFF,DF4,NL,GF4,L16,GF4
0000504F F1B9 06F4 B409 8003 8006   		DC.B	VRON,AF4,L8,VROFF,EF4,L8+3,NL,L8-3,NL,L8
00005059                            		
00005059 8006 BB03 0303 0303 03     		DC.B	NL,L8,BF4,L16,L16,L16,L16,L16,L16
00005062 F1B9 06F4 B480 B703 B9     		DC.B	VRON,AF4,L8,VROFF,EF4,NL,GF4,L16,AF4
0000506B B703 80F1 B206 F480 B703+  		DC.B	GF4,L16,NL,VRON,DF4,L8,VROFF,NL,GF4,L16,GF4
00005076 F1BA 06F4 B609 8003        		DC.B	VRON,AN4,L8,VROFF,FN4,L8+3,NL,L8-3
0000507E                            		
0000507E E6FE                       		DC.B	CMVADD,-2
00005080 =00005080                  T814D	EQU		*
00005080 EF04                       		DC.B	FEV,4
00005082 E0C0                       		DC.B	LRPAN,LRSET
00005084 E60A                       		DC.B	CMVADD,10
00005086 F022 0104 05               		DC.B	FVR,34,1,4,5
0000508B A606                       		DC.B	DF3,L8
0000508D =0000508D                  T814D_0	EQU		*
0000508D E748 A80C A60C             		DC.B	CMTAB,L1+L2,EF3,L4,DF3,L4
00005093 F700 03                    		DC.B	CMREPT,0,3
00005096 FFF6                       		JDW		T814D_0
00005098                            		
00005098 E6F6                       		DC.B	CMVADD,-10
0000509A =0000509A                  T814D2	EQU		*
0000509A EF00                       		DC.B	FEV,0
0000509C E1FE                       		DC.B	FDT,-2
0000509E E040                       		DC.B	LRPAN,RSET
000050A0 F8                         		DC.B	CMCALL
000050A1 FCD8                       		JDW		SUB810D
000050A3 E100                       		DC.B	FDT,0
000050A5                            		
000050A5                            		
000050A5 F6                         		DC.B	CMJUMP
000050A6 FEE4                       		JDW		T8140
000050A8                            		
000050A8                            ;===============================================;
000050A8                            ;					 FM 5ch						;
000050A8                            ;===============================================;
000050A8 =000050A8                  TAB815	EQU		*
000050A8 =000050A8                  T8150	EQU		*
000050A8 EF01                       		DC.B	FEV,1
000050AA F8                         		DC.B	CMCALL
000050AB FBC9                       		JDW		SUB8100
000050AD 80A3                       		DC.B	NL,BF2
000050AF F700 02                    		DC.B	CMREPT,0,2
000050B2 FFF5                       		JDW		T8150
000050B4 =000050B4                  T815A	EQU		*
000050B4 EF05                       		DC.B	FEV,5
000050B6 F8                         		DC.B	CMCALL
000050B7 FBBD                       		JDW		SUB8100
000050B9 80A3                       		DC.B	NL,BF2
000050BB F700 03                    		DC.B	CMREPT,0,3
000050BE FFF5                       		JDW		T815A
000050C0 8006 A306 A303 A3A1 A3     		DC.B	NL,L8,BF2,L8,BF2,L16,BF2,AF2,BF2
000050C9 A506 A580 A303 A5          		DC.B	CN3,L8,CN3,NL,BF2,L16,CN3
000050D0 A606 A680 A503 A6          		DC.B	DF3,L8,DF3,NL,CN3,L16,DF3
000050D7 A506 A180                  		DC.B	CN3,L8,AF2,NL
000050DB =000050DB                  T815B	EQU		*
000050DB EF04                       		DC.B	FEV,4
000050DD E040                       		DC.B	LRPAN,RSET
000050DF E60A                       		DC.B	CMVADD,10
000050E1 F024 0104 05               		DC.B	FVR,36,1,4,5
000050E6 AB                         		DC.B	GF3
000050E7 =000050E7                  T815B_0	EQU		*
000050E7 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
000050ED F700 03                    		DC.B	CMREPT,0,3
000050F0 FFF6                       		JDW		T815B_0
000050F2 E730 AA                    		DC.B	CMTAB,L1,FN3
000050F5 =000050F5                  T815C	EQU		*
000050F5 =000050F5                  T815C_0	EQU		*
000050F5 EF00                       		DC.B	FEV,0
000050F7 E6F6                       		DC.B	CMVADD,-10
000050F9 F8                         		DC.B	CMCALL
000050FA FBFD                       		JDW		SUB810C
000050FC E60A                       		DC.B	CMVADD,10
000050FE =000050FE                  T815D	EQU		*
000050FE EF04                       		DC.B	FEV,4
00005100 F024 0104 05               		DC.B	FVR,36,1,4,5
00005105 AB06                       		DC.B	GF3,L8
00005107 =00005107                  T815D_0	EQU		*
00005107 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
0000510D F700 03                    		DC.B	CMREPT,0,3
00005110 FFF6                       		JDW		T815D_0
00005112                            		
00005112 E6F6                       		DC.B	CMVADD,-10
00005114 =00005114                  T815D2	EQU		*
00005114 EF06                       		DC.B	FEV,6
00005116 E6F8                       		DC.B	CMVADD,-8
00005118 E0C0                       		DC.B	LRPAN,LRSET
0000511A 8018 8106 1E               		DC.B	NL,L2,081H,L8,LF4+L4
0000511F 1806 06                    		DC.B	L2,L8,L8
00005122 E608                       		DC.B	CMVADD,8
00005124                            		
00005124                            		
00005124 F6                         		DC.B	CMJUMP
00005125 FF82                       		JDW		T8150
00005127                            		
00005127                            		
00005127                            ;===============================================;
00005127                            ;					 PSG 80ch					;
00005127                            ;===============================================;
00005127 =00005127                  TAB818	EQU		*
00005127 =00005127                  T8180	EQU		*
00005127 8060 80                    		DC.B	NL,L1+L1,NL
0000512A =0000512A                  T818A	EQU		*
0000512A F001 0102 04               		DC.B	FVR,1,1,2,4
0000512F 8018                       		DC.B	NL,L2
00005131 B406 B480 80               		DC.B	EF4,L8,EF4,NL,NL
00005136 B6B6 8080                  		DC.B	FN4,FN4,NL,NL
0000513A B4B4 80B2                  		DC.B	EF4,EF4,NL,DF4
0000513E F700 03                    		DC.B	CMREPT,0,3
00005141 FFE8                       		JDW		T818A
00005143 8018                       		DC.B	NL,L2
00005145 B406 B480 80               		DC.B	EF4,L8,EF4,NL,NL
0000514A B6B6 8080                  		DC.B	FN4,FN4,NL,NL
0000514E B4B4 80                    		DC.B	EF4,EF4,NL
00005151 =00005151                  T818B	EQU		*
00005151 AF                         		DC.B	BF3
00005152 =00005152                  T818B0	EQU		*
00005152 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
00005158 F700 03                    		DC.B	CMREPT,0,3
0000515B FFF6                       		JDW		T818B0
0000515D E730 AE                    		DC.B	CMTAB,L1,AN3
00005160 =00005160                  T818C	EQU		*
00005160 F008 0103 04               		DC.B	FVR,8,1,3,4
00005165 ECFE                       		DC.B	PVADD,-2
00005167 B218 B1AF B112             		DC.B	DF4,L2,CN4,BF3,CN4,LF4
0000516D B21E B118 AFAE 12          		DC.B	DF4,L8+L2,CN4,L2,BF3,AN3,LF4
00005174 B21E B118 AFB1 12          		DC.B	DF4,L8+L2,CN4,L2,BF3,CN4,LF4
0000517B B21E B118 AFAE 12          		DC.B	DF4,L8+L2,CN4,L2,BF3,AN3,LF4
00005182 EC02                       		DC.B	PVADD,2
00005184                            		
00005184 =00005184                  T810PD	EQU		*
00005184 AF06                       		DC.B	BF3,L8
00005186 =00005186                  T810PD0	EQU		*
00005186 E748 B10C AF0C             		DC.B	CMTAB,L1+L2,CN4,L4,BF3,L4
0000518C F700 03                    		DC.B	CMREPT,0,3
0000518F FFF6                       		JDW		T810PD0
00005191 8060                       		DC.B	NL,L1+L1
00005193                            		
00005193 F6                         		DC.B	CMJUMP
00005194 FF92                       		JDW		T8180
00005196                            		
00005196                            ;===============================================;
00005196                            ;					 PSG A0ch					;
00005196                            ;===============================================;
00005196 =00005196                  TAB81A	EQU		*
00005196 =00005196                  T81A0	EQU		*
00005196 8060 80                    		DC.B	NL,L1+L1,NL
00005199 =00005199                  T81AA	EQU		*
00005199 F001 0102 04               		DC.B	FVR,1,1,2,4
0000519E 8018                       		DC.B	NL,L2
000051A0 B106 B180 80               		DC.B	CN4,L8,CN4,NL,NL
000051A5 B2B2 8080                  		DC.B	DF4,DF4,NL,NL
000051A9 B1B1 80A6                  		DC.B	CN4,CN4,NL,DF3
000051AD F700 03                    		DC.B	CMREPT,0,3
000051B0 FFE8                       		JDW		T81AA
000051B2 8018                       		DC.B	NL,L2
000051B4 B106 B180 80               		DC.B	CN4,L8,CN4,NL,NL
000051B9 B2B2 8080                  		DC.B	DF4,DF4,NL,NL
000051BD B1B1 80                    		DC.B	CN4,CN4,NL
000051C0 =000051C0                  T81AB	EQU		*
000051C0 AB                         		DC.B	GF3
000051C1 =000051C1                  T81AB0	EQU		*
000051C1 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
000051C7 F700 03                    		DC.B	CMREPT,0,3
000051CA FFF6                       		JDW		T81AB0
000051CC E730 AA                    		DC.B	CMTAB,L1,FN3
000051CF =000051CF                  T81AC	EQU		*
000051CF F008 0103 04               		DC.B	FVR,8,1,3,4
000051D4 AF18 ADAB AD12             		DC.B	BF3,L2,AF3,GF3,AF3,LF4
000051DA AF1E AD18 ABAA 12          		DC.B	BF3,L8+L2,AF3,L2,GF3,FN3,LF4
000051E1 AF1E AD18 ABAD 12          		DC.B	BF3,L8+L2,AF3,L2,GF3,AF3,LF4
000051E8 AF1E AD18 ABAA 12          		DC.B	BF3,L8+L2,AF3,L2,GF3,FN3,LF4
000051EF =000051EF                  T81AD	EQU		*
000051EF F001 0102 04               		DC.B	FVR,1,1,2,4
000051F4 AB06                       		DC.B	GF3,L8
000051F6 =000051F6                  T81AD0	EQU		*
000051F6 E748 AD0C AB0C             		DC.B	CMTAB,L1+L2,AF3,L4,GF3,L4
000051FC F700 03                    		DC.B	CMREPT,0,3
000051FF FFF6                       		JDW		T81AD0
00005201 8060                       		DC.B	NL,L1+L1
00005203                            		
00005203 F6                         		DC.B	CMJUMP
00005204 FF91                       		JDW		T81A0
00005206                            ;===============================================;
00005206                            ;					 PSG C0ch					;
00005206                            ;===============================================;
00005206 =00005206                  TAB81C	EQU		*
00005206 F3E7                       		DC.B	CMNOIS,NOIS7
00005208 =00005208                  T81C00	EQU		*
00005208 E802                       		DC.B	CMGATE,2
0000520A 8006 C6EC FEE8 0A06 EC02+  		DC.B	NL,L8,0C6H,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
00005217 =00005217                  T81C00_0		EQU		*
00005217 C606 06EC FEE8 0A06 EC02+  		DC.B	0C6H,L8,L8,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
00005224 F700 02                    		DC.B	CMREPT,0,2
00005227 FFEF                       		JDW		T81C00_0
00005229 C606 06E8 0A06 ECFE E800+  		DC.B	0C6H,L8,L8,CMGATE,10,L8,PVADD,-2,CMGATE,OFF,L8,PVADD,2
00005236 =00005236                  T81C0	EQU		*
00005236 =00005236                  T81CA	EQU		*
00005236 F8                         		DC.B	CMCALL
00005237 0000                       		JDW		SUB81C0
00005239 F702 04                    		DC.B	CMREPT,2,4
0000523C FFF9                       		JDW		T81C0
0000523E F8                         		DC.B	CMCALL
0000523F 0000                       		JDW		SUB81C1
00005241 =00005241                  T81CB	EQU		*
00005241 =00005241                  T81CC	EQU		*
00005241 F8                         		DC.B	CMCALL
00005242 0000                       		JDW		SUB81C0
00005244 F702 08                    		DC.B	CMREPT,2,8
00005247 FFF9                       		JDW		T81CB
00005249 =00005249                  T81CD	EQU		*
00005249 F8                         		DC.B	CMCALL
0000524A 0000                       		JDW		SUB81C0
0000524C F702 02                    		DC.B	CMREPT,2,2
0000524F FFF9                       		JDW		T81CD
00005251 F8                         		DC.B	CMCALL
00005252 0000                       		JDW		SUB81C1
00005254 =00005254                  T81CD2	EQU		*
00005254 EC02 E802 0606 ECFD E80A+  		DC.B	PVADD,2,CMGATE,2,L8,L8,PVADD,-3,CMGATE,10,L8,PVADD,3,CMGATE,2,L8
00005264 ECFD E80A 0606 06EC 03E8+  		DC.B	PVADD,-3,CMGATE,10,L8,L8,L8,PVADD,3,CMGATE,2,L8
00005270 0606 ECFD E80A 06EC 03E8+  		DC.B	L8,L8,PVADD,-3,CMGATE,10,L8,PVADD,3,CMGATE,2,L8
0000527C 0606 ECFE E80A 0606        		DC.B	L8,L8,PVADD,-2,CMGATE,10,L8,L8
00005284                            		
00005284                            		
00005284 F8                         		DC.B	CMCALL
00005285 0000                       		JDW		SUB81C0
00005287                            		
00005287                            		
00005287 F6                         		DC.B	CMJUMP
00005288 FFAD                       		JDW		T81C0
0000528A                            		
0000528A =0000528A                  SUB81C0	EQU		*
0000528A E802                       		DC.B	CMGATE,2
0000528C =0000528C                  SUB81C0_0		EQU		*
0000528C C606 06EC FEE8 0A06 EC02+  		DC.B	0C6H,L8,L8,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
00005299 F700 03                    		DC.B	CMREPT,0,3
0000529C FFEF                       		JDW		SUB81C0_0
0000529E C606 06E8 0A06 ECFE E800+  		DC.B	0C6H,L8,L8,CMGATE,10,L8,PVADD,-2,CMGATE,OFF,L8,PVADD,2
000052AB E3                         		DC.B	CMRET
000052AC =000052AC                  SUB81C1	EQU		*
000052AC E802                       		DC.B	CMGATE,2
000052AE =000052AE                  SUB81C1_0		EQU		*
000052AE C606 06EC FEE8 0A06 EC02+  		DC.B	0C6H,L8,L8,PVADD,-2,CMGATE,10,L8,PVADD,2,CMGATE,2,L8
000052BB F700 04                    		DC.B	CMREPT,0,4
000052BE FFEF                       		JDW		SUB81C1_0
000052C0 E3                         		DC.B	CMRET
000052C1                            ;===============================================;
000052C1                            ;					 PCM DRUM					;
000052C1                            ;===============================================;
000052C1 =000052C1                  TAB81D	EQU		*
000052C1 =000052C1                  T81D0	EQU		*
000052C1 =000052C1                  T81DA	EQU		*
000052C1 F8                         		DC.B	CMCALL
000052C2 0000                       		JDW		SUB81D0
000052C4 F700 05                    		DC.B	CMREPT,0,5
000052C7 FFF9                       		JDW		T81D0
000052C9                            		
000052C9 F8                         		DC.B	CMCALL
000052CA 0000                       		JDW		SUB81D1
000052CC                            		
000052CC =000052CC                  T81DB	EQU		*
000052CC =000052CC                  T81DC	EQU		*
000052CC F8                         		DC.B	CMCALL
000052CD 0000                       		JDW		SUB81D0
000052CF F700 07                    		DC.B	CMREPT,0,7
000052D2 FFF9                       		JDW		T81DB
000052D4                            		
000052D4 F8                         		DC.B	CMCALL
000052D5 0000                       		JDW		SUB81D1
000052D7                            		
000052D7 =000052D7                  T81DD	EQU		*
000052D7 F8                         		DC.B	CMCALL
000052D8 0000                       		JDW		SUB81D0
000052DA F700 02                    		DC.B	CMREPT,0,2
000052DD FFF9                       		JDW		T81DD
000052DF                            		
000052DF F8                         		DC.B	CMCALL
000052E0 0000                       		JDW		SUB81D1
000052E2                            		
000052E2 =000052E2                  T81DD2	EQU		*
000052E2 8106 8082 8082 8282 80     		DC.B	B,L8,NL,S,NL,S,S,S,NL
000052EB 8080 8280 8080 8280        		DC.B	NL,NL,S,NL,NL,NL,S,NL
000052F3                            		
000052F3 F6                         		DC.B	CMJUMP
000052F4 FFCC                       		JDW		T81D0
000052F6                            		
000052F6 =000052F6                  SUB81D0	EQU		*
000052F6 8006 8182 8181 8182 81     		DC.B	NL,L8,B,S,B,B,B,S,B
000052FF 8181 8281 8181 8280        		DC.B	B,B,S,B,B,B,S,NL
00005307 E3                         		DC.B	CMRET
00005308 =00005308                  SUB81D1	EQU		*
00005308 8181 8281                  		DC.B	B,B,S,B
0000530C F700 04                    		DC.B	CMREPT,0,4
0000530F FFF8                       		JDW		SUB81D1
00005311 E3                         		DC.B	CMRET
00005312                            		
00005312                            ;===============================================;
00005312                            ;												;
00005312                            ;					  VOICE						;
00005312                            ;												;
00005312                            ;===============================================;
00005312 =00005312                  TIMB81	EQU		*
00005312                            ;===================< FEV00 >===================;
00005312 3D                         		CNF		5,7
00005313 0101 0101                  		MD		1,0,1,0,1,0,1,0
00005317 8E52 144C                  		RSAR	2,14,1,18,0,20,1,12
0000531B 0808 0E03                  		D1R		8,8,14,3
0000531F 0000 0000                  		D2R		0,0,0,0
00005323 1F1F 1F1F                  		RRL		15,1,15,1,15,1,15,1
0000532B                            ;===================< FEV01 >===================;
0000532B 02                         		CNF		2,0
0000532C 0000 0000                  		MD		0,0,0,0,0,0,0,0
00005330 5C54 1CD0                  		RSAR	1,28,1,20,0,28,3,16
00005334 0C08 0A05                  		D1R		12,8,10,5
00005338 0000 0000                  		D2R		0,0,0,0
0000533C FFFF FFFF                  		RRL		15,15,15,15,15,15,15,15
00005344                            ;===================< FEV02 >===================;
00005344 39                         		CNF		1,7
00005345 0151 0000                  		MD		1,0,1,5,0,0,0,0
00005349 1F5F 5F5F                  		RSAR	0,31,1,31,1,31,1,31
0000534D 1011 0909                  		D1R		16,17,9,9
00005351 0700 0000                  		D2R		7,0,0,0
00005355 CFFF FFFF                  		RRL		15,12,15,15,15,15,15,15
0000535D                            ;===================< FEV03 >===================;
0000535D 2C                         		CNF		4,5
0000535E 6103 0133                  		MD		1,6,3,0,1,0,3,3
00005362 5F94 5F94                  		RSAR	1,31,2,20,1,31,2,20
00005366 0505 0507                  		D1R		5,5,5,7
0000536A 0202 0202                  		D2R		2,2,2,2
0000536E 1F6F 1FAF                  		RRL		15,1,15,6,15,1,15,10
00005376                            ;===================< FEV04 >===================;
00005376 3D                         		CNF		5,7
00005377 0102 0202                  		MD		1,0,2,0,2,0,2,0
0000537B 1F08 8A0A                  		RSAR	0,31,0,8,2,10,0,10
0000537F 0808 0808                  		D1R		8,8,8,8
00005383 0001 0000                  		D2R		0,1,0,0
00005387 0F1F 1F1F                  		RRL		15,0,15,1,15,1,15,1
0000538F                            ;===================< FEV05 >===================;
0000538F 3B                         		CNF		3,7
00005390 0301 3001                  		MD		3,0,1,0,0,3,1,0
00005394 1CDC DC5E                  		RSAR	0,28,3,28,3,28,1,30
00005398 1413 0F0C                  		D1R		20,19,15,12
0000539C 0C05 0A07                  		D2R		12,5,10,7
000053A0 AFAF 5F6F                  		RRL		15,10,15,10,15,5,15,6
000053A8                            ;===================< FEV06 >===================;
000053A8 3D                         		CNF		5,7
000053A9 0801 0101                  		MD		8,0,1,0,1,0,1,0
000053AD 1F1F 1F1F                  		RSAR	0,31,0,31,0,31,0,31
000053B1 1919 1911                  		D1R		19H,19H,25,17
000053B5 0511 000F                  		D2R		5,11H,0,15
000053B9 0F7F FFFF                  		RRL		15,0,15,7,15,15,15,15
000053C1                            
000053C1                            ; vim: set ft=asm68k sw=4 ts=4 noet:
000053C1                            ; vim: set ft=asm68k sw=4 ts=4 noet:
000053C2 00                         		even
000053C2                            
000053C2                            ; ---------------------------------------------------------------------------
000053C2                            ; Sound	effect pointers
000053C2                            ; ---------------------------------------------------------------------------
000053C2                            SoundIndex:
000053C2 0000 0000                  ptr_sndA0:	dc.l SA0
000053C6 0000 0000                  ptr_sndA1:	dc.l SA1
000053CA 0000 0000                  ptr_sndA2:	dc.l SA2
000053CE 0000 0000                  ptr_sndA3:	dc.l SA3
000053D2 0000 0000                  ptr_sndA4:	dc.l SA4
000053D6 0000 0000                  ptr_sndA5:	dc.l SA5
000053DA 0000 0000                  ptr_sndA6:	dc.l SA6
000053DE 0000 0000                  ptr_sndA7:	dc.l SA7
000053E2 0000 0000                  ptr_sndA8:	dc.l SA8
000053E6 0000 0000                  ptr_sndA9:	dc.l SA9
000053EA 0000 0000                  ptr_sndAA:	dc.l SAA
000053EE 0000 0000                  ptr_sndAB:	dc.l SAB
000053F2 0000 0000                  ptr_sndAC:	dc.l SAC
000053F6 0000 0000                  ptr_sndAD:	dc.l SAD
000053FA 0000 0000                  ptr_sndAE:	dc.l SAE
000053FE 0000 0000                  ptr_sndAF:	dc.l SAF
00005402                            
00005402                            ptr_sndend
00005402                            
00005402                            ; ---------------------------------------------------------------------------
00005402                            ; Special sound effect pointers
00005402                            ; ---------------------------------------------------------------------------
00005402                            SpecSoundIndex:
00005402                            ptr_specend
00005402                            
00005402                            ; ---------------------------------------------------------------------------
00005402                            ; Sound effect data
00005402                            ; ---------------------------------------------------------------------------
00005402                            		include	"sound/se1.s"
00005402                            ;=======================================================;
00005402                            ;			*$$SE1.S  (S.E. Data)						;
00005402                            ;						ORG. MDSE111.S					;
00005402                            ;				'Sound-Source'							;
00005402                            ;				 for Mega Drive (68K)					;
00005402                            ;						Ver  1.1 / 1990.9.1				;
00005402                            ;									  By  H.Kubota		;
00005402                            ;=======================================================;
00005402                            
00005402                            
00005402                            ;		list off
00005402                            ;		include mdEQ11.LIB
00005402                            ;		include mdMCR11.LIB
00005402                            ;		include mdTB11.LIB
00005402                            ;		list on
00005402                            
00005402                            ;		PUBLIC	SA0,SA1,SA2,SA3,SA4,SA5,SA6,SA7
00005402                            ;		PUBLIC	SA8,SA9,SAA,SAB,SAC,SAD,SAE,SAF
00005402                            
00005402                            		even
00005402                            
00005402                            ;=======================================;
00005402                            ;				   SA0					;
00005402                            ;=======================================;
00005402                            SA0:
00005402                            
00005402 0000                       		TDW		TIMBA0,SA0				; Voice Top Address
00005404 0102                       		DC.B	1,2						; Base,Use Channel Total
00005406                            
00005406 8080                       		DC.B	80H,080H				; Flag,Channel
00005408 0000                       		TDW		TABA00,SA0				; FM 1ch Table Pointer
0000540A 0003                       		DC.B	00H,003H				; Bias,Volm
0000540C                            
0000540C 80A0                       		DC.B	80H,0A0H				; Flag,Channel
0000540E 0000                       		TDW		TABA01,SA0				; FM 1ch Table Pointer
00005410 0003                       		DC.B	00H,003H				; Bias,Volm
00005412                            
00005412                            ;------------< Table Data >-------------;
00005412 =00005412                  TABA00	EQU		*
00005412 8002                       		DC.B	NL,2
00005414 E10A                       		DC.B	FDT,10
00005416 F503                       		DC.B	EV,3
00005418 =00005418                  TA00	EQU		*
00005418 C103 C3C5                  		DC.B	0C1H,3,0C3H,0C5H
0000541C EC02                       		DC.B	PVADD,2
0000541E E9FF                       		DC.B	CMBIAS,-1
00005420 F700 04                    		DC.B	CMREPT,0,4
00005423 FFF4                       		JDW		TA00
00005425 =00005425                  TA01	EQU		*
00005425 C103 C3C5                  		DC.B	0C1H,3,0C3H,0C5H
00005429 EC02                       		DC.B	PVADD,2
0000542B E901                       		DC.B	CMBIAS,1
0000542D F700 02                    		DC.B	CMREPT,0,2
00005430 FFF4                       		JDW		TA01
00005432 EE                         		DC.B	CMEND
00005433                            
00005433 =00005433                  TABA01	EQU		*
00005433 F503                       		DC.B	EV,3
00005435 =00005435                  TA001	EQU		*
00005435 C102 C3C5                  		DC.B	0C1H,2,0C3H,0C5H
00005439 EC02                       		DC.B	PVADD,2
0000543B E9FF                       		DC.B	CMBIAS,-1
0000543D F700 06                    		DC.B	CMREPT,0,6
00005440 FFF4                       		JDW		TA001
00005442 =00005442                  TA011	EQU		*
00005442 C102 C3C5                  		DC.B	0C1H,2,0C3H,0C5H
00005446 EC02                       		DC.B	PVADD,2
00005448 E901                       		DC.B	CMBIAS,1
0000544A F700 04                    		DC.B	CMREPT,0,4
0000544D FFF4                       		JDW		TA011
0000544F EE                         		DC.B	CMEND
00005450                            
00005450                            ;------------< Voice Data >-------------;
00005450 =00005450                  TIMBA0	EQU		*
00005450                            
00005450                            		even
00005450                            
00005450                            ;=======================================;
00005450                            ;				   SA1					;
00005450                            ;=======================================;
00005450                            SA1:
00005450 0000                       		TDW		TIMBA1,SA1				; Voice Top Address
00005452 0102                       		DC.B	1,2						; Base,Use Channel Total
00005454                            
00005454 8080                       		DC.B	80H,080H				; Flag,Channel
00005456 0000                       		TDW		TABA10,SA1				; FM 1ch Table Pointer
00005458 E802                       		DC.B	0E8H,002H				; Bias,Volm
0000545A                            
0000545A 80A0                       		DC.B	80H,0A0H				; Flag,Channel
0000545C 0000                       		TDW		TABA11,SA1				; FM 1ch Table Pointer
0000545E E802                       		DC.B	0E8H,002H				; Bias,Volm
00005460                            
00005460                            ;------------< Table Data >-------------;
00005460 =00005460                  TABA11	EQU		*
00005460 E101                       		DC.B	FDT,1
00005462 =00005462                  TABA10	EQU		*
00005462 =00005462                  TA100	EQU		*
00005462 DD02 DBD9                  		DC.B	0DDH,2,0DBH,0D9H
00005466 F700 03                    		DC.B	CMREPT,0,3
00005469 FFF8                       		JDW		TA100
0000546B =0000546B                  TA101	EQU		*
0000546B DBD9 D7                    		DC.B	0DBH,0D9H,0D7H
0000546E F700 03                    		DC.B	CMREPT,0,3
00005471 FFF9                       		JDW		TA101
00005473 =00005473                  TA102	EQU		*
00005473 D9D7 D5                    		DC.B	0D9H,0D7H,0D5H
00005476 F700 03                    		DC.B	CMREPT,0,3
00005479 FFF9                       		JDW		TA102
0000547B =0000547B                  TA103	EQU		*
0000547B DBD9 D7                    		DC.B	0DBH,0D9H,0D7H
0000547E F700 03                    		DC.B	CMREPT,0,3
00005481 FFF9                       		JDW		TA103
00005483                            
00005483 F6                         		DC.B	CMJUMP
00005484 FFDD                       		JDW		TA100
00005486                            
00005486 EE                         		DC.B	CMEND
00005487                            
00005487                            ;------------< Voice Data >-------------;
00005487 =00005487                  TIMBA1	EQU		*
00005487                            
00005488 00                         		even
00005488                            
00005488                            ;=======================================;
00005488                            ;				   SA2					;
00005488                            ;=======================================;
00005488                            SA2:
00005488 0000                       		TDW		TIMBA2,SA2				; Voice Top Address
0000548A 0101                       		DC.B	1,1						; Base,Use Channel Total
0000548C                            
0000548C 8005                       		DC.B	80H,5					; Flag,Channel
0000548E 0000                       		TDW		TABA20,SA2				; FM 1ch Table Pointer
00005490 0006                       		DC.B	00H,006H				; Bias,Volm
00005492                            
00005492                            ;------------< Table Data >-------------;
00005492 =00005492                  TABA20	EQU		*
00005492 EF00                       		DC.B	FEV,0
00005494 =00005494                  TA20	EQU		*
00005494 C401 80                    		DC.B	0C4H,1,NL
00005497 F700 10                    		DC.B	CMREPT,0,10H
0000549A FFF9                       		JDW		TA20
0000549C F6                         		DC.B	CMJUMP
0000549D FFF6                       		JDW		TA20
0000549F                            
0000549F                            ;------------< Voice Data >-------------;
0000549F =0000549F                  TIMBA2	EQU		*
0000549F 39                         		CNF		1,7
000054A0 0201 0201                  		MD		2,0,1,0,2,0,1,0
000054A4 1F1F 1F1F                  		RSAR	0,31,0,31,0,31,0,31
000054A8 0000 0000                  		D1R		0,0,0,0
000054AC 0000 0000                  		D2R		0,0,0,0
000054B0 0F0F 0F0F                  		RRL		15,0,15,0,15,0,15,0
000054B8                            
000054B8                            		even
000054B8                            
000054B8                            ;=======================================;
000054B8                            ;				   SA3					;
000054B8                            ;=======================================;
000054B8                            SA3:
000054B8 0000                       		TDW		TIMBA3,SA3				; Voice Top Address
000054BA 0101                       		DC.B	1,1						; Base,Use Channel Total
000054BC                            
000054BC 8005                       		DC.B	80H,005H				; Flag,Channel
000054BE 0000                       		TDW		TABA30,SA3				; FM 1ch Table Pointer
000054C0 2402                       		DC.B	24H,002H				; Bias,Volm
000054C2                            
000054C2                            ;------------< Table Data >-------------;
000054C2 =000054C2                  TABA30	EQU		*
000054C2 EF00                       		DC.B	FEV,0
000054C4 F068 30                    		DC.B	LFO,68H,30H
000054C7 =000054C7                  TABA31	EQU		*
000054C7 F001 02F8 FF               		DC.B	FVR,1,2,0F8H,0FFH
000054CC AD2A                       		DC.B	0ADH,2AH
000054CE EE                         		DC.B	CMEND
000054CF                            
000054CF                            ;------------< Voice Data >-------------;
000054CF =000054CF                  TIMBA3	EQU		*
000054CF 3C                         		CNF		4,7
000054D0 0201 0201                  		MD		2,0,1,0,2,0,1,0
000054D4 1F0B 1F0B                  		RSAR	0,31,0,0BH,0,31,0,0BH
000054D8 0008 0008                  		D1R		0,8,0,8
000054DC 010E 010E                  		D2R		1,0EH,1,0EH
000054E0 0F1F 0F1F                  		RRL		15,0,15,1,15,0,15,1
000054E8                            
000054E8                            		even
000054E8                            
000054E8                            ;=======================================;
000054E8                            ;				   SA4					;
000054E8                            ;=======================================;
000054E8                            SA4:
000054E8 0000                       		TDW		TIMBA4,SA4				; Voice Top Address
000054EA 0101                       		DC.B	1,1						; Base,Use Channel Total
000054EC                            
000054EC 8005                       		DC.B	80H,5					; Flag,Channel
000054EE 0000                       		TDW		TABA40,SA4				; FM 1ch Table Pointer
000054F0 F400                       		DC.B	0F4H,000H				; Bias,Volm
000054F2                            
000054F2                            ;------------< Table Data >-------------;
000054F2 =000054F2                  TABA40	EQU		*
000054F2 EF00                       		DC.B	FEV,0
000054F4 =000054F4                  TA40	EQU		*
000054F4 A060                       		DC.B	0A0H,60h
000054F6 EE                         		DC.B	CMEND
000054F7                            
000054F7                            ;------------< Voice Data >-------------;
000054F7 =000054F7                  TIMBA4	EQU		*
000054F7 3B                         		CNF		3,7
000054F8 5231 5151                  		MD		2,5,1,3,1,5,1,5
000054FC 0C0C 1212                  		RSAR	0,0CH,0,0CH,0,12H,0,12H
00005500 0E00 0E0C                  		D1R		0EH,0,0EH,0CH
00005504 0000 000E                  		D2R		0,0,0,0EH
00005508 4F0F 5F3F                  		RRL		15,4,15,0,15,5,15,3
00005510                            
00005510                            		even
00005510                            
00005510                            ;=======================================;
00005510                            ;				   SA5					;
00005510                            ;=======================================;
00005510                            SA5:
00005510 0000                       		TDW		TIMBA5,SA5				; Voice Top Address
00005512 0102                       		DC.B	1,2						; Base,Use Channel Total
00005514                            
00005514 80A0                       		DC.B	80H,0A0H				; Flag,Channel
00005516 0000                       		TDW		TABA50,SA5				; FM 1ch Table Pointer
00005518 F400                       		DC.B	0F4H,000H				; Bias,Volm
0000551A                            
0000551A 80C0                       		DC.B	80H,0C0H				; Flag,Channel
0000551C 0000                       		TDW		TABA51,SA5				; FM 1ch Table Pointer
0000551E F400                       		DC.B	0F4H,000H				; Bias,Volm
00005520                            
00005520                            ;------------< Table Data >-------------;
00005520 =00005520                  TABA50	EQU		*
00005520 F501                       		DC.B	EV,1
00005522 F001 0150 17               		DC.B	FVR,1,1,50H,17H
00005527 9B0A                       		DC.B	09BH,0Ah
00005529 =00005529                  TA50	EQU		*
00005529 A304 EC02                  		DC.B	0A3H,4,PVADD,2
0000552D F700 06                    		DC.B	CMREPT,0,6
00005530 FFF8                       		JDW		TA50
00005532 EE                         		DC.B	CMEND
00005533 =00005533                  TABA51	EQU		*
00005533 F501                       		DC.B	EV,1
00005535 F002 0120 10F3 E7          		DC.B	FVR,2,1,20H,10H,CMNOIS,NOIS7
0000553C C40A                       		DC.B	0C4H,0AH
0000553E =0000553E                  TA51	EQU		*
0000553E C202 EC01                  		DC.B	0C2H,02H,PVADD,1
00005542 F700 0C                    		DC.B	CMREPT,0,12
00005545 FFF8                       		JDW		TA51
00005547 EE                         		DC.B	CMEND
00005548                            
00005548                            ;------------< Voice Data >-------------;
00005548 =00005548                  TIMBA5	EQU		*
00005548 38                         		CNF		0,7
00005549 0F0F 0F0F                  		MD		15,0,15,0,15,0,15,0
0000554D 1F1F 1F0E                  		RSAR	0,31,0,31,0,31,0,14
00005551 0000 000A                  		D1R		0,0,0,10
00005555 0000 0019                  		D2R		0,0,0,25
00005559 0F0F 0F1F                  		RRL		15,0,15,0,15,0,15,1
00005561                            
00005562 00                         		even
00005562                            
00005562                            ;=======================================;
00005562                            ;				   SA6					;
00005562                            ;=======================================;
00005562                            SA6:
00005562 0000                       		TDW		TIMBA6,SA6				; Voice Top Address
00005564 0101                       		DC.B	1,1						; Base,Use Channel Total
00005566                            
00005566 8005                       		DC.B	80H,5					; Flag,Channel
00005568 0000                       		TDW		TABA60,SA6				; FM 1ch Table Pointer
0000556A 0004                       		DC.B	00H,004H				; Bias,Volm
0000556C                            
0000556C                            ;------------< Table Data >-------------;
0000556C =0000556C                  TABA60	EQU		*
0000556C EF00                       		DC.B	FEV,0
0000556E =0000556E                  TBA6	EQU		*
0000556E A00E                       		DC.B	0A0h,14
00005570 EE                         		DC.B	CMEND
00005571                            
00005571                            ;------------< Voice Data >-------------;
00005571 =00005571                  TIMBA6	EQU		*
00005571 28                         		CNF		0,5
00005572 0370 3100                  		MD		3,0,0,7,1,3,0,0
00005576 1F1F 5F5F                  		RSAR	0,31,0,31,1,31,1,31
0000557A 0303 0302                  		D1R		3,3,3,2
0000557E 0102 0203                  		D2R		1,2,2,3
00005582 AF2F 2F5F                  		RRL		15,10,15,2,15,2,15,5
0000558A                            
0000558A                            		even
0000558A                            
0000558A                            ;=======================================;
0000558A                            ;				   SA7					;
0000558A                            ;=======================================;
0000558A                            SA7:
0000558A 0000                       		TDW		TIMBA7,SA7				; Voice Top Address
0000558C 0101                       		DC.B	1,1						; Base,Use Channel Total
0000558E                            
0000558E 80C0                       		DC.B	80H,0C0H				; Flag,Channel
00005590 0000                       		TDW		TABA70,SA7				; FM 1ch Table Pointer
00005592 0000                       		DC.B	00H,000H				; Bias,Volm
00005594                            
00005594                            ;------------< Table Data >-------------;
00005594 =00005594                  TABA70	EQU		*
00005594 F3E7                       		DC.B	CMNOIS,NOIS7
00005596 F001 0107 02               		DC.B	FVR,1,1,7,2
0000559B FF00 01                    		DC.B	EXCOM,S_PSE,ON
0000559E =0000559E                  TA70	EQU		*
0000559E A004 E901 F700 20          		DC.B	0A0H,4,CMBIAS,1,CMREPT,0,20H
000055A5 FFF8                       		JDW		TA70
000055A7 14                         		DC.B	20
000055A8 FF00 00                    		DC.B	EXCOM,S_PSE,OFF
000055AB EE                         		DC.B	CMEND
000055AC                            
000055AC                            ;------------< Voice Data >-------------;
000055AC =000055AC                  TIMBA7	EQU		*
000055AC                            
000055AC                            		even
000055AC                            
000055AC                            ;=======================================;
000055AC                            ;				   SA8					;
000055AC                            ;=======================================;
000055AC                            SA8:
000055AC 0000                       		TDW		TIMBA8,SA8				; Voice Top Address
000055AE 0102                       		DC.B	1,2						; Base,Use Channel Total
000055B0                            
000055B0 8004                       		DC.B	80H,4					; Flag,Channel
000055B2 0000                       		TDW		TABA81,SA8				; FM 1ch Table Pointer
000055B4 F208                       		DC.B	0F2H,008H				; Bias,Volm
000055B6                            
000055B6 8005                       		DC.B	80H,5					; Flag,Channel
000055B8 0000                       		TDW		TABA80,SA8				; FM 1ch Table Pointer
000055BA F208                       		DC.B	0F2H,008H				; Bias,Volm
000055BC                            
000055BC                            ;------------< Table Data >-------------;
000055BC =000055BC                  TABA80	EQU		*
000055BC EF00                       		DC.B	FEV,0
000055BE F6                         		DC.B	CMJUMP
000055BF 0000                       		JDW		TA80
000055C1 =000055C1                  TABA81	EQU		*
000055C1 EF00                       		DC.B	FEV,0
000055C3 =000055C3                  TA80	EQU		*
000055C3 B002 E7AE 01E7 E9FF        		DC.B	0B0H,2,CMTAB,0AEh,1,CMTAB,CMBIAS,-1
000055CB F700 20                    		DC.B	CMREPT,0,20H
000055CE FFF4                       		JDW		TA80
000055D0 E920                       		DC.B	CMBIAS,20H
000055D2 =000055D2                  TA81	EQU		*
000055D2 9002 8001                  		DC.B	090H,2,NL,1
000055D6 F700 05                    		DC.B	CMREPT,0,5
000055D9 FFF8                       		JDW		TA81
000055DB EE                         		DC.B	CMEND
000055DC                            
000055DC                            ;------------< Voice Data >-------------;
000055DC =000055DC                  TIMBA8	EQU		*
000055DC                            ;-----------< Voice Data 0 >------------;
000055DC 3B                         		CNF		3,7
000055DD 3C39 3031                  		MD		12,3,9,3,0,3,1,3
000055E1 DF1F 1FDF                  		RSAR	3,31,0,31,0,31,3,31
000055E5 0405 0401                  		D1R		4,5,4,1
000055E9 0404 0402                  		D2R		4,4,4,2
000055ED FF0F 1FAF                  		RRL		15,15,15,0,15,1,15,10
000055F5                            ;-----------< Voice Data 1 >------------;
000055F5 3D                         		CNF		5,7
000055F6 0102 0001                  		MD		1,0,2,0,0,0,1,0
000055FA 1F0E 0E0E                  		RSAR	0,31,0,14,0,14,0,14
000055FE 071F 1F1F                  		D1R		7,31,31,31
00005602 0000 0000                  		D2R		0,0,0,0
00005606 1F0F 0F0F                  		RRL		15,1,15,0,15,0,15,0
0000560E                            
0000560E                            		even
0000560E                            
0000560E                            ;=======================================;
0000560E                            ;				   SA9					;
0000560E                            ;=======================================;
0000560E                            SA9:
0000560E 0000                       		TDW		TIMBA9,SA9				; Voice Top Address
00005610 0101                       		DC.B	1,1						; Base,Use Channel Total
00005612                            
00005612 8005                       		DC.B	80H,5					; Flag,Channel
00005614 0000                       		TDW		TABA90,SA9				; FM 1ch Table Pointer
00005616 0006                       		DC.B	00H,006H				; Bias,Volm
00005618                            
00005618                            ;------------< Table Data >-------------;
00005618 =00005618                  TABA90	EQU		*
00005618 EF00                       		DC.B	FEV,0
0000561A 8001                       		DC.B	NL,1
0000561C F000 01D0 FF               		DC.B	FVR,0,1,0D0H,0FFH
00005621 C50F                       		DC.B	0C5H,0FH
00005623 EE                         		DC.B	CMEND
00005624                            
00005624                            ;------------< Voice Data >-------------;
00005624 =00005624                  TIMBA9	EQU		*
00005624 38                         		CNF		0,7
00005625 0F0F 0F0F                  		MD		15,0,15,0,15,0,15,0
00005629 1F1F 1F0E                  		RSAR	0,31,0,31,0,31,0,14
0000562D 0000 0011                  		D1R		0,0,0,11H
00005631 0000 0013                  		D2R		0,0,0,13H
00005635 0F0F 0F1F                  		RRL		15,0,15,0,15,0,15,1
0000563D                            
0000563E 00                         		even
0000563E                            
0000563E                            ;=======================================;
0000563E                            ;				   SAA					;
0000563E                            ;=======================================;
0000563E                            SAA:
0000563E 0000                       		TDW		TIMBAA,SAA				; Voice Top Address
00005640 0101                       		DC.B	1,1						; Base,Use Channel Total
00005642                            
00005642 80C0                       		DC.B	80H,0C0H				; Flag,Channel
00005644 0000                       		TDW		TABAA0,SAA				; FM 1ch Table Pointer
00005646 0001                       		DC.B	00H,001H				; Bias,Volm
00005648                            
00005648                            ;------------< Table Data >-------------;
00005648 =00005648                  TABAA0	EQU		*
00005648 F001 01F0 08F3 E7          		DC.B	FVR,1,1,0F0H,8,CMNOIS,NOIS7
0000564F B004 CA04                  		DC.B	0B0H,4,0CAH,4
00005653 =00005653                  TAA0	EQU		*
00005653 C001 EC01 F700 08          		DC.B	0C0H,1,PVADD,1,CMREPT,0,8
0000565A FFF8                       		JDW		TAA0
0000565C EE                         		DC.B	CMEND
0000565D                            
0000565D                            ;------------< Voice Data >-------------;
0000565D =0000565D                  TIMBAA	EQU		*
0000565D                            
0000565E 00                         		even
0000565E                            
0000565E                            ;=======================================;
0000565E                            ;				   SAB					;
0000565E                            ;=======================================;
0000565E                            SAB:
0000565E 0000                       		TDW		TIMBAB,SAB				; Voice Top Address
00005660 0101                       		DC.B	1,1						; Base,Use Channel Total
00005662                            
00005662 80C0                       		DC.B	80H,0C0H				; Flag,Channel
00005664 0000                       		TDW		TABAB0,SAB				; FM 1ch Table Pointer
00005666 0000                       		DC.B	00H,000H				; Bias,Volm
00005668                            
00005668                            ;------------< Table Data >-------------;
00005668 =00005668                  TABAB0	EQU		*
00005668 F501                       		DC.B	EV,1
0000566A F003 0120 08F3 E7          		DC.B	FVR,3,1,20H,8,CMNOIS,NOIS7
00005671 A203 A604                  		DC.B	0A2H,3,0A6H,4
00005675 =00005675                  TAB0	EQU		*
00005675 B209 E902 EC03 F700 02     		DC.B	0B2h,9,CMBIAS,2,PVADD,3,CMREPT,0,2
0000567E FFF6                       		JDW		TAB0
00005680 EE                         		DC.B	CMEND
00005681                            
00005681                            ;------------< Voice Data >-------------;
00005681 =00005681                  TIMBAB	EQU		*
00005681                            
00005682 00                         		even
00005682                            
00005682                            ;=======================================;
00005682                            ;				   SAC					;
00005682                            ;=======================================;
00005682                            SAC:
00005682 0000                       		TDW		TIMBAC,SAC				; Voice Top Address
00005684 0101                       		DC.B	1,1						; Base,Use Channel Total
00005686                            
00005686 8005                       		DC.B	80H,05H					; Flag,Channel
00005688 0000                       		TDW		TABAC0,SAC				; FM 1ch Table Pointer
0000568A 0002                       		DC.B	000H,002H				; Bias,Volm
0000568C                            
0000568C                            ;------------< Table Data >-------------;
0000568C =0000568C                  TABAC0	EQU		*
0000568C EF00                       		DC.B	FEV,0
0000568E 8D2C                       		DC.B	08dH,02cH
00005690 EE                         		DC.B	CMEND
00005691                            
00005691                            ;------------< Voice Data >-------------;
00005691 =00005691                  TIMBAC	EQU		*
00005691 3C                         		CNF		4,7
00005692 0200 0101                  		MD		2,0,0,0,1,0,1,0
00005696 1F1F 1F1F                  		RSAR	0,31,0,31,0,31,0,31
0000569A 000E 1910                  		D1R		0,14,25,16
0000569E 000C 000F                  		D2R		0,12,0,15
000056A2 0FEF FFFF                  		RRL		15,0,15,14,15,15,15,15
000056AA                            
000056AA                            		even
000056AA                            
000056AA                            ;=======================================;
000056AA                            ;				   SAD					;
000056AA                            ;=======================================;
000056AA                            SAD:
000056AA 0000                       		TDW		TIMBAD,SAD				; Voice Top Address
000056AC 0101                       		DC.B	1,1						; Base,Use Channel Total
000056AE                            
000056AE 80C0                       		DC.B	80H,0C0H				; Flag,Channel
000056B0 0000                       		TDW		TABAD0,SAD				; FM 1ch Table Pointer
000056B2 0000                       		DC.B	00H,000H				; Bias,Volm
000056B4                            
000056B4                            ;------------< Table Data >-------------;
000056B4 =000056B4                  TABAD0	EQU		*
000056B4 F502                       		DC.B	EV,2
000056B6 F001 01F0 08F3 E7          		DC.B	FVR,1,1,0F0H,8,CMNOIS,NOIS7
000056BD =000056BD                  TAD0	EQU		*
000056BD B004 8002                  		DC.B	0B0H,4,NL,2
000056C1 F700 03                    		DC.B	CMREPT,0,3
000056C4 FFF8                       		JDW		TAD0
000056C6 EE                         		DC.B	CMEND
000056C7                            
000056C7                            ;------------< Voice Data >-------------;
000056C7 =000056C7                  TIMBAD	EQU		*
000056C7                            
000056C8 00                         		even
000056C8                            
000056C8                            ;=======================================;
000056C8                            ;				   SAE					;
000056C8                            ;=======================================;
000056C8                            SAE:
000056C8 0000                       		TDW		TIMBAE,SAE				; Voice Top Address
000056CA 0101                       		DC.B	1,1						; Base,Use Channel Total
000056CC                            
000056CC 80C0                       		DC.B	80H,0C0H				; Flag,Channel
000056CE 0000                       		TDW		TABAE0,SAE				; FM 1ch Table Pointer
000056D0 0004                       		DC.B	00H,004H				; Bias,Volm
000056D2                            
000056D2                            ;------------< Table Data >-------------;
000056D2 =000056D2                  TABAE0	EQU		*
000056D2 =000056D2                  TBAE	EQU		*
000056D2 B818 B6                    		DC.B	GN4,L2,FN4
000056D5 F6                         		DC.B	CMJUMP
000056D6 FFFB                       		JDW		TBAE
000056D8                            
000056D8                            ;------------< Voice Data >-------------;
000056D8 =000056D8                  TIMBAE	EQU		*
000056D8 28                         		CNF		0,5
000056D9 0370 3100                  		MD		3,0,0,7,1,3,0,0
000056DD 1F1F 5F5F                  		RSAR	0,31,0,31,1,31,1,31
000056E1 0303 0302                  		D1R		3,3,3,2
000056E5 0102 0203                  		D2R		1,2,2,3
000056E9 AF2F 2F5F                  		RRL		15,10,15,2,15,2,15,5
000056F1                            
000056F2 00                         		even
000056F2                            
000056F2                            ;=======================================;
000056F2                            ;				   SAF					;
000056F2                            ;=======================================;
000056F2                            SAF:
000056F2 0000                       		TDW		TIMBAF,SAF				; Voice Top Address
000056F4 0101                       		DC.B	1,1						; Base,Use Channel Total
000056F6                            
000056F6 80C0                       		DC.B	080H,0C0H				; Flag,Channel
000056F8 0000                       		TDW		TABAF0,SAF				; FM 1ch Table Pointer
000056FA 0000                       		DC.B	00H,000H				; Bias,Volm
000056FC                            
000056FC                            ;------------< Table Data >-------------;
000056FC =000056FC                  TABAF0	EQU		*
000056FC F3E3                       		DC.B	CMNOIS,NOIS3
000056FE =000056FE                  TAF0	EQU		*
000056FE B818 B6                    		DC.B	GN4,L2,FN4
00005701 F6                         		DC.B	CMJUMP
00005702 FFFB                       		JDW		TAF0
00005704                            
00005704                            ;------------< Voice Data >-------------;
00005704 =00005704                  TIMBAF	EQU		*
00005704 3D                         		CNF		5,7
00005705 0011 1111                  		MD		0,0,1,1,1,1,1,1
00005709 DF0D 0D0D                  		RSAR	3,31,0,0DH,0,0DH,0,0DH
0000570D 0110 1010                  		D1R		1,10H,10H,10H
00005711 0112 1212                  		D2R		1,12H,12H,12H
00005715 0F1F 1F1F                  		RRL		15,0,15,1,15,1,15,1
0000571D                            
0000571D                            ; vim: set ft=asm68k sw=4 ts=4 noet:
0000571D                            ; vim: set ft=asm68k sw=4 ts=4 noet:
0000571E 00                         		even
0000571E                            
0000571E                            
0000571E                            		
0000571E                            	ALIGN	$2000
00006000                            		include	"ErrorHandler.asm"
00006000                            
00006000                            ; ===============================================================
00006000                            ; ---------------------------------------------------------------
00006000                            ; Error handling and debugging modules
00006000                            ;
00006000                            ; (c) 2016-2023, Vladikcomper
00006000                            ; ---------------------------------------------------------------
00006000                            ; Error handler functions and calls
00006000                            ; ---------------------------------------------------------------
00006000                            
00006000                            ; ---------------------------------------------------------------
00006000                            ; Error handler control flags
00006000                            ; ---------------------------------------------------------------
00006000                            
00006000                            ; Screen appearence flags
00006000 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
00006000 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
00006000                            
00006000                            ; Advanced execution flags
00006000                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
00006000 =00000020                  _eh_return			equ	$20
00006000 =00000040                  _eh_enter_console	equ	$40
00006000 =00000080                  _eh_align_offset	equ	$80
00006000                            
00006000                            ; ---------------------------------------------------------------
00006000                            ; Errors vector table
00006000                            ; ---------------------------------------------------------------
00006000                            
00006000                            ; Default screen configuration
00006000 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
00006000                            
00006000                            ; ---------------------------------------------------------------
00006000                            
00006000                            BusError:
00006018                            
00006018                            AddressError:
00006034                            
00006034                            IllegalInstr:
00006056                            
00006056                            ZeroDivide:
00006070                            
00006070                            ChkInstr:
0000608E                            
0000608E                            TrapvInstr:
000060AE                            
000060AE                            PrivilegeViol:
000060D0                            
000060D0                            Trace:
000060E4                            
000060E4                            Line1010Emu:
00006104                            
00006104                            Line1111Emu:
00006124                            
00006124                            ErrorExcept:
00006142                            
00006142                            
00006142                            ; ---------------------------------------------------------------
00006142                            ; Import error handler global functions
00006142                            ; ---------------------------------------------------------------
00006142                            
00006142                            ; Debugger extension functions
00006142                            __global__ErrorHandler_ConsoleOnly: equ DebuggerExtensions+$0
00006142                            __global__ErrorHandler_ClearConsole: equ DebuggerExtensions+$26
00006142                            __global__KDebug_WriteLine_Formatted: equ DebuggerExtensions+$50
00006142                            __global__KDebug_Write_Formatted: equ DebuggerExtensions+$54
00006142                            __global__KDebug_FlushLine: equ DebuggerExtensions+$AA
00006142                            __global__ErrorHandler_PauseConsole: equ DebuggerExtensions+$C2
00006142                            __global__ErrorHandler_PagesController: equ DebuggerExtensions+$F8
00006142                            __global__VSync: equ DebuggerExtensions+$158
00006142                            
00006142                            ; Error handler & core functions
00006142                            __global__ErrorHandler: equ ErrorHandler+$0
00006142                            __global__Error_IdleLoop: equ ErrorHandler+$122
00006142                            __global__Error_InitConsole: equ ErrorHandler+$13C
00006142                            __global__Error_MaskStackBoundaries: equ ErrorHandler+$148
00006142                            __global__Error_DrawOffsetLocation: equ ErrorHandler+$1B2
00006142                            __global__Error_DrawOffsetLocation2: equ ErrorHandler+$1B6
00006142                            __global__ErrorHandler_SetupVDP: equ ErrorHandler+$23C
00006142                            __global__ErrorHandler_VDPConfig: equ ErrorHandler+$274
00006142                            __global__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$28A
00006142                            __global__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2C6
00006142                            __global__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2CA
00006142                            __global__Art1bpp_Font: equ ErrorHandler+$334
00006142                            __global__FormatString: equ ErrorHandler+$8F8
00006142                            __global__Console_Init: equ ErrorHandler+$9CE
00006142                            __global__Console_Reset: equ ErrorHandler+$A10
00006142                            __global__Console_InitShared: equ ErrorHandler+$A12
00006142                            __global__Console_SetPosAsXY_Stack: equ ErrorHandler+$A4E
00006142                            __global__Console_SetPosAsXY: equ ErrorHandler+$A54
00006142                            __global__Console_GetPosAsXY: equ ErrorHandler+$A82
00006142                            __global__Console_StartNewLine: equ ErrorHandler+$AA4
00006142                            __global__Console_SetBasePattern: equ ErrorHandler+$ACC
00006142                            __global__Console_SetWidth: equ ErrorHandler+$AE0
00006142                            __global__Console_WriteLine_WithPattern: equ ErrorHandler+$AF6
00006142                            __global__Console_WriteLine: equ ErrorHandler+$AF8
00006142                            __global__Console_Write: equ ErrorHandler+$AFC
00006142                            __global__Console_WriteLine_Formatted: equ ErrorHandler+$BA8
00006142                            __global__Console_Write_Formatted: equ ErrorHandler+$BAC
00006142                            __global__Decomp1bpp: equ ErrorHandler+$BDC
00006142                            
00006142                            ; ---------------------------------------------------------------
00006142                            ; Built-in debuggers
00006142                            ; ---------------------------------------------------------------
00006142                            
00006142                            Debugger_AddressRegisters:
00006142                            
00006142 48E7 00FE 41FA 002A        	dc.l	$48E700FE, $41FA002A
0000614A 4EBA 0000                  	jsr		__global__Console_Write(pc)
0000614E 49D7 7C06 3F3C 2000 2F3C+  	dc.l	$49D77C06, $3F3C2000, $2F3CE861, $303A41D7
0000615E 221C                       	dc.w	$221C
00006160 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation(pc)
00006164 522F 0002 51CE FFF2 4FEF+  	dc.l	$522F0002, $51CEFFF2, $4FEF0022, $4E75E0FA, $01F026EA, $41646472, $65737320, $52656769
00006184 7374 6572 733A E0E0        	dc.l	$73746572, $733AE0E0
0000618C 0000                       	dc.w	$0000
0000618E                            
0000618E                            Debugger_Backtrace:
0000618E                            
0000618E 41FA 0088                  	dc.l	$41FA0088
00006192 4EBA 0000                  	jsr		__global__Console_Write(pc)
00006196 2278 0000 5989 45D7        	dc.l	$22780000, $598945D7
0000619E 4EBA 0000                  	jsr		__global__Error_MaskStackBoundaries(pc)
000061A2 B3CA 6570 0C52 0040 6464+  	dc.l	$B3CA6570, $0C520040, $64642012, $67602040, $02400001, $66581220, $10200C00, $00616604
000061C2 4A01 663A 0C00 004E 660A+  	dc.l	$4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A, $30200C40, $61006722, $12004200
000061E2 0C40 4E00 6612 0C01 00A8+  	dc.l	$0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01, $00B96606, $0C604EB9, $66102F0A
00006202 2F09 2208                  	dc.l	$2F092208
00006206 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation2(pc)
0000620A 225F 245F 548A 548A B3CA+  	dc.l	$225F245F, $548A548A, $B3CA6490, $4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
0000622A 0000                       	dc.w	$0000
0000622C                            
0000622C                            ; ---------------------------------------------------------------
0000622C                            ; Debugger extensions
0000622C                            ; ---------------------------------------------------------------
0000622C                            
0000622C                            DebuggerExtensions:
0000622C                            
0000622C 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $47EF003C
0000623C 4EBA 0000                  	jsr		__global__ErrorHandler_SetupVDP(pc)
00006240 4EBA 0000                  	jsr		__global__Error_InitConsole(pc)
00006244 4CDF 7FFF                  	dc.l	$4CDF7FFF
00006248 487A 0000                  	pea		__global__Error_IdleLoop(pc)
0000624C 2F2F 0012 4E75 2F0B 4E6B+  	dc.l	$2F2F0012, $4E752F0B, $4E6B0C2B, $005D000C, $661A48E7, $C4464BF9, $00C00004, $4DEDFFFC
0000626C 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Initial(pc), a1
00006270 4EBA 0000                  	jsr		__global__Console_Reset(pc)
00006274 4CDF 6223 265F 4E75 487A+  	dc.l	$4CDF6223, $265F4E75, $487A0058, $4E680C28, $005D000C, $67182F0C, $49FA0016, $4FEFFFF0
00006294 41D7 7E0E                  	dc.l	$41D77E0E
00006298 4EBA 0000                  	jsr		__global__FormatString(pc)
0000629C 4FEF 0010 285F 4E75 4218+  	dc.l	$4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00
000062BC 6002 3A87 1E18 6EFA 6708+  	dc.l	$60023A87, $1E186EFA, $67080407, $00E067F2, $60F22A5F, $205F7E0E, $4E752F08, $4E680C28
000062DC 005D 000C 6708 33FC 9E00+  	dc.l	$005D000C, $670833FC, $9E0000C0, $0004205F, $4E7548E7, $C0D04E6B, $0C2B005D, $000C660C
000062FC 3F3C 0000 610C 610A 67FC+  	dc.l	$3F3C0000, $610C610A, $67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178
0000631C 70F0 C02F 0005 4E75 48E7+  	dc.l	$70F0C02F, $00054E75, $48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2
0000633C 6B40 41FA 0076 5888 D000+  	dc.l	$6B4041FA, $00765888, $D00064FA, $20106F32, $20404FEF
00006350 FFF2                       	dc.w	$FFF2
00006352 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Shared(pc), a1
00006356 47D7 2A3C 4000 0003        	dc.l	$47D72A3C, $40000003
0000635E 4EBA 0000                  	jsr		__global__Console_InitShared(pc)
00006362 2ABC 8230 8406 2A85 487A+  	dc.l	$2ABC8230, $84062A85, $487A000C, $48504CEF, $7FFF0014, $4E754FEF, $000E60B0
0000637E 2ABA 0000                  	move.l	__global__ErrorHandler_VDPConfig_Nametables(pc), (a5)
00006382 60AA 41F9 00C0 0004 44D0+  	dc.l	$60AA41F9, $00C00004, $44D06BFC, $44D06AFC, $4E7512BC, $00004E71, $72C01011, $E50812BC
000063A2 0040 4E71 C001 1211 0201+  	dc.l	$00404E71, $C0011211, $0201003F, $80014600, $1210B101, $10C0C200, $10C14E75
000063BE                            
000063BE                            ; WARNING! Don't move! This must be placed directly below "DebuggerExtensions"
000063BE                            DebuggerExtensions_ExtraDebuggerList:
000063BE 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER	; for button A
000063C2 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER	; for button C (not B)
000063C6 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER	; for button B (not C)
000063CA                            
000063CA                            ; ---------------------------------------------------------------
000063CA                            ; Error handler blob
000063CA                            ; ---------------------------------------------------------------
000063CA                            
000063CA                            ErrorHandler:
000063CA                            
000063CA 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $4EBA022E, $49EF004A, $4E682F08, $47EF0040, $4EBA011E
000063EA 41FA 02B2 4EBA 0AD6 225C+  	dc.l	$41FA02B2, $4EBA0AD6, $225C45D4, $4EBA0B7A, $4EBA0A72, $49D21C19, $6A025249, $47D10806
0000640A 0000 670E 41FA 0295 222C+  	dc.l	$0000670E, $41FA0295, $222C0002, $4EBA0164, $504C41FA, $0292222C, $00024EBA, $01562278
0000642A 0000 45EC 0006 4EBA 01AE+  	dc.l	$000045EC, $00064EBA, $01AE41FA, $02844EBA, $01424EBA, $0A300806, $00066600, $00AA45EF
0000644A 0004 4EBA 09FE 3F01 7003+  	dc.l	$00044EBA, $09FE3F01, $70034EBA, $09C8303C, $64307A07, $4EBA0132, $321F7011, $4EBA09B6
0000646A 303C 6130 7A06 4EBA 0120+  	dc.l	$303C6130, $7A064EBA, $0120303C, $73707A00, $2F0C45D7, $4EBA0112, $584F0806, $00016714
0000648A 43FA 0240 45D7 4EBA 0AE4+  	dc.l	$43FA0240, $45D74EBA, $0AE443FA, $024145D4, $4EBA0AD6, $584F4EBA, $09AA5241, $70014EBA
000064AA 0974 2038 0078 41FA 022F+  	dc.l	$09742038, $007841FA, $022F4EBA, $010A2038, $007041FA, $022B4EBA, $00FE4EBA, $09A82278
000064CA 0000 45D4 5389 6140 4EBA+  	dc.l	$000045D4, $53896140, $4EBA0978, $7A199A41, $6B0A6148, $4EBA005A, $51CDFFFA, $08060005
000064EA 660A 4E71 60FC 7200 4EBA+  	dc.l	$660A4E71, $60FC7200, $4EBA09A2, $2ECB4CDF, $7FFF487A, $FFEE2F2F, $FFC44E75, $43FA0152
0000650A 45FA 01F2 4EFA 0888 223C+  	dc.l	$45FA01F2, $4EFA0888, $223C00FF, $FFFF2409, $C4812242, $240AC481, $24424E75, $4FEFFFD0
0000652A 41D7 7EFF 20FC 2853 5029+  	dc.l	$41D77EFF, $20FC2853, $502930FC, $3A206018, $4FEFFFD0, $41D77EFF, $30FC202B, $320A924C
0000654A 4EBA 05A4 30FC 3A20 7005+  	dc.l	$4EBA05A4, $30FC3A20, $700572EC, $B5C96502, $72EE10C1, $321A4EBA, $05AC10FC, $002051C8
0000656A FFEA 4218 41D7 7200 4EBA+  	dc.l	$FFEA4218, $41D77200, $4EBA094C, $4FEF0030, $4E754EBA, $09482F01, $2F0145D7, $43FA013C
0000658A 4EBA 09E6 504F 4E75 4FEF+  	dc.l	$4EBA09E6, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA055E
000065AA 4218 41D7 7200 4EBA 090E+  	dc.l	$421841D7, $72004EBA, $090E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
000065CA 0C5A 4EF9 6604 2212 60A8+  	dc.l	$0C5A4EF9, $66042212, $60A84EBA, $09A043FA, $01174EFA, $09945989, $4EBAFF2E, $B3CA650C
000065EA 0C52 0040 650A 548A B3CA+  	dc.l	$0C520040, $650A548A, $B3CA64F4, $72004E75, $221267F2, $08010000, $66EC4E75, $4BF900C0
0000660A 0004 4DED FFFC 4A55 44D5+  	dc.l	$00044DED, $FFFC4A55, $44D569FC, $41FA0026, $30186A04, $3A8060F8, $70002ABC, $40000000
0000662A 2C80 2ABC 4000 0010 2C80+  	dc.l	$2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75, $80048134, $85008700, $8B008C81
0000664A 8D00 8F02 9011 9100 9200+  	dc.l	$8D008F02, $90119100, $92008220, $84040000, $44000000, $00000001, $00100011, $01000101
0000666A 0110 0111 1000 1001 1010+  	dc.l	$01100111, $10001001, $10101011, $11001101, $11101111, $FFFF0EEE, $FFF200CE, $FFF20EEA
0000668A FFF2 0E86 FFF2 4000 0002+  	dc.l	$FFF20E86, $FFF24000, $00020028, $00280000, $008000FF, $EAE0FA01, $F02600EA, $41646472
000066AA 6573 733A 2000 EA4F 6666+  	dc.l	$6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C, $6C65723A, $2000EC83, $20E8BFEC
000066CA C800 FA10 E875 7370 3A20+  	dc.l	$C800FA10, $E8757370, $3A20EC83, $00FA03E8, $73723A20, $EC8100EA, $56496E74, $3A2000EA
000066EA 4849 6E74 3A20 00E8 3C75+  	dc.l	$48496E74, $3A2000E8, $3C756E64, $6566696E, $65643E00, $02F70000, $00000000, $0000183C
0000670A 3C18 1800 1800 6C6C 6C00+  	dc.l	$3C181800, $18006C6C, $6C000000, $00006C6C, $FE6CFE6C, $6C00187E, $C07C06FC, $180000C6
0000672A 0C18 3060 C600 386C 3876+  	dc.l	$0C183060, $C600386C, $3876CCCC, $76001818, $30000000, $00001830, $60606030, $18006030
0000674A 1818 1830 6000 00EE 7CFE+  	dc.l	$18181830, $600000EE, $7CFE7CEE, $00000018, $187E1818, $00000000, $00001818, $30000000
0000676A 00FE 0000 0000 0000 0000+  	dc.l	$00FE0000, $00000000, $00000038, $3800060C, $183060C0, $80007CC6, $CEDEF6E6, $7C001878
0000678A 1818 1818 7E00 7CC6 0C18+  	dc.l	$18181818, $7E007CC6, $0C183066, $FE007CC6, $063C06C6, $7C000C1C, $3C6CFE0C, $0C00FEC0
000067AA FC06 06C6 7C00 7CC6 C0FC+  	dc.l	$FC0606C6, $7C007CC6, $C0FCC6C6, $7C00FEC6, $060C1818, $18007CC6, $C67CC6C6, $7C007CC6
000067CA C67E 06C6 7C00 001C 1C00+  	dc.l	$C67E06C6, $7C00001C, $1C00001C, $1C000018, $18000018, $18300C18, $30603018, $0C000000
000067EA FE00 00FE 0000 6030 180C+  	dc.l	$FE0000FE, $00006030, $180C1830, $60007CC6, $060C1800, $18007CC6, $C6DEDCC0, $7E00386C
0000680A C6C6 FEC6 C600 FC66 667C+  	dc.l	$C6C6FEC6, $C600FC66, $667C6666, $FC003C66, $C0C0C066, $3C00F86C, $6666666C, $F800FEC2
0000682A C0F8 C0C2 FE00 FE62 607C+  	dc.l	$C0F8C0C2, $FE00FE62, $607C6060, $F0007CC6, $C0C0DEC6, $7C00C6C6, $C6FEC6C6, $C6003C18
0000684A 1818 1818 3C00 3C18 1818+  	dc.l	$18181818, $3C003C18, $1818D8D8, $7000C6CC, $D8F0D8CC, $C600F060, $60606062, $FE00C6EE
0000686A FED6 D6C6 C600 C6E6 E6F6+  	dc.l	$FED6D6C6, $C600C6E6, $E6F6DECE, $C6007CC6, $C6C6C6C6, $7C00FC66, $667C6060, $F0007CC6
0000688A C6C6 C6D6 7C06 FCC6 C6FC+  	dc.l	$C6C6C6D6, $7C06FCC6, $C6FCD8CC, $C6007CC6, $C07C06C6, $7C007E5A, $18181818, $3C00C6C6
000068AA C6C6 C6C6 7C00 C6C6 C6C6+  	dc.l	$C6C6C6C6, $7C00C6C6, $C6C66C38, $1000C6C6, $D6D6FEEE, $C600C66C, $3838386C, $C6006666
000068CA 663C 1818 3C00 FE86 0C18+  	dc.l	$663C1818, $3C00FE86, $0C183062, $FE007C60, $60606060, $7C00C060, $30180C06, $02007C0C
000068EA 0C0C 0C0C 7C00 1038 6CC6+  	dc.l	$0C0C0C0C, $7C001038, $6CC60000, $00000000, $00000000, $00FF3030, $18000000, $00000000
0000690A 780C 7CCC 7E00 E060 7C66+  	dc.l	$780C7CCC, $7E00E060, $7C666666, $FC000000, $7CC6C0C6, $7C001C0C, $7CCCCCCC, $7E000000
0000692A 7CC6 FEC0 7C00 1C36 30FC+  	dc.l	$7CC6FEC0, $7C001C36, $30FC3030, $78000000, $76CEC67E, $067CE060, $7C666666, $E6001800
0000694A 3818 1818 3C00 0C00 1C0C+  	dc.l	$38181818, $3C000C00, $1C0C0C0C, $CC78E060, $666C786C, $E6001818, $18181818, $1C000000
0000696A 6CFE D6D6 C600 0000 DC66+  	dc.l	$6CFED6D6, $C6000000, $DC666666, $66000000, $7CC6C6C6, $7C000000, $DC66667C, $60F00000
0000698A 76CC CC7C 0C1E 0000 DC66+  	dc.l	$76CCCC7C, $0C1E0000, $DC666060, $F0000000, $7CC07C06, $7C003030, $FC303036, $1C000000
000069AA CCCC CCCC 7600 0000 C6C6+  	dc.l	$CCCCCCCC, $76000000, $C6C66C38, $10000000, $C6C6D6FE, $6C000000, $C66C386C, $C6000000
000069CA C6C6 CE76 067C 0000 FC98+  	dc.l	$C6C6CE76, $067C0000, $FC983064, $FC000E18, $18701818, $0E001818, $18001818, $18007018
000069EA 180E 1818 7000 76DC 0000+  	dc.l	$180E1818, $700076DC, $00000000, $000043FA, $05C80C59, $DEB26672, $70FED059, $74FC7600
00006A0A 4841 0241 00FF D241 D241+  	dc.l	$48410241, $00FFD241, $D241B240, $625C675E, $20311000, $675847F1, $08004841, $7000301B
00006A2A B253 654C 43F3 08FE 45E9+  	dc.l	$B253654C, $43F308FE, $45E9FFFC, $E248C042, $B2730000, $65146204, $D6C0601A, $47F30004
00006A4A 200A 908B 6AE6 594B 600C+  	dc.l	$200A908B, $6AE6594B, $600C45F3, $00FC200A, $908B6AD8, $47D2925B, $7400341B, $D3C24841
00006A6A 4241 4841 D283 7000 4E75+  	dc.l	$42414841, $D2837000, $4E7570FF, $4E754841, $70003001, $D6805283, $323CFFFF, $48415941
00006A8A 6A8E 70FF 4E75 47FA 0530+  	dc.l	$6A8E70FF, $4E7547FA, $05300C5B, $DEB2664A, $D6D37800, $72007400, $45D351CC, $00061619
00006AAA 7807 D603 D341 5242 B252+  	dc.l	$7807D603, $D3415242, $B252620A, $65ECB42A, $00026712, $65E4584A, $B25262FA, $65DCB42A
00006ACA 0002 65D6 66F0 10EA 0003+  	dc.l	$000265D6, $66F010EA, $0003670A, $51CFFFC6, $4E9464C0, $4E755348, $4E757000, $4E754EFA
00006AEA 0024 4EFA 0018 760F 3401+  	dc.l	$00244EFA, $0018760F, $3401E84A, $C44310FB, $205E51CF, $004C4E94, $64464E75, $48416104
00006B0A 654A 4841 7404 760F E579+  	dc.l	$654A4841, $7404760F, $E5791801, $C84310FB, $403E51CF, $00044E94, $6532E579, $1801C843
00006B2A 10FB 402C 51CF 0004 4E94+  	dc.l	$10FB402C, $51CF0004, $4E946520, $E5791801, $C84310FB, $401A51CF, $00044E94, $650EE579
00006B4A C243 10FB 100A 51CF 0004+  	dc.l	$C24310FB, $100A51CF, $00044ED4, $4E753031, $32333435, $36373839, $41424344, $45464EFA
00006B6A 0026 4EFA 001A 7407 7018+  	dc.l	$00264EFA, $001A7407, $7018D201, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754841
00006B8A 6104 6518 4841 740F 7018+  	dc.l	$61046518, $4841740F, $7018D241, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754EFA
00006BAA 0010 4EFA 0048 47FA 009A+  	dc.l	$00104EFA, $004847FA, $009A0241, $00FF6004, $47FA008C, $42007609, $381B3403, $924455CA
00006BCA FFFC D244 9443 4442 8002+  	dc.l	$FFFCD244, $94434442, $8002670E, $06020030, $10C251CF, $00064E94, $6510381B, $6ADC0601
00006BEA 0030 10C1 51CF 0004 4ED4+  	dc.l	$003010C1, $51CF0004, $4ED44E75, $47FA002E, $42007609, $281B3403, $928455CA, $FFFCD284
00006C0A 9443 4442 8002 670E 0602+  	dc.l	$94434442, $8002670E, $06020030, $10C251CF, $00064E94, $65D4281B, $6ADC609E, $3B9ACA00
00006C2A 05F5 E100 0098 9680 000F+  	dc.l	$05F5E100, $00989680, $000F4240, $000186A0, $00002710, $FFFF03E8, $0064000A, $FFFF2710
00006C4A 03E8 0064 000A FFFF 48C1+  	dc.l	$03E80064, $000AFFFF, $48C16008, $4EFA0006, $488148C1, $48E75060, $4EBAFD94, $66182E81
00006C6A 4EBA FE24 4CDF 060A 650A+  	dc.l	$4EBAFE24, $4CDF060A, $650A0803, $00036604, $4EFA00B6, $4E754CDF, $060A0803, $00026708
00006C8A 47FA 000A 4EFA 00B4 70FF+  	dc.l	$47FA000A, $4EFA00B4, $70FF60DE, $3C756E6B, $6E6F776E, $3E0010FC, $002B51CF, $00064E94
00006CAA 65D2 4841 4A41 6700 FE5A+  	dc.l	$65D24841, $4A416700, $FE5A6000, $FE520803, $000366C0, $4EFAFE46, $48E7F810, $10D95FCF
00006CCA FFFC 6E14 6718 1620 7470+  	dc.l	$FFFC6E14, $67181620, $7470C403, $4EBB201A, $64EA4CDF, $081F4E75, $4E9464E0, $60F45348
00006CEA 4E94 4CDF 081F 4E75 47FA+  	dc.l	$4E944CDF, $081F4E75, $47FAFDF4, $B702D402, $4EFB205A, $4E714E71, $47FAFEA4, $B702D402
00006D0A 4EFB 204A 4E71 4E71 47FA+  	dc.l	$4EFB204A, $4E714E71, $47FAFE54, $B702D402, $4EFB203A, $53484E75, $47FAFF2E, $14030242
00006D2A 0003 D442 4EFB 2026 4A40+  	dc.l	$0003D442, $4EFB2026, $4A406B08, $4A816716, $4EFAFF64, $4EFAFF78, $265A10DB, $57CFFFFC
00006D4A 67D2 4E94 64F4 4E75 5248+  	dc.l	$67D24E94, $64F44E75, $5248603C, $504B321A, $4ED3584B, $221A4ED3, $52486022, $504B321A
00006D6A 6004 584B 221A 6A08 4481+  	dc.l	$6004584B, $221A6A08, $448110FC, $002D6004, $10FC002B, $51CF0006, $4E9465CA, $4ED351CF
00006D8A 0006 4E94 65C0 10D9 51CF+  	dc.l	$00064E94, $65C010D9, $51CFFFBC, $4ED44BF9, $00C00004, $4DEDFFFC, $4A516B10, $2A9941D2
00006DAA 3818 4EBA 01F8 43E9 0020+  	dc.l	$38184EBA, $01F843E9, $002060EC, $544941FA, $00482ABC, $C0000000, $70007603, $3C803419
00006DCA 3C82 3419 6AFA 7200 4EB0+  	dc.l	$3C823419, $6AFA7200, $4EB02010, $51CBFFEE, $2A194E63, $26C526D9, $26D936FC, $5D002A85
00006DEA 7000 3219 6112 2ABC 4000+  	dc.l	$70003219, $61122ABC, $40000000, $72006108, $3ABC8174, $2A854E75, $2C802C80, $2C802C80
00006E0A 2C80 2C80 2C80 2C80 51C9+  	dc.l	$2C802C80, $2C802C80, $51C9FFEE, $4E754CAF, $00030004, $48E76010, $4E6B0C2B, $005D000C
00006E2A 661A 3413 0242 E000 C2EB+  	dc.l	$661A3413, $0242E000, $C2EB000A, $D441D440, $D4403682, $23DB00C0, $000436DB, $4CDF0806
00006E4A 4E75 2F0B 4E6B 0C2B 005D+  	dc.l	$4E752F0B, $4E6B0C2B, $005D000C, $66127200, $32130241, $1FFF82EB, $000A2001, $4840E248
00006E6A 265F 4E75 2F0B 4E6B 0C2B+  	dc.l	$265F4E75, $2F0B4E6B, $0C2B005D, $000C6618, $3F003013, $D06B000A, $02405FFF, $368023DB
00006E8A 00C0 0004 36DB 301F 265F+  	dc.l	$00C00004, $36DB301F, $265F4E75, $2F0B4E6B, $0C2B005D, $000C6604, $37410008, $265F4E75
00006EAA 2F0B 4E6B 0C2B 005D 000C+  	dc.l	$2F0B4E6B, $0C2B005D, $000C6606, $584B36C1, $36C1265F, $4E7561D4, $487AFFAA, $48E77E12
00006ECA 4E6B 0C2B 005D 000C 661C+  	dc.l	$4E6B0C2B, $005D000C, $661C2A1B, $4C93005C, $48464DF9, $00C00000, $72001218, $6E0E6B28
00006EEA 4893 001C 2705 4CDF 487E+  	dc.l	$4893001C, $27054CDF, $487E4E75, $51CB000E, $D642DA86, $0885001D, $2D450004, $D2443C81
00006F0A 7200 1218 6EE6 67D8 0241+  	dc.l	$72001218, $6EE667D8, $0241001E, $4EFB1002, $DA86721D, $03856020, $6026602A, $6032603A
00006F2A 1418 6014 1818 60D8 6036+  	dc.l	$14186014, $181860D8, $60361218, $D2417680, $4843CA83, $48418A81, $36022D45, $000460C0
00006F4A 0244 07FF 60BA 0244 07FF+  	dc.l	$024407FF, $60BA0244, $07FF0044, $200060B0, $024407FF, $00444000, $60A60044, $600060A0
00006F6A 3F04 1E98 381F 6098 487A+  	dc.l	$3F041E98, $381F6098, $487AFEFA, $2F0C49FA, $00164FEF, $FFF041D7, $7E0E4EBA, $FD3C4FEF
00006F8A 0010 285F 4E75 4218 4447+  	dc.l	$0010285F, $4E754218, $44470647, $000F90C7, $2F084EBA, $FF28205F, $7E0E4E75, $741E1018
00006FAA 1200 E609 C242 3CB1 1000+  	dc.l	$1200E609, $C2423CB1, $1000D000, $C0423CB1, $000051CC, $FFEA4E75
00006FC2                            
00006FC2                            ; ---------------------------------------------------------------
00006FC2                            ; WARNING!
00006FC2                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
00006FC2                            ;	Symbol data should be appended here after ROM is compiled
00006FC2                            ;	by ConvSym utility, otherwise debugger modules won't be able
00006FC2                            ;	to resolve symbol names.
00006FC2                            ; ---------------------------------------------------------------
00006FC2                            ; ---------------------------------------------------------------
