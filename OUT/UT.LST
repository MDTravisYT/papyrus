00000000                            		include		"Debugger.asm"
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ;
00000000                            ; (c) 2016-2023, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugger customization
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; Enable debugger extensions
00000000                            ; Pressing A/B/C on the exception screen can open other debuggers
00000000                            ; Pressing Start or unmapped button returns to the exception
00000000 =00000001                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON
00000000                            
00000000                            ; Debuggers mapped to pressing A/B/C on the exception screen
00000000                            ; Use 0 to disable button, use debugger's entry point otherwise.
00000000                            DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		Debugger_AddressRegisters	; display address register symbols
00000000                            DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		Debugger_Backtrace			; display exception backtrace
00000000 =00000000                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Creates assertions for debugging
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash!
00000000                            ;	assert.w	d5, eq			; d5 must be $0000!
00000000                            ;	assert.l	a1, hi, a0		; asert a1 > a0, or else crash!
00000000                            ;	assert.b	MemFlag, ne		; MemFlag must be non-zero!
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            assert	macro	src, cond, dest
00000000                            	; Assertions only work in DEBUG builds
00000000                            	if def(__DEBUG__)
00000000                            	if narg=3
00000000                            		cmp.\0	\dest, \src
00000000                            	else narg=2
00000000                            		tst.\0	\src
00000000                            	endc
00000000                            		b\cond\.s	@skip\@
00000000                            		RaiseError	"Assertion failed:%<endl>\src \cond \dest"
00000000                            	@skip\@:
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Raises an error with the given message
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	RaiseError	"Something is wrong"
00000000                            ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
00000000                            ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            	pea		*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		__global__ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			jsr		\console_program										; ... an aligned "jsr" instruction that calls console program itself
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            		endc
00000000                            	else
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)			; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            			even								; ... in case \opts argument is empty or skipped
00000000                            		endc
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Console interface
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	Console.Run	YourConsoleProgram
00000000                            ;	Console.Write "Hello "
00000000                            ;	Console.WriteLine "...world!"
00000000                            ;	Console.SetXY #1, #4
00000000                            ;	Console.WriteLine "Your data is %<.b d0>"
00000000                            ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            Console &
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__Console_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","run")|strcmp("\0","Run")
00000000                            		jsr		__global__ErrorHandler_ConsoleOnly
00000000                            		jsr		\1
00000000                            		bra.s	*
00000000                            	elseif strcmp("\0","clear")|strcmp("\0","Clear")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_ClearConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","pause")|strcmp("\0","Pause")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_PauseConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","sleep")|strcmp("\0","Sleep")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	d0, -(sp)
00000000                            		move.l	a0, -(sp)
00000000                            		move.w	\1, d0
00000000                            		subq.w	#1, d0
00000000                            		bcs.s	@sleep_done\@
00000000                            		@sleep_loop\@:
00000000                            			jsr		__global__VSync
00000000                            			dbf		d0, @sleep_loop\@
00000000                            	@sleep_done\@:
00000000                            		move.l	(sp)+, a0
00000000                            		move.w	(sp)+, d0
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","setxy")|strcmp("\0","SetXY")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		__global__Console_SetPosAsXY_Stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__Console_StartNewLine
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            KDebug &
00000000                            	if def(__DEBUG__)	; KDebug interface is only available in DEBUG builds
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__KDebug_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__KDebug_FlushLine
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","starttimer")|strcmp("\0","StartTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9FC0, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","endtimer")|strcmp("\0","EndTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9F00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakpoint")|strcmp("\0","BreakPoint")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9D00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""KDebug"""
00000000                            	endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		__global__ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even													; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController	; ... extensions controller
00000000                            		else
00000000                            			dc.b	\opts+0
00000000                            			even
00000000                            		endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	__stack:set		0						; size of actual stack
00000000                            	__sp:	set		0						; stack displacement
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            	__lpos:	set		1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	while (__pos)
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."    
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			
00000000                            			; Validate format setting ("param")
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			elseif strcmp("\__param","signed")
00000000                            				__param: substr ,,"hex+signed"	; if param is "signed", correct it to "hex+signed"
00000000                            			endc
00000000                            			if (\__param < $80)
00000000                            				inform	2,"Illegal operand format setting: ""\__param\"". Expected ""hex"", ""dec"", ""bin"", ""sym"", ""str"" or their derivatives."
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            		__lpos:	set		__endpos+1
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            		include		"SRC/SYSTEM/RAM.I"
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A10000                  IO_PCBVER	    =	$A10000
00000000 =00A10001                  VERSION     	=	$A10001
00000000 =00A10002                  IO_CT1_DATA	    =	$A10002
00000000 =00A10003                  IODATA1     	=	$A10003
00000000 =00A10006                  IO_EXT_DATA	    =	$A10006
00000000 =00A10008                  IOCTRL1     	=	$A10008
00000000 =00A1000A                  IO_CT2_CTRL 	=	$A1000A
00000000 =00A1000C                  IOCTRL3     	=	$A1000C
00000000 =00A1000E                  IO_CT1_RX	    =	$A1000E
00000000 =00A10010                  IO_CT1_TX	    =	$A10010
00000000 =00A10012                  IO_CT1_SMODE	=	$A10012
00000000 =00A10014                  IO_CT2_RX	    =	$A10014
00000000 =00A10016                  IO_CT2_TX	    =	$A10016
00000000 =00A10018                  IO_CT2_SMODE	=	$A10018
00000000 =00A1001A                  IO_EXT_RX	    =	$A1001A
00000000 =00A1001C                  IO_EXT_TX	    =	$A1001C
00000000 =00A1001E                  IO_EXT_SMODE	=	$A1001E
00000000 =00A00000                  z80_ram:		equ $A00000	
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A11100                  Z80BUS			=	$A11100
00000000 =00A11200                  Z80_RESET		=	$A11200
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A14000                  SEGATMSS		=	$A14000
00000000                            
00000000 =00008000                  PLANE_A			=	$8000
00000000 =0000A000                  PLANE_B			=	$A000
00000000 =0000C000                  PLANE_W			=	$C000
00000000                            
00000000 =00C00000                  VDPDATA			=	$C00000
00000000 =00C00004                  VDPCTRL			=	$C00004
00000000 =00C00011                  psg_input:		equ $C00011
00000000 =40000000                  VRAMWRITE       =	$40000000
00000000 =40000010                  VSRAMWRITE      =	$40000010
00000000 =40000080                  VRAMDMA         =	$40000080
00000000 =40000090                  VSRAMDMA        =	$40000090
00000000 =C0000000                  CRAMWRITE       =	$C0000000
00000000 =C0000080                  CRAMDMA         =	$C0000080
00000000                            
00000000 =FFFFCC00                  HSCROLLTABLE	=	$FFFFCC00
00000000 =FFFFF600                  GAMEMODE		=	$FFFFF600
00000000 =FFFFF604                  JOYPAD			=	$FFFFF604
00000000 =FFFFF605                  JOYPADPRESS		=	$FFFFF605
00000000 =FFFFF606                  JOYPAD2			=	$FFFFF606
00000000 =FFFFF607                  JOYPAD2PRESS	=	$FFFFF607
00000000 =FFFFF60C                  VDPBUFFER		=	$FFFFF60C
00000000 =FFFFF614                  TIMER			=	$FFFFF614
00000000 =FFFFF616                  VDP_SCREENPOSY	=	$FFFFF616
00000000 =FFFFF61A                  VDP_SCREENPOSX	=	$FFFFF61A
00000000 =FFFFF632                  PALCYCCURRENT	=	$FFFFF632
00000000 =FFFFF634                  PALCYCTIMER		=	$FFFFF634
00000000 =FFFFF62A                  VBLANKCMD		=	$FFFFF62A
00000000 =FFFFF644                  VDPBUFFER2		=	$FFFFF644
00000000 =FFFFF648                  HBLANKFLAG		=	$FFFFF648
00000000 =FFFFF800                  SPRITETABLE		=	$FFFFF800
00000000 =FFFFFB00                  PALETTE			=	$FFFFFB00
00000000 =FFFFFE0C                  VBLANKCOUNTER	=	$FFFFFE0C
00000000 =FFFFF009                  SOUNDPOKE		= 	$FFFFF009
00000000 =FFFFFFF8                  HARDWAREVERSION	=	$FFFFFFF8
00000000 =FFFFFFF8                  HARDWAREVERSION	=	$FFFFFFF8
00000000                            		include		"SOUND/SOUNDRAM.I"
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses TrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000 =FFFFF000                  v_snddriver_ram	= 	$FFFFF000 
00000000                            
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_A5:		equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_AB:		equ ((ptr_sndAB-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            		include		"SRC/SYSTEM/MACRO.I"
00000000                            ALIGN	MACRO
00000000                            		DCB.B (\1-(*%\1))%\1,0
00000000                            		ENDM
00000000                            		
00000000                            COPYTILEMAP		MACRO	source,loc,width,height
00000000                            		lea		(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr		DrawTileMap
00000000                            		endm
00000000                            		
00000000                            WRITEVRAM	MACRO	LOC
00000000                            		MOVE.L	#VRAMWRITE+((LOC&$3FFF)<<16)+((LOC&$C000)>>14),	(VDPCTRL)
00000000                            		ENDM
00000000                            		
00000000                            startZ80:       macro
00000000                            		move.w	#0,(Z80BUS).l
00000000                            		endm
00000000                            		
00000000                            stopZ80:        macro
00000000                            		move.w	#$100,(Z80BUS).l
00000000                            		endm
00000000                            		
00000000                            waitZ80:	macro
00000000                            .wait:		btst	#0,(Z80BUS).l
00000000                            		bne.s	.wait
00000000                            		endm
00000000                            		
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(Z80_RESET).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(Z80_RESET).l
00000000                            		endm
00000000                            		endm
00000000                            		include		"SRC/SYSTEM/HEADER.ASM"
00000000 00FF FE00                  		DC.L	$00FFFE00
00000004 0000 0000                  		DC.L	START
00000008 0000 0000                  		DC.L 	BusError		; Bus error
0000000C 0000 0000                  		DC.L 	AddressError	; Address error (4)
00000010 0000 0000                  		DC.L 	IllegalInstr	; Illegal instruction
00000014 0000 0000                  		DC.L 	ZeroDivide		; Division by zero
00000018 0000 0000                  		DC.L 	ChkInstr		; CHK exception
0000001C 0000 0000                  		DC.L 	TrapvInstr		; TRAPV exception (8)
00000020 0000 0000                  		DC.L 	PrivilegeViol	; Privilege violation
00000024 0000 0000                  		DC.L 	Trace			; TRACE exception
00000028 0000 0000                  		DC.L 	Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		DC.L 	Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		DC.L	ERROR
00000034 0000 0000                  		DC.L	ERROR
00000038 0000 0000                  		DC.L	ERROR
0000003C 0000 0000                  		DC.L	ERROR
00000040 0000 0000                  		DC.L	ERROR
00000044 0000 0000                  		DC.L	ERROR
00000048 0000 0000                  		DC.L	ERROR
0000004C 0000 0000                  		DC.L	ERROR
00000050 0000 0000                  		DC.L	ERROR
00000054 0000 0000                  		DC.L	ERROR
00000058 0000 0000                  		DC.L	ERROR
0000005C 0000 0000                  		DC.L	ERROR
00000060 0000 0000                  		DC.L	ERROR
00000064 0000 0000                  		DC.L	INT
00000068 0000 0000                  		DC.L	INT
0000006C 0000 0000                  		DC.L	INT
00000070 0000 0000                  		DC.L	HBLANK
00000074 0000 0000                  		DC.L	INT
00000078 0000 0000                  		DC.L	VBLANK
0000007C 0000 0000                  		DC.L	INT
00000080 0000 0000                  		DC.L	ERROR
00000084 0000 0000                  		DC.L	ERROR
00000088 0000 0000                  		DC.L	ERROR
0000008C 0000 0000                  		DC.L	ERROR
00000090 0000 0000                  		DC.L	ERROR
00000094 0000 0000                  		DC.L	ERROR
00000098 0000 0000                  		DC.L	ERROR
0000009C 0000 0000                  		DC.L	ERROR
000000A0 0000 0000                  		DC.L	ERROR
000000A4 0000 0000                  		DC.L	ERROR
000000A8 0000 0000                  		DC.L	ERROR
000000AC 0000 0000                  		DC.L	ERROR
000000B0 0000 0000                  		DC.L	ERROR
000000B4 0000 0000                  		DC.L	ERROR
000000B8 0000 0000                  		DC.L	ERROR
000000BC 0000 0000                  		DC.L	ERROR
000000C0 0000 0000                  		DC.L	ERROR
000000C4 0000 0000                  		DC.L	ERROR
000000C8 0000 0000                  		DC.L	ERROR
000000CC 0000 0000                  		DC.L	ERROR
000000D0 0000 0000                  		DC.L	ERROR
000000D4 0000 0000                  		DC.L	ERROR
000000D8 0000 0000                  		DC.L	ERROR
000000DC 0000 0000                  		DC.L	ERROR
000000E0 0000 0000                  		DC.L	ERROR
000000E4 0000 0000                  		DC.L	ERROR
000000E8 0000 0000                  		DC.L	ERROR
000000EC 0000 0000                  		DC.L	ERROR
000000F0 0000 0000                  		DC.L	ERROR
000000F4 0000 0000                  		DC.L	ERROR
000000F8 0000 0000                  		DC.L	ERROR
000000FC 0000 0000                  		DC.L	ERROR
00000100 5345 4741 204D 4547 4120+  		DC.B	'SEGA MEGA DRIVE '		;	SYSTEM
00000110 4D44 5452 4156 4953 2032+  		DC.B	'MDTRAVIS 2024   '		;	DATE
00000120 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	DOMESTIC TITLE
00000130 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000140 2020 2020 2020 2020 2020+  		DC.B	'                '
00000150 554E 4445 5254 414C 4520+  		DC.B	'UNDERTALE BATTLE'		;	INTERNATIONAL TITLE
00000160 2054 4553 5420 2020 2020+  		DC.B	' TEST           '
00000170 2020 2020 2020 2020 2020+  		DC.B	'                '
00000180 474D 2058 5858 5858 5858+  		DC.B	'GM XXXXXXXX-XX',0,0	;	SERIAL
00000190 4A20 2020 2020 2020 2020+  		DC.B	'J               '		;	I/O SUPPORT JOYPAD
000001A0 0000 0000                  		DC.L	$00000000				;	ROM START
000001A4 0007 FFFF                  		DC.L	$0007FFFF				;	ROM END
000001A8 00FF 0000                  		DC.L	$00FF0000				;	RAM START
000001AC 00FF FFFF                  		DC.L	$00FFFFFF				;	RAM END
000001B0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001C0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001D0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001E0 2020 2020 2020 2020 2020+  		DC.B	'                '
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
000001F0 4A55 2020 2020 2020 2020+  		DC.B	'JU              '		;	REGION
00000200                            		
00000200                            INT:
00000200                            ERROR:
00000200 23FC C000 0000 00C0 0004   		move.l	#CRAMWRITE,	(VDPCTRL)		;	Set VDP control mode to manually write a palette to CRAM
0000020A 33FC 000E 00C0 0000        		move.w	#$000E,		VDPDATA			;	Palleting...
00000212 60EC                       		BRA.S		INT
00000214                            		
00000214                            		INCLUDE		"SRC/SYSTEM/HBLANK.ASM"
00000214                            HBLANK:
00000214 4A79 FFFF F648             		TST.W	HBLANKFLAG
0000021A 6700                       		BEQ.S	.EXIT
0000021C 48E7 8084                  		MOVEM.L	D0/A0/A5,-(SP)
00000220 33FC 0000 FFFF F648        		MOVE.W	#0,	HBLANKFLAG
00000228 33FC 8405 00C0 0004        		MOVE.W	#$8405,	(VDPCTRL).L
00000230 33FC 857C 00C0 0004        		MOVE.W	#$857C,	(VDPCTRL).L
00000238 23FC 7800 0003 00C0 0004   		MOVE.L	#$78000003,	(VDPCTRL).L
00000242 41F9 FFFF F800             		LEA		SPRITETABLE,	A0
00000248 4BF9 00C0 0000             		LEA		(VDPDATA).L,	A5
0000024E 303C 009F                  		MOVE.W	#$9F,	D0
00000252                            		
00000252                            	.SPRITE:
00000252 2A98                       		MOVE.L	(A0)+,	(A5)
00000254 51C8 FFFC                  		DBF		D0,	.SPRITE
00000258 4CDF 2101                  		MOVEM.L	(SP)+,	D0/A0/A5
0000025C                            		
0000025C                            	.EXIT:
0000025C 4E73                       		RTE
0000025C 4E73                       		RTE
0000025E                            		INCLUDE		"SRC/SYSTEM/VBLANK.ASM"
0000025E                            VBLANK:
0000025E 48E7 FFFE                  		MOVEM.L	D0-D7/A0-A6,	-(SP)
00000262 4A39 FFFF F62A             		TST.B	VBLANKCMD
00000268 6700                       		BEQ.S	.END
0000026A 3039 00C0 0004             		MOVE.W	(VDPCTRL).L,	D0
00000270 23FC 4000 0010 00C0 0004   		MOVE.L	#$40000010,	(VDPCTRL).L
0000027A 23F9 FFFF F616 00C0 0000   		MOVE.L	VDP_SCREENPOSY,	(VDPDATA).L
00000284 0839 0006 FFFF FFF8        		BTST	#6,	HARDWAREVERSION
0000028C 6700                       		BEQ.S	.NTSC
0000028E 303C 0700                  		MOVE.W	#$700,	D0
00000292                            		
00000292                            	.PAL:
00000292 51C8 FFFE                  		DBF	D0,	.PAL
00000296                            		
00000296                            	.NTSC:
00000296 1039 FFFF F62A             		MOVE.B	VBLANKCMD,	D0
0000029C 13FC 0000 FFFF F62A        		MOVE.B	#0,	VBLANKCMD
000002A4 33FC 0001 FFFF F648        		MOVE.W	#1,	HBLANKFLAG
000002AC 0240 003E                  		ANDI.W	#%111110,	D0
000002B0 303B 0000                  		MOVE.W	.INDEX(PC,D0.W),	D0
000002B4 4EBB 0000                  		JSR		.INDEX(PC,D0.W)
000002B8                            		
000002B8                            	.END:
000002B8 4EB9 0000 0000             		JSR		UpdateMusic
000002BE 52B9 FFFF FE0C             		ADDQ.L	#1,	VBLANKCOUNTER
000002C4                            	;	JSR		
000002C4 4CDF 7FFF                  		MOVEM.L	(SP)+,	D0-D7/A0-A6
000002C8 4E73                       		RTE
000002CA                            		
000002CA                            	VBL_INVALID:
000002CA 4E75                       		RTS
000002CC                            		
000002CC                            	.INDEX:
000002CC 0000                       		DC.W	VBL_DEFAULT-.INDEX	;	0
000002CE FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	2
000002D0 FFFE                       		DC.W	VBL_INVALID-.INDEX  	;	4
000002D2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	6
000002D4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	8
000002D6 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	A
000002D8 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	C
000002DA FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	E
000002DC FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	10
000002DE FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	12
000002E0 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	14
000002E2 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	16
000002E4 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	18
000002E6 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1A
000002E8 FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1C
000002EA FFFE                       		DC.W	VBL_INVALID-.INDEX  ;	1E
000002EC                            		
000002EC                            VBL_DEFAULT:
000002EC 4EB9 0000 0000             		JSR		READJOYPADS
000002F2 6100 0000                  		BSR.W	REFRESH_VDP_BUFFERS
000002F6 4A78 F614                  		TST.W	(TIMER).W
000002FA 6700 0000                  		BEQ.W	@STOP
000002FE 5378 F614                  		SUBQ.W	#1,	(TIMER).W
00000302                            	@STOP:	
00000302 4E75                       		RTS
00000304                            		
00000304                            REFRESH_VDP_BUFFERS:
00000304                            ;		MOVE.W	#$100,	(Z80BUS).L
00000304                            ;		
00000304                            ;	@LOOP:
00000304                            ;		BTST	#0,	(Z80BUS).L
00000304                            ;		BNE.S	@LOOP
00000304                            		
00000304 4BF9 00C0 0004             		LEA	(VDPCTRL).L,	A5
0000030A 2ABC 9400 9340                     move.l  #$94009340,(a5)
00000310 2ABC 96FD 9580                     move.l  #$96FD9580,(a5)
00000316 3ABC 977F                          move.w  #$977F,(a5)
0000031A 3ABC C000                          move.w  #$C000,(a5)
0000031E 31FC 0080 F644                     move.w  #$80,(VDPBUFFER2).w
00000324 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000328 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
0000032E 2ABC 9401 9340                     move.l  #$94019340,(a5)
00000334 2ABC 96FC 9500                     move.l  #$96FC9500,(a5)
0000033A 3ABC 977F                          move.w  #$977F,(a5)
0000033E 3ABC 7800                          move.w  #$7800,(a5)
00000342 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
00000348 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
0000034C 4BF9 00C0 0004                     lea     (VDPCTRL).l,a5
00000352                            
00000352                            loc_EDC:
00000352 2ABC 9401 93C0                     move.l  #$940193C0,(a5)
00000358 2ABC 96E6 9500                     move.l  #$96E69500,(a5)
0000035E 3ABC 977F                          move.w  #$977F,(a5)
00000362 3ABC 7C00                          move.w  #$7C00,(a5)
00000366 31FC 0083 F644                     move.w  #$83,(VDPBUFFER2).w
0000036C 3AB8 F644                          move.w  (VDPBUFFER2).w,(a5)
00000370 33FC 0000 00A1 1100                move.w  #0,(Z80BUS).l
00000378 4E75                               rts
00000378 4E75                               rts
0000037A                            		INCLUDE		"SRC/SYSTEM/SETUP.ASM"
0000037A 8000                       SetupValues:	dc.w $8000		; VDP register start number
0000037C 3FFF                       		dc.w $3FFF		; size of RAM/4
0000037E 0100                       		dc.w $100		; VDP register diff
00000380                            
00000380 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
00000384 00A1 1100                  		dc.l Z80BUS	; Z80 bus request
00000388 00A1 1200                  		dc.l Z80_RESET		; Z80 reset
0000038C 00C0 0000                  		dc.l VDPDATA	; VDP data
00000390 00C0 0004                  		dc.l VDPCTRL	; VDP control
00000394                            
00000394 04                         		dc.b 4			; VDP $80 - 8-colour mode
00000395 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
00000396 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
00000397 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
00000398 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
00000399 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
0000039A 00                         		dc.b 0			; VDP $86 - unused
0000039B 00                         		dc.b 0			; VDP $87 - background colour
0000039C 00                         		dc.b 0			; VDP $88 - unused
0000039D 00                         		dc.b 0			; VDP $89 - unused
0000039E FF                         		dc.b 255		; VDP $8A - HBlank register
0000039F 00                         		dc.b 0			; VDP $8B - full screen scroll
000003A0 81                         		dc.b $81		; VDP $8C - 40 cell display
000003A1 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000003A2 00                         		dc.b 0			; VDP $8E - unused
000003A3 01                         		dc.b 1			; VDP $8F - VDP increment
000003A4 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000003A5 00                         		dc.b 0			; VDP $91 - window h position
000003A6 00                         		dc.b 0			; VDP $92 - window v position
000003A7 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000003A9 0000                       		dc.w 0			; VDP $95/96 - DMA source
000003AB 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000003AC 4000 0080                  		dc.l $40000080		; VRAM address 0
000003B0                            
000003B0 AF                         		dc.b $AF		; xor	a
000003B1 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000003B4 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000003B7 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000003BA F9                         		dc.b $F9		; ld	sp,hl
000003BB 77                         		dc.b $77		; ld	(hl),a
000003BC EDB0                       		dc.b $ED, $B0		; ldir
000003BE DDE1                       		dc.b $DD, $E1		; pop	ix
000003C0 FDE1                       		dc.b $FD, $E1		; pop	iy
000003C2 ED47                       		dc.b $ED, $47		; ld	i,a
000003C4 ED4F                       		dc.b $ED, $4F		; ld	r,a
000003C6 D1                         		dc.b $D1		; pop	de
000003C7 E1                         		dc.b $E1		; pop	hl
000003C8 F1                         		dc.b $F1		; pop	af
000003C9 08                         		dc.b $08		; ex	af,af'
000003CA D9                         		dc.b $D9		; exx
000003CB C1                         		dc.b $C1		; pop	bc
000003CC D1                         		dc.b $D1		; pop	de
000003CD E1                         		dc.b $E1		; pop	hl
000003CE F1                         		dc.b $F1		; pop	af
000003CF F9                         		dc.b $F9		; ld	sp,hl
000003D0 F3                         		dc.b $F3		; di
000003D1 ED56                       		dc.b $ED, $56		; im1
000003D3 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000003D5 E9                         		dc.b $E9		; jp	(hl)
000003D6                            
000003D6 8104                       		dc.w $8104		; VDP display mode
000003D8 8F02                       		dc.w $8F02		; VDP increment
000003DA C000 0000                  		dc.l $C0000000		; CRAM write mode
000003DE 4000 0010                  		dc.l $40000010		; VSRAM address 0
000003E2                            
000003E2 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000003E2 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
000003E6                            		
000003E6                            START:
000003E6 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
000003EC 6600                       		bne.s	PortA_Ok
000003EE 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
000003F4                            PortA_Ok:
000003F4                            PortA_Ok:
000003F4 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
000003F6 4BFA FF82                  		lea	SetupValues(pc),a5	; Load setup values array address.
000003FA 4C9D 00E0                  		movem.w	(a5)+,d5-d7
000003FE 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000402 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000406 0200 000F                  		andi.b	#$F,d0
0000040A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000040C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000414                            SkipSecurity:
00000414                            SkipSecurity:
00000414 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000416 7000                       		moveq	#0,d0	; clear d0
00000418 2C40                       		movea.l	d0,a6	; clear a6
0000041A 4E66                       		move.l	a6,usp	; set usp to $0
0000041C                            		moveq	#$17,d1
0000041C 7217                       		moveq	#$17,d1
0000041E                            VDPInitLoop:
0000041E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000420 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000422 DA47                       		add.w	d7,d5		; next register
00000424 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000428                            		
00000428 289D                       		move.l	(a5)+,(a4)
0000042A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000042C 3287                       		move.w	d7,(a1)		; stop the Z80
0000042E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000430                            WaitForZ80:
00000430                            WaitForZ80:
00000430 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000432 66FC                       		bne.s	WaitForZ80	; if not, branch
00000434                            		moveq	#$25,d2
00000434 7425                       		moveq	#$25,d2
00000436                            Z80InitLoop:
00000436 10DD                       		move.b	(a5)+,(a0)+
00000438 51CA FFFC                  		dbf	d2,Z80InitLoop
0000043C                            		
0000043C 3480                       		move.w	d0,(a2)
0000043E 3280                       		move.w	d0,(a1)		; start	the Z80
00000440 3487                       		move.w	d7,(a2)		; reset	the Z80
00000442                            ClrRAMLoop:
00000442                            ClrRAMLoop:
00000442 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000444 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000448 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000044A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000044C                            		moveq	#$1F,d3	; set repeat times
0000044C 761F                       		moveq	#$1F,d3	; set repeat times
0000044E                            ClrCRAMLoop:
0000044E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000450 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000454 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000456                            		moveq	#$13,d4
00000456 7813                       		moveq	#$13,d4
00000458                            ClrVSRAMLoop:
00000458 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000045A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000045E 7A03                       		moveq	#3,d5
00000460                            PSGInitLoop:
00000460                            PSGInitLoop:
00000460 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000464 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000468 3480                       		move.w	d0,(a2)
0000046A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000046E 46FC 2700                  		move	#$2700,sr
00000472                            SkipSetup:
00000472                            SkipSetup:
00000472 4DF9 00FF 0000             		LEA		$FF0000,	A6
00000478 7E00                       		MOVEQ	#0,	D7
0000047A 3C3C 3F7F                  		MOVE.W	#($FE00/4)-1,	D6
0000047E                            		
0000047E                            	@CLEARRAM:
0000047E 2CC7                       		MOVE.L	D7,	(A6)+
00000480 51CE FFFC                  		DBF		D6,	@CLEARRAM
00000484 6100 0000                  		BSR.W	INITVDP
00000488 6100 0000                  		BSR.W	INITSOUND
0000048C 6100 0000                  		BSR.W	INITJOYPADS
00000490 11FC 0000 F600             		MOVE.B	#0*4,	(GAMEMODE).W
00000496                            		
00000496                            MAINLOOP:
00000496 1038 F600                  		MOVE.B	(GAMEMODE).W,	D0
0000049A 0240 001C                  		ANDI.W	#%00011100,	D0
0000049E 4EBB 0000                  		JSR		@INDEX(PC,D0.W)
000004A2 60F2                       		BRA.S	MAINLOOP
000004A4                            		
000004A4                            	@INDEX:
000004A4 6000 0000                  		BRA.W	LOGO
000004A8 4E75                       		RTS
000004AA                            		
000004AA                            		INCLUDE		"SRC/SYSTEM/INITVDP.ASM"
000004AA                            INITVDP:
000004AA 33FC 8004 00C0 0004        		MOVE.W	#$8000+%00000100,(VDPCTRL)		;	MODE REGISTER 1
000004B2 33FC 8174 00C0 0004        		MOVE.W	#$8100+%01110100,(VDPCTRL)      ;	MODE REGISTER 2
000004BA 33FC 8220 00C0 0004        		MOVE.W	#$8200+(PLANE_A>>10),(VDPCTRL)  ;	PLANE A LOCATION
000004C2 33FC 8330 00C0 0004        		MOVE.W	#$8300+(PLANE_W>>10),(VDPCTRL)  ;	PLANE W LOCATION
000004CA 33FC 8405 00C0 0004        		MOVE.W	#$8400+(PLANE_B>>13),(VDPCTRL)  ;	PLANE B LOCATION
000004D2 33FC 857C 00C0 0004        		MOVE.W	#$8500+%01111100,(VDPCTRL)      ;	SPRITE TABLE LOCATION
000004DA 33FC 8600 00C0 0004        		MOVE.W	#$8600+%00000000,(VDPCTRL)      ;	
000004E2 33FC 8720 00C0 0004        		MOVE.W	#$8700+%00100000,(VDPCTRL)      ;	BACKGROUND COLOR
000004EA 33FC 8800 00C0 0004        		MOVE.W	#$8800+%00000000,(VDPCTRL)      ;	MASTER SYSTEM H-SCROLL
000004F2 33FC 8900 00C0 0004        		MOVE.W	#$8900+%00000000,(VDPCTRL)      ;	MASTER SYSTEM V-SCROLL
000004FA 33FC 8A00 00C0 0004        		MOVE.W	#$8A00+%00000000,(VDPCTRL)      ;	H-INT COUNTER
00000502 33FC 8B00 00C0 0004        		MOVE.W	#$8B00+%00000000,(VDPCTRL)      ;	MODE REGISTER 3
0000050A 33FC 8C81 00C0 0004        		MOVE.W	#$8C00+%10000001,(VDPCTRL)      ;	MODE REGISTER 4
00000512 33FC 8D3F 00C0 0004        		MOVE.W	#$8D00+%00111111,(VDPCTRL)      ;	H-SCROLL DATA LOCATION
0000051A 33FC 8E00 00C0 0004        		MOVE.W	#$8E00+%00000000,(VDPCTRL)      ;	
00000522 33FC 8F02 00C0 0004        		MOVE.W	#$8F00+%00000010,(VDPCTRL)      ;	AUTO-INCREMENT VALUE
0000052A 33FC 9001 00C0 0004        		MOVE.W	#$9000+%00000001,(VDPCTRL)      ;	PLANE SIZE
00000532 33FC 9100 00C0 0004        		MOVE.W	#$9100+%00000000,(VDPCTRL)      ;	WINDOW PLANE HORIZONTAL
0000053A 33FC 9200 00C0 0004        		MOVE.W	#$9200+%00000000,(VDPCTRL)      ;	WINDOW PLANE VERTICAL
00000542 4E75                       		RTS
00000542 4E75                       		RTS
00000544                            		INCLUDE		"SRC/SYSTEM/INITSOUND.ASM"
00000544                            INITSOUND:
00000544 4E71                       		nop	
00000546 33FC 0100 00A1 1100        		stopZ80
0000054E 33FC 0100 00A1 1200        		resetZ80
00000556 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000055C 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00000562 6100 0000                  		bsr.w	KosDec		; decompress
00000566 33FC 0000 00A1 1200        		resetZ80a
0000056E 4E71                       		nop	
00000570 4E71                       		nop	
00000572 4E71                       		nop	
00000574 4E71                       		nop	
00000576 33FC 0100 00A1 1200        		resetZ80
0000057E 33FC 0000 00A1 1100        		startZ80
00000586 4E75                       		rts	
00000588                            ; End of function SoundDriverLoad
00000588                            ; End of function SoundDriverLoad
00000588                            		INCLUDE		"SRC/SYSTEM/INITJOYPADS.ASM"
00000588                            INITJOYPADS:
00000588 33FC 0100 00A1 1100        		stopZ80
00000590 0839 0000 00A1 1100 66F6   		waitZ80
0000059A 7040                       		MOVEQ	#$40,	D0
0000059C 13C0 00A1 0009             		MOVE.B	D0,	(IOCTRL1+1).L
000005A2 13C0 00A1 000B             		MOVE.B	D0,	(IO_CT2_CTRL+1).L
000005A8 13C0 00A1 000D             		MOVE.B	D0,	(IOCTRL3+1).L
000005AE 33FC 0000 00A1 1100        		startZ80
000005B6 4E75                       		RTS
000005B6 4E75                       		RTS
000005B8                            		
000005B8                            		INCLUDE		"SRC/SYSTEM/Kosinski.ASM"
000005B8                            ; ---------------------------------------------------------------------------
000005B8                            ; Kosinski decompression algorithm
000005B8                            
000005B8                            ; input:
000005B8                            ;	a0 = source address
000005B8                            ;	a1 = destination address
000005B8                            
000005B8                            ; usage:
000005B8                            ;	lea	(source).l,a0
000005B8                            ;	lea	(destination).l,a1
000005B8                            ;	bsr.w	KosDec
000005B8                            ; ---------------------------------------------------------------------------
000005B8                            
000005B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005B8                            
000005B8                            
000005B8                            KosDec:
000005B8                            
000005B8 558F                       		subq.l	#2,sp	; make space for 2 bytes on the stack
000005BA 1F58 0001                  		move.b	(a0)+,1(sp)
000005BE 1E98                       		move.b	(a0)+,(sp)
000005C0 3A17                       		move.w	(sp),d5	; get first description field
000005C2 780F                       		moveq	#$F,d4	; set to loop for 16 bits
000005C4                            
000005C4                            Kos_Loop:
000005C4 E24D                       		lsr.w	#1,d5	; shift bit into the c flag
000005C6 40C6                       		move	sr,d6
000005C8 51CC 0000                  		dbf	d4,@chkbit
000005CC 1F58 0001                  		move.b	(a0)+,1(sp)
000005D0 1E98                       		move.b	(a0)+,(sp)
000005D2 3A17                       		move.w	(sp),d5
000005D4 780F                       		moveq	#$F,d4
000005D6                            
000005D6                            	@chkbit:
000005D6 44C6                       		move	d6,ccr	; was the bit set?
000005D8 6400                       		bcc.s	Kos_RLE	; if not, branch
000005DA                            
000005DA 12D8                       		move.b	(a0)+,(a1)+ ; copy byte as-is
000005DC 60E6                       		bra.s	Kos_Loop
000005DE                            ; ===========================================================================
000005DE                            
000005DE                            Kos_RLE:
000005DE 7600                       		moveq	#0,d3
000005E0 E24D                       		lsr.w	#1,d5	; get next bit
000005E2 40C6                       		move	sr,d6
000005E4 51CC 0000                  		dbf	d4,@chkbit
000005E8 1F58 0001                  		move.b	(a0)+,1(sp)
000005EC 1E98                       		move.b	(a0)+,(sp)
000005EE 3A17                       		move.w	(sp),d5
000005F0 780F                       		moveq	#$F,d4
000005F2                            
000005F2                            	@chkbit:
000005F2 44C6                       		move	d6,ccr	; was the bit set?
000005F4 6500                       		bcs.s	Kos_SeparateRLE ; if yes, branch
000005F6                            
000005F6 E24D                       		lsr.w	#1,d5	; shift bit into the x flag
000005F8 51CC 0000                  		dbf	d4,@loop1
000005FC 1F58 0001                  		move.b	(a0)+,1(sp)
00000600 1E98                       		move.b	(a0)+,(sp)
00000602 3A17                       		move.w	(sp),d5
00000604 780F                       		moveq	#$F,d4
00000606                            
00000606                            	@loop1:
00000606 E353                       		roxl.w	#1,d3	; get high repeat count bit
00000608 E24D                       		lsr.w	#1,d5
0000060A 51CC 0000                  		dbf	d4,@loop2
0000060E 1F58 0001                  		move.b	(a0)+,1(sp)
00000612 1E98                       		move.b	(a0)+,(sp)
00000614 3A17                       		move.w	(sp),d5
00000616 780F                       		moveq	#$F,d4
00000618                            
00000618                            	@loop2:
00000618 E353                       		roxl.w	#1,d3	; get low repeat count bit
0000061A 5243                       		addq.w	#1,d3	; increment repeat count
0000061C 74FF                       		moveq	#-1,d2
0000061E 1418                       		move.b	(a0)+,d2 ; calculate offset
00000620 6000                       		bra.s	Kos_RLELoop
00000622                            ; ===========================================================================
00000622                            
00000622                            Kos_SeparateRLE:
00000622 1018                       		move.b	(a0)+,d0 ; get first byte
00000624 1218                       		move.b	(a0)+,d1 ; get second byte
00000626 74FF                       		moveq	#-1,d2
00000628 1401                       		move.b	d1,d2
0000062A EB4A                       		lsl.w	#5,d2
0000062C 1400                       		move.b	d0,d2	; calculate offset
0000062E 0241 0007                  		andi.w	#7,d1	; does a third byte need to be read?
00000632 6700                       		beq.s	Kos_SeparateRLE2 ; if yes, branch
00000634 1601                       		move.b	d1,d3	; copy repeat count
00000636 5243                       		addq.w	#1,d3	; increment
00000638                            
00000638                            Kos_RLELoop:
00000638 1031 2000                  		move.b	(a1,d2.w),d0 ; copy appropriate byte
0000063C 12C0                       		move.b	d0,(a1)+ ; repeat
0000063E 51CB FFF8                  		dbf	d3,Kos_RLELoop
00000642 6080                       		bra.s	Kos_Loop
00000644                            ; ===========================================================================
00000644                            
00000644                            Kos_SeparateRLE2:
00000644 1218                       		move.b	(a0)+,d1
00000646 6700                       		beq.s	Kos_Done ; 0 indicates end of compressed data
00000648 0C01 0001                  		cmpi.b	#1,d1
0000064C 6700 FF76                  		beq.w	Kos_Loop ; 1 indicates new description to be read
00000650 1601                       		move.b	d1,d3	; otherwise, copy repeat count
00000652 60E4                       		bra.s	Kos_RLELoop
00000654                            ; ===========================================================================
00000654                            
00000654                            Kos_Done:
00000654 548F                       		addq.l	#2,sp	; restore stack pointer
00000656 4E75                       		rts	
00000658                            ; End of function KosDec
00000658                            ; End of function KosDec
00000658                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
00000658                            		INCLUDE		"SRC/SUB/READJOYPADS.ASM"
00000658                            READJOYPADS:
00000658 41F8 F604                  		LEA		(JOYPAD).W,	A0
0000065C 43F9 00A1 0003             		LEA		(IODATA1).L,	A1
00000662 6100                       		BSR.S	@READPAD
00000664 5449                       		ADDQ.W	#2,	A1
00000666 6100                       		BSR.S	@READPAD
00000668 4E75                       		RTS
0000066A                            		
0000066A                            	@READPAD:
0000066A 12BC 0000                  		MOVE.B  #0,(A1)
0000066E 4E71                       		NOP
00000670 4E71                       		NOP
00000672 1011                       		MOVE.B  (A1),D0
00000674 E508                       		LSL.B   #2,D0
00000676 0200 00C0                  		ANDI.B  #$C0,D0
0000067A 12BC 0040                  		MOVE.B  #$40,(A1) ; '@'
0000067E 4E71                       		NOP
00000680 4E71                       		NOP
00000682 1211                       		MOVE.B  (A1),D1
00000684 0201 003F                  		ANDI.B  #$3F,D1 ; '?'
00000688 8001                       		OR.B    D1,D0
0000068A 4600                       		NOT.B   D0
0000068C 1210                       		MOVE.B  (A0),D1
0000068E B101                       		EOR.B   D0,D1
00000690 10C0                       		MOVE.B  D0,(A0)+
00000692 C200                       		AND.B   D0,D1
00000694 10C1                       		MOVE.B  D1,(A0)+
00000696 4E75                       		RTS
00000696 4E75                       		RTS
00000698                            		INCLUDE		"SRC/SUB/CLEARSCREEN.ASM"
00000698                            CLEARSCREEN:                            ; ...
00000698 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
0000069E 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000006A2 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000006A8                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000006A8 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000006AC                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000006AC                                                                    ; SET_VRAM_FILL_DMA_MODE
000006AC 2ABC 4000 0082                             MOVE.L  #$40000082,(A5) ; DO_WRITE_TO_VRAM_AT_$C000_ADDR
000006B2                                                                    ; DO_OPERATION_USING_DMA
000006B2 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000006BA                            
000006BA                            @WAITFGCLEAR:                          ; ...
000006BA 3215                                       MOVE.W  (A5),D1
000006BC 0801 0001                                  BTST    #1,D1
000006C0 66F8                                       BNE.S   @WAITFGCLEAR
000006C2 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000006C6 4BF9 00C0 0004                             LEA     (VDPCTRL).L,A5
000006CC 3ABC 8F01                                  MOVE.W  #$8F01,(A5)     ; SET_VDP_AUTO_INC_VALUE_$0001
000006D0 2ABC 940F 93FF                             MOVE.L  #$940F93FF,(A5) ; SET_LOWER_BYTE_OF_DMA_LEN_TO_$FF
000006D6                                                                    ; SET_HIGHER_BYTE_OF_DMA_LEN_TO_$0F
000006D6 3ABC 9780                                  MOVE.W  #$9780,(A5)     ; SET_HIGH_BYTE_OF_DMA_SRC_TO_$00
000006DA                                                                    ; ADD_$800000_TO_DMA_SRC_ADDR
000006DA                                                                    ; SET_VRAM_FILL_DMA_MODE
000006DA 2ABC 6000 0082                             MOVE.L  #$60000082,(A5) ; DO_WRITE_TO_VRAM_AT_$E000_ADDR
000006E0                                                                    ; DO_OPERATION_USING_DMA
000006E0 33FC 0000 00C0 0000                        MOVE.W  #0,(VDPDATA).L
000006E8                            
000006E8                            @WAITBGCLEAR:                          ; ...
000006E8 3215                                       MOVE.W  (A5),D1
000006EA 0801 0001                                  BTST    #1,D1
000006EE 66F8                                       BNE.S   @WAITBGCLEAR
000006F0 3ABC 8F02                                  MOVE.W  #$8F02,(A5)
000006F4 21FC 0000 0000 F616                        MOVE.L  #0,(VDP_SCREENPOSY).W
000006FC 21FC 0000 0000 F61A                        MOVE.L  #0,(VDP_SCREENPOSX).W
00000704 43F8 F800                                  LEA     (SPRITETABLE).W,A1
00000708 7000                                       MOVEQ   #0,D0
0000070A 323C 00A0                                  MOVE.W  #$A0,D1
0000070E                            
0000070E                            @CLEARSPRITES:                         ; ...
0000070E 22C0                                       MOVE.L  D0,(A1)+
00000710 51C9 FFFC                                  DBF     D1,@CLEARSPRITES
00000714 43F8 CC00                                  LEA     (HSCROLLTABLE).W,A1
00000718 7000                                       MOVEQ   #0,D0
0000071A 323C 0100                                  MOVE.W  #$100,D1
0000071E                            
0000071E                            @CLEARHSCROLL:                         ; ...
0000071E 22C0                                       MOVE.L  D0,(A1)+
00000720 51C9 FFFC                                  DBF     D1,@CLEARHSCROLL
00000724 4E75                                       RTS
00000726                            ; END OF FUNCTION CLEARSCREEN
00000726                            ; END OF FUNCTION CLEARSCREEN
00000726                            		INCLUDE		"SRC/SUB/DRAWTILEMAP.ASM"
00000726                            DrawTileMap:		;	SUBROUTINE
00000726 4DF9 00C0 0000                             lea     VDPDATA,a6
0000072C 283C 0080 0000                             move.l  #$800000,d4
00000732                            
00000732                            .LoopRow:                           
00000732 2D40 0004                                  move.l  d0,4(a6)    ; VDPCTRL
00000736 3601                                       move.w  d1,d3
00000738                            
00000738                            .LoopColumn: 
00000738 3C99                                       move.w  (a1)+,(a6)
0000073A 51CB FFFC                                  dbf     d3,.LoopColumn
0000073E D084                                       add.l   d4,d0
00000740 51CA FFF0                                  dbf     d2,.LoopRow
00000744 4E75                                       rts
00000744 4E75                                       rts
00000746                            		INCLUDE		"SRC/SUB/VSYNC.ASM"
00000746                            VSYNC:
00000746 46FC 2300                  		MOVE	#$2300,	SR
0000074A                            	@WAIT:
0000074A 4A38 F62A                  		TST.B	(VBLANKCMD).W
0000074E 66FA                       		BNE.S	@WAIT
00000750 4E75                       		RTS
00000750 4E75                       		RTS
00000752                            		INCLUDE		"SRC/SUB/PLAYSOUND.ASM"
00000752                            PlaySound:
00000752 13C0 FFFF F009             		move.b	d0,SOUNDPOKE
00000758 4E75                       		rts	
00000758 4E75                       		rts	
0000075A                            		
0000075A                            		INCLUDE		"SRC/GAMEMODE/LOGO.ASM"
0000075A                            LOGO:
0000075A 4EB9 0000 0698             		JSR		CLEARSCREEN
00000760 23FC 4000 0000 00C0 0004   		move.l	#VRAMWRITE,	(VDPCTRL)
0000076A 41F9 0000 0000             		LEA		LOGOART,	A0
00000770 43F9 00C0 0000             		LEA		VDPDATA,	A1
00000776 303C 061F                  		MOVE.W	#$61F,		D0
0000077A                            	@LOADGFX:
0000077A 3298                       		MOVE.W	(A0)+,	(A1)
0000077C 51C8 FFFC                  		DBF		D0,	@LOADGFX
00000780                            		
00000780 43F9 0000 0000 203C 661C+  	COPYTILEMAP		LOGOMAP,	$A61C,	11,	3
00000796 43F9 0000 0000 203C 461C+  	COPYTILEMAP		LOGOMAPB,	$861C,	11,	3
000007AC                            	
000007AC 103C 0000                  		move.b	#bgm_GHZ,d0
000007B0 6100 FFA0                  		bsr.w	PlaySound
000007B4                            	
000007B4 7000                       		MOVEQ	#0,	D0
000007B6                            	;	BSR.W	PALLOAD
000007B6 31FC 0070 F632             		MOVE.W	#112,	(PALCYCCURRENT).W
000007BC 33FC 0000 00FF F662        		MOVE.W	#0,	$FFF662
000007C4 33FC 0000 00FF F660        		MOVE.W	#0,	$FFF660
000007CC 33FC 0104 FFFF F614        		MOVE.W	#260,	TIMER
000007D4 3038 F60C                  		MOVE.W	(VDPBUFFER).W,	D0
000007D8 0000 0040                  		ORI.B	#%1000000,	D0
000007DC 33C0 00C0 0004             		MOVE.W	D0,	(VDPCTRL).L
000007E2                            		
000007E2                            	@LOOP:
000007E2 11FC 0001 F62A             		MOVE.B	#1,	(VBLANKCMD).W
000007E8 4EB9 0000 0746             		JSR		VSYNC
000007EE 6100 0000                  		BSR.W	_LOGO_PALCYC
000007F2 4A79 FFFF F614             		TST.W	TIMER
000007F8 6700                       		BEQ.S	@EXIT
000007FA 0239 0080 FFFF F605        		ANDI.B	#%10000000,	JOYPADPRESS
00000802 67DE                       		BEQ.S	@LOOP
00000804                            	@EXIT:
00000804                            	;	JSR		PALFADEOUT
00000836 13FC 0004 FFFF F600        		MOVE.B	#1*4,	GAMEMODE
0000083E 4E75                       		RTS
00000840                            		
00000840                            _LOGO_PALCYC:
00000840 5379 FFFF F634             		SUBQ.W	#1,	PALCYCTIMER
00000846 6A00                       		BPL.S	@EXIT
00000848 33FC 0003 FFFF F634        		MOVE.W	#3,	PALCYCTIMER
00000850 3039 FFFF F632             		MOVE.W	PALCYCCURRENT,	D0
00000856 6B00                       		BMI.S	@EXIT
00000858 5579 FFFF F632             		SUBQ.W	#2,	PALCYCCURRENT
0000085E 41F9 0000 0000             		LEA		LOGO_CYC,	A0
00000864 43F8 FB04                  		LEA		((PALETTE+$04)).W,	A1
00000868 D0C0                       		ADDA.W	D0,	A0
0000086A 22D8                       		MOVE.L	(A0)+,(A1)+
0000086C 22D8                       		MOVE.L	(A0)+,(A1)+
0000086E 22D8                       		MOVE.L	(A0)+,(A1)+
00000870 22D8                       		MOVE.L	(A0)+,(A1)+
00000872 22D8                       		MOVE.L	(A0)+,(A1)+
00000874 22D8                       		MOVE.L	(A0)+,(A1)+
00000876 41F9 0000 0000             		LEA		LOGO_CYCB,	A0
0000087C 43F8 FB24                  		LEA		((PALETTE+$24)).W,	A1
00000880 D0C0                       		ADDA.W	D0,	A0
00000882 22D8                       		MOVE.L	(A0)+,(A1)+
00000884 22D8                       		MOVE.L	(A0)+,(A1)+
00000886 22D8                       		MOVE.L	(A0)+,(A1)+
00000888 22D8                       		MOVE.L	(A0)+,(A1)+
0000088A 22D8                       		MOVE.L	(A0)+,(A1)+
0000088C 22D8                       		MOVE.L	(A0)+,(A1)+
0000088E                            	@EXIT:
0000088E 4E75                       		RTS
00000890                            		
00000890                            LOGOART:	INCBIN		"ART/LOGO.UNC"
000014B0                            LOGOMAP:	INCBIN		"MAP/LOGO.MAP"
00001510                            LOGOMAPB:	INCBIN		"MAP/LOGOB.MAP"
00001570                            LOGO_CYC:
00001570 0000                       		DC.W $000
00001572 0000                       		DC.W $000
00001574 0000                       		DC.W $000
00001576 0000                       		DC.W $000
00001578 0000                       		DC.W $000
0000157A 0000                       		DC.W $000
0000157C 0000                       		DC.W $000
0000157E 0000                       		DC.W $000
00001580 0000                       		DC.W $000
00001582 0000                       		DC.W $000
00001584 0000                       		DC.W $000
00001586 0200                       		DC.W $200
00001588 0400                       		DC.W $400
0000158A 0600                       		DC.W $600
0000158C 0800                       		DC.W $800
0000158E 0A00                       		DC.W $A00
00001590 0C00                       		DC.W $C00
00001592 0E00                       		DC.W $E00
00001594 0E20                       		DC.W $E20
00001596 0E40                       		DC.W $E40
00001598 0E60                       		DC.W $E60
0000159A 0E80                       		DC.W $E80
0000159C 0EA0                       		DC.W $EA0
0000159E 0EC0                       		DC.W $EC0
000015A0 0EA0                       		DC.W $EA0
000015A2 0E80                       		DC.W $E80
000015A4 0E60                       		DC.W $E60
000015A6 0E40                       		DC.W $E40
000015A8 0E20                       		DC.W $E20
000015AA 0E00                       		DC.W $E00
000015AC 0C00                       		DC.W $C00
000015AE 0A00                       		DC.W $A00
000015B0 0800                       		DC.W $800
000015B2 0600                       		DC.W $600
000015B4 0800                       		DC.W $800
000015B6 0A00                       		DC.W $A00
000015B8 0C00                       		DC.W $C00
000015BA 0E00                       		DC.W $E00
000015BC 0E20                       		DC.W $E20
000015BE 0E40                       		DC.W $E40
000015C0 0E60                       		DC.W $E60
000015C2 0E80                       		DC.W $E80
000015C4 0EA0                       		DC.W $EA0
000015C6 0EC0                       		DC.W $EC0
000015C8 0EA0                       		DC.W $EA0
000015CA 0E80                       		DC.W $E80
000015CC 0E60                       		DC.W $E60
000015CE 0E40                       		DC.W $E40
000015D0 0E20                       		DC.W $E20
000015D2 0E00                       		DC.W $E00
000015D4 0C00                       		DC.W $C00
000015D6 0A00                       		DC.W $A00
000015D8 0800                       		DC.W $800
000015DA 0600                       		DC.W $600
000015DC 0400                       		DC.W $400
000015DE 0200                       		DC.W $200
000015E0 0000                       		DC.W $000
000015E2 0000                       		DC.W $000
000015E4 0000                       		DC.W $000
000015E6 0000                       		DC.W $000
000015E8 0000                       		DC.W $000
000015EA 0000                       		DC.W $000
000015EC 0000                       		DC.W $000
000015EE 0000                       		DC.W $000
000015F0 0000                       		DC.W $000
000015F2 0000                       		DC.W $000
000015F4 0000                       		DC.W $000
000015F6                            LOGO_CYCB:
000015F6 0000                       		DC.W $000
000015F8 0000                       		DC.W $000
000015FA 0000                       		DC.W $000
000015FC 0000                       		DC.W $000
000015FE 0000                       		DC.W $000
00001600 0000                       		DC.W $000
00001602 0000                       		DC.W $000
00001604 0000                       		DC.W $000
00001606 0000                       		DC.W $000
00001608 0000                       		DC.W $000
0000160A 0000                       		DC.W $000
0000160C 0200                       		DC.W $200
0000160E 0422                       		DC.W $422
00001610 0644                       		DC.W $644
00001612 0866                       		DC.W $866
00001614 0A88                       		DC.W $A88
00001616 0CAA                       		DC.W $CAA
00001618 0ECC                       		DC.W $ECC
0000161A 0EEE                       		DC.W $EEE
0000161C 0EEE                       		DC.W $EEE
0000161E 0EEE                       		DC.W $EEE
00001620 0EEE                       		DC.W $EEE
00001622 0EEE                       		DC.W $EEE
00001624 0EEE                       		DC.W $EEE
00001626 0EEE                       		DC.W $EEE
00001628 0EEE                       		DC.W $EEE
0000162A 0EEE                       		DC.W $EEE
0000162C 0EEE                       		DC.W $EEE
0000162E 0EEE                       		DC.W $EEE
00001630 0EEE                       		DC.W $EEE
00001632 0EEE                       		DC.W $EEE
00001634 0EEE                       		DC.W $EEE
00001636 0EEE                       		DC.W $EEE
00001638 0EEE                       		DC.W $EEE
0000163A 0EEE                       		DC.W $EEE
0000163C 0EEE                       		DC.W $EEE
0000163E 0EEE                       		DC.W $EEE
00001640 0EEE                       		DC.W $EEE
00001642 0EEE                       		DC.W $EEE
00001644 0EEE                       		DC.W $EEE
00001646 0EEE                       		DC.W $EEE
00001648 0EEE                       		DC.W $EEE
0000164A 0EEE                       		DC.W $EEE
0000164C 0EEE                       		DC.W $EEE
0000164E 0EEE                       		DC.W $EEE
00001650 0EEE                       		DC.W $EEE
00001652 0EEE                       		DC.W $EEE
00001654 0EEE                       		DC.W $EEE
00001656 0EEE                       		DC.W $EEE
00001658 0ECC                       		DC.W $ECC
0000165A 0CAA                       		DC.W $CAA
0000165C 0A88                       		DC.W $A88
0000165E 0866                       		DC.W $866
00001660 0644                       		DC.W $644
00001662 0422                       		DC.W $422
00001664 0200                       		DC.W $200
00001666 0000                       		DC.W $000
00001668 0000                       		DC.W $000
0000166A 0000                       		DC.W $000
0000166C 0000                       		DC.W $000
0000166E 0000                       		DC.W $000
00001670 0000                       		DC.W $000
00001672 0000                       		DC.W $000
00001674 0000                       		DC.W $000
00001676 0000                       		DC.W $000
00001678 0000                       		DC.W $000
0000167A 0000                       		DC.W $000
0000167A 0000                       		DC.W $000
0000167C                            		
0000167C                            	ALIGN	$2000
00002000                            		include	"SOUND/driver.asm"
00002000                            ; ---------------------------------------------------------------------------
00002000                            ; Modified SMPS 68k Type 1b sound driver
00002000                            ; ---------------------------------------------------------------------------
00002000                            ; Go_SoundTypes:
00002000 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00002004                            ; Go_SoundD0:
00002004 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00002008 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0000200C 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00002010                            ; off_719A0:
00002010 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00002014 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00002018                            ; ---------------------------------------------------------------------------
00002018                            ; PSG instruments used in music
00002018                            ; ---------------------------------------------------------------------------
00002018                            PSG_Index:
00002018 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00002024 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00002030 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0000203C                            PSG1:		incbin	"sound/psg/psg1.bin"
00002053                            PSG2:		incbin	"sound/psg/psg2.bin"
0000205A                            PSG3:		incbin	"sound/psg/psg3.bin"
0000206B                            PSG4:		incbin	"sound/psg/psg4.bin"
00002076                            PSG6:		incbin	"sound/psg/psg6.bin"
00002085                            PSG5:		incbin	"sound/psg/psg5.bin"
000020AF                            PSG7:		incbin	"sound/psg/psg7.bin"
000020CB                            PSG8:		incbin	"sound/psg/psg8.bin"
000020F3                            PSG9:		incbin	"sound/psg/psg9.bin"
00002104                            ; ---------------------------------------------------------------------------
00002104                            ; New tempos for songs during speed shoes
00002104                            ; ---------------------------------------------------------------------------
00002104                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00002104                            ; tempos while speed shoes are active. If you don't want that, you should add
00002104                            ; their "correct" sped-up main tempos to the list.
00002104                            ; byte_71A94:
00002104                            SpeedUpIndex:
00002104 07                         		dc.b 7		; GHZ
00002105 72                         		dc.b $72	; LZ
00002106 73                         		dc.b $73	; MZ
00002107 26                         		dc.b $26	; SLZ
00002108 15                         		dc.b $15	; SYZ
00002109 08                         		dc.b 8		; SBZ
0000210A FF                         		dc.b $FF	; Invincibility
0000210B 05                         		dc.b 5		; Extra Life
0000210C                            		;dc.b ?		; Special Stage
0000210C                            		;dc.b ?		; Title Screen
0000210C                            		;dc.b ?		; Ending
0000210C                            		;dc.b ?		; Boss
0000210C                            		;dc.b ?		; FZ
0000210C                            		;dc.b ?		; Sonic Got Through
0000210C                            		;dc.b ?		; Game Over
0000210C                            		;dc.b ?		; Continue Screen
0000210C                            		;dc.b ?		; Credits
0000210C                            		;dc.b ?		; Drowning
0000210C                            		;dc.b ?		; Get Emerald
0000210C                            
0000210C                            ; ---------------------------------------------------------------------------
0000210C                            ; Music	Pointers
0000210C                            ; ---------------------------------------------------------------------------
0000210C                            MusicIndex:
0000210C 0000 0000                  ptr_mus81:	dc.l Music81
00002110 0000 0000                  ptr_mus82:	dc.l Music82
00002114 0000 0000                  ptr_mus83:	dc.l Music83
00002118 0000 0000                  ptr_mus84:	dc.l Music84
0000211C 0000 0000                  ptr_mus85:	dc.l Music85
00002120 0000 0000                  ptr_mus86:	dc.l Music86
00002124 0000 0000                  ptr_mus87:	dc.l Music87
00002128 0000 0000                  ptr_mus88:	dc.l Music88
0000212C 0000 0000                  ptr_mus89:	dc.l Music89
00002130 0000 0000                  ptr_mus8A:	dc.l Music8A
00002134 0000 0000                  ptr_mus8B:	dc.l Music8B
00002138 0000 0000                  ptr_mus8C:	dc.l Music8C
0000213C 0000 0000                  ptr_mus8D:	dc.l Music8D
00002140 0000 0000                  ptr_mus8E:	dc.l Music8E
00002144 0000 0000                  ptr_mus8F:	dc.l Music8F
00002148 0000 0000                  ptr_mus90:	dc.l Music90
0000214C 0000 0000                  ptr_mus91:	dc.l Music91
00002150 0000 0000                  ptr_mus92:	dc.l Music92
00002154 0000 0000                  ptr_mus93:	dc.l Music93
00002158                            ptr_musend
00002158                            ; ---------------------------------------------------------------------------
00002158                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00002158                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00002158                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00002158                            ; any music or SFX can override it (as long as it can override whatever was
00002158                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00002158                            ; will only override special SFX and music will only override music.
00002158                            ; ---------------------------------------------------------------------------
00002158                            ; SoundTypes:
00002158                            SoundPriorities:
00002158 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00002167 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00002177 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00002187 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00002197 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000021A7 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000021B7 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000021BC                            
000021BC                            ; ---------------------------------------------------------------------------
000021BC                            ; Subroutine to update music more than once per frame
000021BC                            ; (Called by horizontal & vert. interrupts)
000021BC                            ; ---------------------------------------------------------------------------
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            ; sub_71B4C:
000021BC                            UpdateMusic:
000021BC 33FC 0100 00A1 1100        		stopZ80
000021C4 4E71                       		nop	
000021C6 4E71                       		nop	
000021C8 4E71                       		nop	
000021CA                            ; loc_71B5A:
000021CA                            @updateloop:
000021CA 0839 0000 00A1 1100        		btst	#0,(Z80BUS).l		; Is the z80 busy?
000021D2 66F6                       		bne.s	@updateloop			; If so, wait
000021D4                            
000021D4 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
000021DC 6700                       		beq.s	@driverinput			; Branch if yes
000021DE 33FC 0000 00A1 1100        		startZ80
000021E6 4E71                       		nop	
000021E8 4E71                       		nop	
000021EA 4E71                       		nop	
000021EC 4E71                       		nop	
000021EE 4E71                       		nop	
000021F0 60CA                       		bra.s	UpdateMusic
000021F2                            ; ===========================================================================
000021F2                            ; loc_71B82:
000021F2                            @driverinput:
000021F2 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000021F8 422E 000E                  		clr.b	f_voice_selector(a6)
000021FC 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00002200 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00002204 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00002208 6600                       		bne.s	@skipdelay
0000220A 4EBA 0000                  		jsr	TempoWait(pc)
0000220E                            ; loc_71B9E:
0000220E                            @skipdelay:
0000220E 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00002212 6700                       		beq.s	@skipfadeout
00002214 4EBA 0000                  		jsr	DoFadeOut(pc)
00002218                            ; loc_71BA8:
00002218                            @skipfadeout:
00002218 4A2E 0024                  		tst.b	f_fadein_flag(a6)
0000221C 6700                       		beq.s	@skipfadein
0000221E 4EBA 0000                  		jsr	DoFadeIn(pc)
00002222                            ; loc_71BB2:
00002222                            @skipfadein:
00002222                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00002222 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for playing?
00002226 6700                       		beq.s	@nosndinput		; if not, branch
00002228 4EBA 0000                  		jsr	CycleSoundQueue(pc)
0000222C                            ; loc_71BBC:
0000222C                            @nosndinput:
0000222C 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00002232 6700                       		beq.s	@nonewsound		; If yes, branch
00002234 4EBA 0000                  		jsr	PlaySoundID(pc)
00002238                            ; loc_71BC8:
00002238                            @nonewsound:
00002238 4BEE 0040                  		lea	v_music_dac_track(a6),a5
0000223C 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
0000223E 6A00                       		bpl.s	@dacdone		; Branch if not
00002240 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00002244                            ; loc_71BD4:
00002244                            @dacdone:
00002244 422E 0008                  		clr.b	f_updating_dac(a6)
00002248 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0000224A                            ; loc_71BDA:
0000224A                            @bgmfmloop:
0000224A DAFC 0030                  		adda.w	#TrackSz,a5
0000224E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002250 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00002252 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00002256                            ; loc_71BE6:
00002256                            @bgmfmnext:
00002256 51CF FFF2                  		dbf	d7,@bgmfmloop
0000225A                            
0000225A 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
0000225C                            ; loc_71BEC:
0000225C                            @bgmpsgloop:
0000225C DAFC 0030                  		adda.w	#TrackSz,a5
00002260 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002262 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00002264 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00002268                            ; loc_71BF8:
00002268                            @bgmpsgnext:
00002268 51CF FFF2                  		dbf	d7,@bgmpsgloop
0000226C                            
0000226C 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00002272 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00002274                            ; loc_71C04:
00002274                            @sfxfmloop:
00002274 DAFC 0030                  		adda.w	#TrackSz,a5
00002278 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0000227A 6A00                       		bpl.s	@sfxfmnext		; Branch if not
0000227C 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00002280                            ; loc_71C10:
00002280                            @sfxfmnext:
00002280 51CF FFF2                  		dbf	d7,@sfxfmloop
00002284                            
00002284 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00002286                            ; loc_71C16:
00002286                            @sfxpsgloop:
00002286 DAFC 0030                  		adda.w	#TrackSz,a5
0000228A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0000228C 6A00                       		bpl.s	@sfxpsgnext		; Branch if not
0000228E 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00002292                            ; loc_71C22:
00002292                            @sfxpsgnext:
00002292 51CF FFF2                  		dbf	d7,@sfxpsgloop
00002296                            		
00002296 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
0000229C DAFC 0030                  		adda.w	#TrackSz,a5
000022A0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000022A2 6A00                       		bpl.s	@specfmdone		; Branch if not
000022A4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000022A8                            ; loc_71C38:
000022A8                            @specfmdone:
000022A8 DAFC 0030                  		adda.w	#TrackSz,a5
000022AC 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000022AE 6A00                       		bpl.s	DoStartZ80		; Branch if not
000022B0 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000022B4                            ; loc_71C44:
000022B4                            DoStartZ80:
000022B4 33FC 0000 00A1 1100        		startZ80
000022BC 4E75                       		rts	
000022BE                            ; End of function UpdateMusic
000022BE                            
000022BE                            
000022BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022BE                            
000022BE                            ; sub_71C4E: UpdateDAC:
000022BE                            DACUpdateTrack:
000022BE 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
000022C2 6600                       		bne.s	@locret				; Return if not
000022C4 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
000022CA                            ;DACDoNext:
000022CA 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
000022CE                            ; loc_71C5E:
000022CE                            @sampleloop:
000022CE 7A00                       		moveq	#0,d5
000022D0 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
000022D2 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000022D6 6500                       		blo.s	@notcoord	; Branch if not
000022D8 4EBA 0000                  		jsr	CoordFlag(pc)
000022DC 60F0                       		bra.s	@sampleloop
000022DE                            ; ===========================================================================
000022DE                            ; loc_71C6E:
000022DE                            @notcoord:
000022DE 4A05                       		tst.b	d5			; Is it a sample?
000022E0 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
000022E2 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
000022E6 1A1C                       		move.b	(a4)+,d5		; Get another byte
000022E8 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
000022EA 534C                       		subq.w	#1,a4			; Put byte back
000022EC 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
000022F2 6000                       		bra.s	@gotsampleduration
000022F4                            ; ===========================================================================
000022F4                            ; loc_71C84:
000022F4                            @gotduration:
000022F4 4EBA 0000                  		jsr	SetDuration(pc)
000022F8                            ; loc_71C88:
000022F8                            @gotsampleduration:
000022F8 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
000022FC 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00002300 6600                       		bne.s	@locret			; Return if yes
00002302 7000                       		moveq	#0,d0
00002304 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00002308 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
0000230C 6700                       		beq.s	@locret			; Return if yes
0000230E 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00002312 6600                       		bne.s	@timpani		; Various timpani
00002314 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
0000231A                            ; locret_71CAA:
0000231A                            @locret:
0000231A 4E75                       		rts	
0000231C                            ; ===========================================================================
0000231C                            ; loc_71CAC:
0000231C                            @timpani:
0000231C 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00002320 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00002324                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00002324                            		; use this value from then on.
00002324 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
0000232A 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00002332 4E75                       		rts	
00002334                            ; End of function DACUpdateTrack
00002334                            
00002334                            ; ===========================================================================
00002334                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00002334                            ; Also, $8C-$8D are so slow you may want to skip them.
00002334                            ; byte_71CC4:
00002334 1215 1C1D FFFF             DAC_sample_rate: dc.b $12, $15, $1C, $1D, $FF, $FF
0000233A                            
0000233A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233A                            
0000233A                            ; sub_71CCA:
0000233A                            FMUpdateTrack:
0000233A 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
0000233E 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00002340 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00002344 4EBA 0000                  		jsr	FMDoNext(pc)
00002348 4EBA 0000                  		jsr	FMPrepareNote(pc)
0000234C 6000 0000                  		bra.w	FMNoteOn
00002350                            ; ===========================================================================
00002350                            ; loc_71CE0:
00002350                            @notegoing:
00002350 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00002354 4EBA 0000                  		jsr	DoModulation(pc)
00002358 6000 0000                  		bra.w	FMUpdateFreq
0000235C                            ; End of function FMUpdateTrack
0000235C                            
0000235C                            
0000235C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000235C                            
0000235C                            ; sub_71CEC:
0000235C                            FMDoNext:
0000235C 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00002360 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00002364                            ; loc_71CF4:
00002364                            @noteloop:
00002364 7A00                       		moveq	#0,d5
00002366 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00002368 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
0000236C 6500                       		blo.s	@gotnote	; Branch if not
0000236E 4EBA 0000                  		jsr	CoordFlag(pc)
00002372 60F0                       		bra.s	@noteloop
00002374                            ; ===========================================================================
00002374                            ; loc_71D04:
00002374                            @gotnote:
00002374 4EBA 0000                  		jsr	FMNoteOff(pc)
00002378 4A05                       		tst.b	d5		; Is this a note?
0000237A 6A00                       		bpl.s	@gotduration	; Branch if not
0000237C 4EBA 0000                  		jsr	FMSetFreq(pc)
00002380 1A1C                       		move.b	(a4)+,d5	; Get another byte
00002382 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00002384 534C                       		subq.w	#1,a4		; Otherwise, put it back
00002386 6000 0000                  		bra.w	FinishTrackUpdate
0000238A                            ; ===========================================================================
0000238A                            ; loc_71D1A:
0000238A                            @gotduration:
0000238A 4EBA 0000                  		jsr	SetDuration(pc)
0000238E 6000 0000                  		bra.w	FinishTrackUpdate
00002392                            ; End of function FMDoNext
00002392                            
00002392                            
00002392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002392                            
00002392                            ; sub_71D22:
00002392                            FMSetFreq:
00002392 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00002396 6700                       		beq.s	TrackSetRest
00002398 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
0000239C 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
000023A0 E34D                       		lsl.w	#1,d5
000023A2 41FA 0000                  		lea	FMFrequencies(pc),a0
000023A6 3C30 5000                  		move.w	(a0,d5.w),d6
000023AA 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
000023AE 4E75                       		rts	
000023B0                            ; End of function FMSetFreq
000023B0                            
000023B0                            
000023B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023B0                            
000023B0                            ; sub_71D40:
000023B0                            SetDuration:
000023B0 1005                       		move.b	d5,d0
000023B2 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
000023B6                            ; loc_71D46:
000023B6                            @multloop:
000023B6 5301                       		subq.b	#1,d1
000023B8 6700                       		beq.s	@donemult
000023BA D005                       		add.b	d5,d0
000023BC 60F8                       		bra.s	@multloop
000023BE                            ; ===========================================================================
000023BE                            ; loc_71D4E:
000023BE                            @donemult:
000023BE 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
000023C2 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
000023C6 4E75                       		rts	
000023C8                            ; End of function SetDuration
000023C8                            
000023C8                            ; ===========================================================================
000023C8                            ; loc_71D58:
000023C8                            TrackSetRest:
000023C8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000023CC 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
000023D0                            
000023D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023D0                            
000023D0                            ; sub_71D60:
000023D0                            FinishTrackUpdate:
000023D0 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
000023D4 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
000023DA 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
000023DE 6600                       		bne.s	@locret				; If so, branch
000023E0 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
000023E6 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
000023EA 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
000023EE 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
000023F0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
000023F4 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
000023F8 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
000023FC 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00002400 1018                       		move.b	(a0)+,d0			; Get steps
00002402 E208                       		lsr.b	#1,d0				; Halve them
00002404 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00002408 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
0000240C                            ; locret_71D9C:
0000240C                            @locret:
0000240C 4E75                       		rts	
0000240E                            ; End of function FinishTrackUpdate
0000240E                            
0000240E                            
0000240E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000240E                            
0000240E                            ; sub_71D9E: NoteFillUpdate
0000240E                            NoteTimeoutUpdate:
0000240E 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00002412 6700                       		beq.s	@locret
00002414 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00002418 6600                       		bne.s	@locret				; Return if it hasn't expired
0000241A 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
0000241E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a PSG track?
00002422 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00002426 4EBA 0000                  		jsr	FMNoteOff(pc)
0000242A 584F                       		addq.w	#4,sp				; Do not return to caller
0000242C 4E75                       		rts	
0000242E                            ; ===========================================================================
0000242E                            ; loc_71DBE:
0000242E                            @psgnoteoff:
0000242E 4EBA 0000                  		jsr	PSGNoteOff(pc)
00002432 584F                       		addq.w	#4,sp		; Do not return to caller
00002434                            ; locret_71DC4:
00002434                            @locret:
00002434 4E75                       		rts	
00002436                            ; End of function NoteTimeoutUpdate
00002436                            
00002436                            
00002436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002436                            
00002436                            ; sub_71DC6:
00002436                            DoModulation:
00002436 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00002438 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
0000243C 6700                       		beq.s	@locret				; Return if not
0000243E 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00002442 6700                       		beq.s	@waitdone			; If yes, branch
00002444 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00002448 4E75                       		rts	
0000244A                            ; ===========================================================================
0000244A                            ; loc_71DDA:
0000244A                            @waitdone:
0000244A 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
0000244E 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00002450 4E75                       		rts	
00002452                            ; ===========================================================================
00002452                            ; loc_71DE2:
00002452                            @updatemodulation:
00002452 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00002456 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
0000245C 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00002460 6600                       		bne.s	@calcfreq			; If nonzero, branch
00002462 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00002468 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
0000246C 4E75                       		rts	
0000246E                            ; ===========================================================================
0000246E                            ; loc_71DFE:
0000246E                            @calcfreq:
0000246E 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00002472 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00002476 4886                       		ext.w	d6
00002478 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
0000247C 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00002480 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00002484 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00002486                            ; locret_71E16:
00002486                            @locret:
00002486 4E75                       		rts	
00002488                            ; End of function DoModulation
00002488                            
00002488                            
00002488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002488                            
00002488                            ; sub_71E18:
00002488                            FMPrepareNote:
00002488 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
0000248C 6600                       		bne.s	locret_71E48		; Return if so
0000248E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00002492 6700                       		beq.s	FMSetRest		; Branch if zero
00002494                            ; loc_71E24:
00002494                            FMUpdateFreq:
00002494 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00002498 4880                       		ext.w	d0
0000249A DC40                       		add.w	d0,d6			; Add note frequency
0000249C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000024A0 6600                       		bne.s	locret_71E48		; Return if so
000024A2 3206                       		move.w	d6,d1
000024A4 E049                       		lsr.w	#8,d1
000024A6 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
000024AA 4EBA 0000                  		jsr	WriteFMIorII(pc)
000024AE 1206                       		move.b	d6,d1
000024B0 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
000024B4 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
000024B8                            ; locret_71E48:
000024B8                            locret_71E48:
000024B8 4E75                       		rts	
000024BA                            ; ===========================================================================
000024BA                            ; loc_71E4A:
000024BA                            FMSetRest:
000024BA 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000024BE 4E75                       		rts	
000024C0                            ; End of function FMPrepareNote
000024C0                            
000024C0                            ; ===========================================================================
000024C0                            ; loc_71E50:
000024C0                            PauseMusic:
000024C0 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
000024C2 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
000024C8 6700 0000                  		beq.w	@unpausedallfm
000024CC 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
000024D2 7602                       		moveq	#2,d3
000024D4 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
000024D8 7200                       		moveq	#0,d1		; No panning, AMS or FMS
000024DA                            ; loc_71E6A:
000024DA                            @killpanloop:
000024DA 4EBA 0000                  		jsr	WriteFMI(pc)
000024DE 4EBA 0000                  		jsr	WriteFMII(pc)
000024E2 5200                       		addq.b	#1,d0
000024E4 51CB FFF4                  		dbf	d3,@killpanloop
000024E8                            
000024E8 7602                       		moveq	#2,d3
000024EA 7028                       		moveq	#$28,d0		; Key on/off register
000024EC                            ; loc_71E7C:
000024EC                            @noteoffloop:
000024EC 1203                       		move.b	d3,d1		; FM1, FM2, FM3
000024EE 4EBA 0000                  		jsr	WriteFMI(pc)
000024F2 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000024F4 4EBA 0000                  		jsr	WriteFMI(pc)
000024F8 51CB FFF2                  		dbf	d3,@noteoffloop
000024FC                            
000024FC 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00002500 6000 FDB2                  		bra.w	DoStartZ80
00002504                            ; ===========================================================================
00002504                            ; loc_71E94:
00002504                            @unpausemusic:
00002504 422E 0003                  		clr.b	f_pausemusic(a6)
00002508 7630                       		moveq	#TrackSz,d3
0000250A 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
0000250E 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00002510                            ; loc_71EA0:
00002510                            @bgmfmloop:
00002510 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00002514 6700                       		beq.s	@bgmfmnext		; Branch if not
00002516 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0000251A 6600                       		bne.s	@bgmfmnext		; Branch if yes
0000251C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00002520 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00002524 4EBA 0000                  		jsr	WriteFMIorII(pc)
00002528                            ; loc_71EB8:
00002528                            @bgmfmnext:
00002528 DAC3                       		adda.w	d3,a5
0000252A 51CC FFE4                  		dbf	d4,@bgmfmloop
0000252E                            
0000252E 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00002532 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00002534                            ; loc_71EC4:
00002534                            @sfxfmloop:
00002534 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00002538 6700                       		beq.s	@sfxfmnext		; Branch if not
0000253A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0000253E 6600                       		bne.s	@sfxfmnext		; Branch if yes
00002540 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00002544 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00002548 4EBA 0000                  		jsr	WriteFMIorII(pc)
0000254C                            ; loc_71EDC:
0000254C                            @sfxfmnext:
0000254C DAC3                       		adda.w	d3,a5
0000254E 51CC FFE4                  		dbf	d4,@sfxfmloop
00002552                            
00002552 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00002556 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
0000255A 6700                       		beq.s	@unpausedallfm		; Branch if not
0000255C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00002560 6600                       		bne.s	@unpausedallfm		; Branch if yes
00002562 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00002566 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
0000256A 4EBA 0000                  		jsr	WriteFMIorII(pc)
0000256E                            ; loc_71EFE:
0000256E                            @unpausedallfm:
0000256E 6000 FD44                  		bra.w	DoStartZ80
00002572                            
00002572                            ; ---------------------------------------------------------------------------
00002572                            ; Subroutine to	play a sound or	music track
00002572                            ; ---------------------------------------------------------------------------
00002572                            
00002572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002572                            
00002572                            ; Sound_Play:
00002572                            CycleSoundQueue:
00002572 2079 0000 2000             		movea.l	(Go_SoundPriorities).l,a0
00002578 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
0000257C 162E 0000                  		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00002580 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00002582                            ; loc_71F12:
00002582                            @inputloop:
00002582 1011                       		move.b	(a1),d0			; move track number to d0
00002584 1200                       		move.b	d0,d1
00002586 4219                       		clr.b	(a1)+			; Clear entry
00002588 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
0000258C 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
0000258E 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00002594 6700                       		beq.s	@havesound		; If yes, branch
00002596 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
0000259A 6000                       		bra.s	@nextinput
0000259C                            ; ===========================================================================
0000259C                            ; loc_71F2C:
0000259C                            @havesound:
0000259C 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
000025A0 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
000025A4 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
000025A6 6500                       		blo.s	@nextinput		; Branch if yes
000025A8 1602                       		move.b	d2,d3			; Store new priority
000025AA 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for playing
000025AE                            ; loc_71F3E:
000025AE                            @nextinput:
000025AE 51CC FFD2                  		dbf	d4,@inputloop
000025B2                            
000025B2 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
000025B4 6B00                       		bmi.s	@locret
000025B6 1D43 0000                  		move.b	d3,v_sndprio(a6)	; Set new sound priority
000025BA                            ; locret_71F4A:
000025BA                            @locret:
000025BA 4E75                       		rts	
000025BC                            ; End of function CycleSoundQueue
000025BC                            
000025BC                            
000025BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000025BC                            
000025BC                            ; Sound_ChkValue:
000025BC                            PlaySoundID:
000025BC 7E00                       		moveq	#0,d7
000025BE 1E2E 0009                  		move.b	v_sound_id(a6),d7
000025C2 6700 0000                  		beq.w	StopAllSound
000025C6 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
000025C8 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
000025CE                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
000025CE                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
000025CE                            		; See LevSel_NoCheat for more.
000025CE 0C07 0000                  		cmpi.b	#bgm__Last+$C,d7	; Is this music ($81-$9F)?
000025D2 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
000025D6 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
000025DA 6500 0000                  		blo.w	@locret			; Return if yes
000025DE 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
000025E2 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
000025E6 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
000025EA 6500 0000                  		blo.w	@locret			; Return if yes
000025EE                            		; DANGER! Special SFXes end at $D0, yet this checks until $DF; attempting to
000025EE                            		; play sounds $D1-$DF will cause a crash! Remove the '+$10' and change the 'blo' to a 'bls'
000025EE                            		; and uncomment the two lines below to fix this.
000025EE 0C07 0000                  		cmpi.b	#spec__Last+$10,d7	; Is this special sfx ($D0-$DF)?
000025F2 6500 0000                  		blo.w	Sound_PlaySpecial	; Branch if yes
000025F6                            		;cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000025F6                            		;blo.w	@locret			; Return if yes
000025F6 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000025FA 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000025FC                            ; locret_71F8C:
000025FC                            @locret:
000025FC 4E75                       		rts	
000025FE                            ; ===========================================================================
000025FE                            
000025FE                            Sound_E0toE4:
000025FE 0407 00E0                  		subi.b	#flg__First,d7
00002602 E54F                       		lsl.w	#2,d7
00002604 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00002608                            ; ===========================================================================
00002608                            
00002608                            Sound_ExIndex:
00002608 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
0000260C 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00002610 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00002614 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00002618 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
0000261C                            ptr_flgend
0000261C                            ; ===========================================================================
0000261C                            ; ---------------------------------------------------------------------------
0000261C                            ; Play "Say-gaa" PCM sound
0000261C                            ; ---------------------------------------------------------------------------
0000261C                            ; Sound_E1: PlaySega:
0000261C                            PlaySegaSound:
0000261C 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00002624 33FC 0000 00A1 1100        		startZ80
0000262C 323C 0011                  		move.w	#$11,d1
00002630                            ; loc_71FC0:
00002630                            @busyloop_outer:
00002630 303C FFFF                  		move.w	#-1,d0
00002634                            ; loc_71FC4:
00002634                            @busyloop:
00002634 4E71                       		nop	
00002636 51C8 FFFC                  		dbf	d0,@busyloop
0000263A                            
0000263A 51C9 FFF4                  		dbf	d1,@busyloop_outer
0000263E                            
0000263E 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00002640 4E75                       		rts	
00002642                            ; ===========================================================================
00002642                            ; ---------------------------------------------------------------------------
00002642                            ; Play music track $81-$9F
00002642                            ; ---------------------------------------------------------------------------
00002642                            ; Sound_81to9F:
00002642                            Sound_PlayBGM:
00002642 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00002646 6600                       		bne.s	@bgmnot1up		; if not, branch
00002648 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
0000264C 6600 0000                  		bne.w	@locdblret		; if yes, branch
00002650 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00002654 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00002656                            ; loc_71FE6:
00002656                            @clearsfxloop:
00002656 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0000265A DAFC 0030                  		adda.w	#TrackSz,a5
0000265E 51C8 FFF6                  		dbf	d0,@clearsfxloop
00002662                            
00002662 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00002666 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00002668                            ; loc_71FF8:
00002668                            @cleartrackplayloop:
00002668 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
0000266C DAFC 0030                  		adda.w	#TrackSz,a5
00002670 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00002674                            
00002674 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
00002678 204E                       		movea.l	a6,a0
0000267A 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
0000267E 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00002682                            ; loc_72012:
00002682                            @backupramloop:
00002682 22D8                       		move.l	(a0)+,(a1)+
00002684 51C8 FFFC                  		dbf	d0,@backupramloop
00002688                            
00002688 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
0000268E 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority again (?)
00002692 6000                       		bra.s	@bgm_loadMusic
00002694                            ; ===========================================================================
00002694                            ; loc_72024:
00002694                            @bgmnot1up:
00002694 422E 0027                  		clr.b	f_1up_playing(a6)
00002698 422E 0026                  		clr.b	v_fadein_counter(a6)
0000269C                            ; loc_7202C:
0000269C                            @bgm_loadMusic:
0000269C 4EBA 0000                  		jsr	InitMusicPlayback(pc)
000026A0 2879 0000 2010             		movea.l	(Go_SpeedUpIndex).l,a4
000026A6 0407 0081                  		subi.b	#bgm__First,d7
000026AA 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
000026B0 2879 0000 2008             		movea.l	(Go_MusicIndex).l,a4
000026B6 E54F                       		lsl.w	#2,d7
000026B8 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
000026BC 7000                       		moveq	#0,d0
000026BE 3014                       		move.w	(a4),d0			; load voice pointer
000026C0 D08C                       		add.l	a4,d0			; It is a relative pointer
000026C2 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
000026C6 102C 0005                  		move.b	5(a4),d0		; load tempo
000026CA 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
000026CE 4A2E 002A                  		tst.b	f_speedup(a6)
000026D2 6700                       		beq.s	@nospeedshoes
000026D4 102E 0029                  		move.b	v_speeduptempo(a6),d0
000026D8                            ; loc_72068:
000026D8                            @nospeedshoes:
000026D8 1D40 0002                  		move.b	d0,v_main_tempo(a6)
000026DC 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
000026E0 7200                       		moveq	#0,d1
000026E2 264C                       		movea.l	a4,a3
000026E4 5C4C                       		addq.w	#6,a4			; Point past header
000026E6 7E00                       		moveq	#0,d7
000026E8 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
000026EC 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
000026F0 5307                       		subq.b	#1,d7
000026F2 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
000026F6 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
000026FA 7C30                       		moveq	#TrackSz,d6
000026FC 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00002700 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00002704 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00002708                            ; loc_72098:
00002708                            @bgm_fmloadloop:
00002708 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
0000270C 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00002710 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00002714 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
00002718 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
0000271C 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00002720 7000                       		moveq	#0,d0
00002722 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00002724 D08B                       		add.l	a3,d0				; Relative pointer
00002726 2340 0004                  		move.l	d0,TrackDataPointer(a1)		; Store track pointer
0000272A 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
0000272E D2C6                       		adda.w	d6,a1
00002730 51CF FFD6                  		dbf	d7,@bgm_fmloadloop
00002734                            		
00002734 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
0000273A 6600                       		bne.s	@silencefm6
0000273C 702B                       		moveq	#$2B,d0		; DAC enable/disable register
0000273E 7200                       		moveq	#0,d1		; Disable DAC
00002740 4EBA 0000                  		jsr	WriteFMI(pc)
00002744 6000 0000                  		bra.w	@bgm_fmdone
00002748                            ; ===========================================================================
00002748                            ; loc_720D8:
00002748                            @silencefm6:
00002748 7028                       		moveq	#$28,d0		; Key on/off register
0000274A 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
0000274C 4EBA 0000                  		jsr	WriteFMI(pc)
00002750 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00002754 727F                       		moveq	#$7F,d1		; Total silence
00002756 4EBA 0000                  		jsr	WriteFMII(pc)
0000275A 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
0000275E 727F                       		moveq	#$7F,d1		; Total silence
00002760 4EBA 0000                  		jsr	WriteFMII(pc)
00002764 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00002768 727F                       		moveq	#$7F,d1		; Total silence
0000276A 4EBA 0000                  		jsr	WriteFMII(pc)
0000276E 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00002772 727F                       		moveq	#$7F,d1		; Total silence
00002774 4EBA 0000                  		jsr	WriteFMII(pc)
00002778 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
0000277C 123C 00C0                  		move.b	#$C0,d1		; Stereo
00002780 4EBA 0000                  		jsr	WriteFMII(pc)
00002784                            ; loc_72114:
00002784                            @bgm_fmdone:
00002784 7E00                       		moveq	#0,d7
00002786 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
0000278A 6700                       		beq.s	@bgm_psgdone	; branch if zero
0000278C 5307                       		subq.b	#1,d7
0000278E 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00002792 45FA 0000                  		lea	PSGInitBytes(pc),a2
00002796                            ; loc_72126:
00002796                            @bgm_psgloadloop:
00002796 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
0000279A 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0000279E 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000027A2 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
000027A6 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000027AA 7000                       		moveq	#0,d0
000027AC 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
000027AE D08B                       		add.l	a3,d0				; Relative pointer
000027B0 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
000027B4 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
000027B8 101C                       		move.b	(a4)+,d0			; load redundant byte
000027BA 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
000027BE D2C6                       		adda.w	d6,a1
000027C0 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
000027C4                            ; loc_72154:
000027C4                            @bgm_psgdone:
000027C4 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
000027C8 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
000027CA                            ; loc_7215A:
000027CA                            @sfxstoploop:
000027CA 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
000027CC 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
000027D0 7000                       		moveq	#0,d0
000027D2 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
000027D6 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
000027D8 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
000027DA E508                       		lsl.b	#2,d0			; Convert to index
000027DC 6000                       		bra.s	@gotchannelindex
000027DE                            ; ===========================================================================
000027DE                            ; loc_7216E:
000027DE                            @sfxpsgchannel:
000027DE E608                       		lsr.b	#3,d0		; Convert to index
000027E0                            ; loc_72170:
000027E0                            @gotchannelindex:
000027E0 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
000027E4 2070 0000                  		movea.l	(a0,d0.w),a0
000027E8 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
000027EC                            ; loc_7217C:
000027EC                            @sfxnext:
000027EC D2C6                       		adda.w	d6,a1
000027EE 51CF FFDA                  		dbf	d7,@sfxstoploop
000027F2                            
000027F2 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000027F6 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
000027F8 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000027FE                            ; loc_7218E:
000027FE                            @checkspecialpsg:
000027FE 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00002802 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00002804 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0000280A                            ; loc_7219A:
0000280A                            @sendfmnoteoff:
0000280A 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0000280E 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00002810                            ; loc_721A0:
00002810                            @fmnoteoffloop:
00002810 4EBA 0000                  		jsr	FMNoteOff(pc)
00002814 DAC6                       		adda.w	d6,a5
00002816 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
0000281A 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
0000281C                            ; loc_721AC:
0000281C                            @psgnoteoffloop:
0000281C 4EBA 0000                  		jsr	PSGNoteOff(pc)
00002820 DAC6                       		adda.w	d6,a5
00002822 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00002826                            ; loc_721B6:
00002826                            @locdblret:
00002826 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00002828 4E75                       		rts	
0000282A                            ; ===========================================================================
0000282A                            ; byte_721BA:
0000282A 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00002832 00                         		even
00002832                            ; byte_721C2:
00002832 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00002836 00                         		even
00002836                            ; ===========================================================================
00002836                            ; ---------------------------------------------------------------------------
00002836                            ; Play normal sound effect
00002836                            ; ---------------------------------------------------------------------------
00002836                            ; Sound_A0toCF:
00002836                            Sound_PlaySFX:
00002836 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0000283A 6600 0000                  		bne.w	@clear_sndprio		; Exit is it is
0000283E 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00002842 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
00002846 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0000284A 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
0000284E 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00002852 6600                       		bne.s	@sfx_notRing		; if not, branch
00002854 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00002858 6600                       		bne.s	@gotringspeaker		; Branch if not
0000285A 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
0000285E                            ; loc_721EE:
0000285E                            @gotringspeaker:
0000285E 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00002864                            ; Sound_notB5:
00002864                            @sfx_notRing:
00002864 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00002868 6600                       		bne.s	@sfx_notPush		; if not, branch
0000286A 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
0000286E 6600 0000                  		bne.w	@locret			; Return if not
00002872 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00002878                            ; Sound_notA7:
00002878                            @sfx_notPush:
00002878 2079 0000 200C             		movea.l	(Go_SoundIndex).l,a0
0000287E 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00002882 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00002884 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00002888 224B                       		movea.l	a3,a1
0000288A 7200                       		moveq	#0,d1
0000288C 3219                       		move.w	(a1)+,d1		; Voice pointer
0000288E D28B                       		add.l	a3,d1			; Relative pointer
00002890 1A19                       		move.b	(a1)+,d5		; Dividing timing
00002892                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00002892                            		; index entry is above $3F will cause a crash. This is actually the same way that
00002892                            		; this bug is fixed in Ristar's driver.
00002892 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00002894 5307                       		subq.b	#1,d7
00002896 7C30                       		moveq	#TrackSz,d6
00002898                            ; loc_72228:
00002898                            @sfx_loadloop:
00002898 7600                       		moveq	#0,d3
0000289A 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
0000289E 1803                       		move.b	d3,d4
000028A0 6B00                       		bmi.s	@sfxinitpsg	; Branch if PSG
000028A2 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
000028A4 E54B                       		lsl.w	#2,d3
000028A6 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000028AA 2A75 3000                  		movea.l	(a5,d3.w),a5
000028AE 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
000028B2 6000                       		bra.s	@sfxoverridedone
000028B4                            ; ===========================================================================
000028B4                            ; loc_72244:
000028B4                            @sfxinitpsg:
000028B4 E64B                       		lsr.w	#3,d3
000028B6 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000028BA 2A75 3000                  		movea.l	(a5,d3.w),a5
000028BE 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
000028C2 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
000028C6 6600                       		bne.s	@sfxoverridedone	; Branch if not
000028C8 1004                       		move.b	d4,d0
000028CA 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000028CE 13C0 00C0 0011             		move.b	d0,(psg_input).l
000028D4 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000028D8 13C0 00C0 0011             		move.b	d0,(psg_input).l
000028DE                            ; loc_7226E:
000028DE                            @sfxoverridedone:
000028DE 2A7B 3000                  		movea.l	SFX_SFXChannelRAM(pc,d3.w),a5
000028E2 244D                       		movea.l	a5,a2
000028E4 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000028E6                            ; loc_72276:
000028E6                            @clearsfxtrackram:
000028E6 429A                       		clr.l	(a2)+
000028E8 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000028EC                            
000028EC 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000028EE 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000028F2 7000                       		moveq	#0,d0
000028F4 3019                       		move.w	(a1)+,d0			; Track data pointer
000028F6 D08B                       		add.l	a3,d0				; Relative pointer
000028F8 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000028FC 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00002900 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00002906 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
0000290A 4A04                       		tst.b	d4				; Is this a PSG channel?
0000290C 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
0000290E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00002914 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00002918                            ; loc_722A8:
00002918                            @sfxpsginitdone:
00002918 51CF FF7E                  		dbf	d7,@sfx_loadloop
0000291C                            
0000291C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00002920 6A00                       		bpl.s	@doneoverride					; Branch if not
00002922 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002928                            ; loc_722B8:
00002928                            @doneoverride:
00002928 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0000292C 6A00                       		bpl.s	@locret						; Branch if not
0000292E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002934                            ; locret_722C4:
00002934                            @locret:
00002934 4E75                       		rts	
00002936                            ; ===========================================================================
00002936                            ; loc_722C6:
00002936                            @clear_sndprio:
00002936 422E 0000                  		clr.b	v_sndprio(a6)	; Clear priority
0000293A 4E75                       		rts	
0000293C                            ; ===========================================================================
0000293C                            ; ---------------------------------------------------------------------------
0000293C                            ; RAM addresses for FM and PSG channel variables used by the SFX
0000293C                            ; ---------------------------------------------------------------------------
0000293C                            ; dword_722CC: BGMChannelRAM:
0000293C                            SFX_BGMChannelRAM:
0000293C 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00002940 0000 0000                  		dc.l 0
00002944 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00002948 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0000294C 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00002950 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00002954 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00002958 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
0000295C                            ; dword_722EC: SFXChannelRAM:
0000295C                            SFX_SFXChannelRAM:
0000295C 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00002960 0000 0000                  		dc.l 0
00002964 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00002968 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
0000296C 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00002970 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00002974 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00002978 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
0000297C                            ; ===========================================================================
0000297C                            ; ---------------------------------------------------------------------------
0000297C                            ; Play GHZ waterfall sound
0000297C                            ; ---------------------------------------------------------------------------
0000297C                            ; Sound_D0toDF:
0000297C                            Sound_PlaySpecial:
0000297C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00002980 6600 0000                  		bne.w	@locret			; Return if so
00002984 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00002988 6600 0000                  		bne.w	@locret			; Exit if it is
0000298C 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00002990 6600 0000                  		bne.w	@locret			; Exit if it is
00002994 2079 0000 2004             		movea.l	(Go_SpecSoundIndex).l,a0
0000299A 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
0000299E E54F                       		lsl.w	#2,d7
000029A0 2670 7000                  		movea.l	(a0,d7.w),a3
000029A4 224B                       		movea.l	a3,a1
000029A6 7000                       		moveq	#0,d0
000029A8 3019                       		move.w	(a1)+,d0			; Voice pointer
000029AA D08B                       		add.l	a3,d0				; Relative pointer
000029AC 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
000029B0 1A19                       		move.b	(a1)+,d5			; Dividing timing
000029B2                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
000029B2                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
000029B2 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
000029B4 5307                       		subq.b	#1,d7
000029B6 7C30                       		moveq	#TrackSz,d6
000029B8                            ; loc_72348:
000029B8                            @sfxloadloop:
000029B8 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000029BC 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000029BE 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000029C4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000029C8 6000                       		bra.s	@sfxinitpsg
000029CA                            ; ===========================================================================
000029CA                            ; loc_7235A:
000029CA                            @sfxoverridepsg:
000029CA 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000029D0 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000029D4                            ; loc_72364:
000029D4                            @sfxinitpsg:
000029D4 244D                       		movea.l	a5,a2
000029D6 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000029D8                            ; loc_72368:
000029D8                            @clearsfxtrackram:
000029D8 429A                       		clr.l	(a2)+
000029DA 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000029DE                            
000029DE 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000029E0 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000029E4 7000                       		moveq	#0,d0
000029E6 3019                       		move.w	(a1)+,d0			; Track data pointer
000029E8 D08B                       		add.l	a3,d0				; Relative pointer
000029EA 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000029EE 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000029F2 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000029F8 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
000029FC 4A04                       		tst.b	d4				; Is this a PSG channel?
000029FE 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00002A00 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00002A06                            ; loc_72396:
00002A06                            @sfxpsginitdone:
00002A06 51CF FFB0                  		dbf	d7,@sfxloadloop
00002A0A                            
00002A0A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00002A0E 6A00                       		bpl.s	@doneoverride					; Branch if not
00002A10 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002A16                            ; loc_723A6:
00002A16                            @doneoverride:
00002A16 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00002A1A 6A00                       		bpl.s	@locret						; Branch if not
00002A1C 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00002A22 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00002A26 13C4 00C0 0011             		move.b	d4,(psg_input).l
00002A2C 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00002A30 13C4 00C0 0011             		move.b	d4,(psg_input).l
00002A36                            ; locret_723C6:
00002A36                            @locret:
00002A36 4E75                       		rts	
00002A38                            ; End of function PlaySoundID
00002A38                            
00002A38                            ; ===========================================================================
00002A38                            ; ---------------------------------------------------------------------------
00002A38                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00002A38                            ; ---------------------------------------------------------------------------
00002A38                            ; The first block would have been used for overriding the music tracks
00002A38                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00002A38                            ; The third block would be used to set up the Special SFX
00002A38                            ; The second block, however, is for the SFX tracks, which have a higher priority
00002A38                            ; and would be checked for if they're currently playing
00002A38                            ; If they are, then the third block would be used again, this time to mark
00002A38                            ; the new tracks as 'currently playing'
00002A38                            
00002A38                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00002A38                            
00002A38                            ; BGMFM4PSG3RAM:
00002A38                            ;SpecSFX_BGMChannelRAM:
00002A38 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00002A3C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00002A40                            ; SFXFM4PSG3RAM:
00002A40                            ;SpecSFX_SFXChannelRAM:
00002A40 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00002A44 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00002A48                            ; SpecialSFXFM4PSG3RAM:
00002A48                            ;SpecSFX_SpecSFXChannelRAM:
00002A48 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00002A4C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00002A50                            
00002A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A50                            
00002A50                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00002A50                            StopSFX:
00002A50 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
00002A54 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00002A58 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00002A5A                            ; loc_723EA:
00002A5A                            @trackloop:
00002A5A 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00002A5C 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00002A60 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00002A64 7600                       		moveq	#0,d3
00002A66 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00002A6A 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00002A6C 4EBA 0000                  		jsr	FMNoteOff(pc)
00002A70 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00002A74 6600                       		bne.s	@getfmpointer					; Branch if not
00002A76 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00002A7A 6A00                       		bpl.s	@getfmpointer					; Branch if not
00002A7C                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00002A7C                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00002A7C                            		; is playing its sound!
00002A7C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00002A80 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00002A84 6000                       		bra.s	@gotfmpointer
00002A86                            ; ===========================================================================
00002A86                            ; loc_72416:
00002A86                            @getfmpointer:
00002A86 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00002A88 E50B                       		lsl.b	#2,d3
00002A8A 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00002A8E 264D                       		movea.l	a5,a3
00002A90 2A70 3000                  		movea.l	(a0,d3.w),a5
00002A94 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00002A98                            ; loc_72428:
00002A98                            @gotfmpointer:
00002A98 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00002A9C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00002AA0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00002AA4 4EBA 0000                  		jsr	SetVoice(pc)
00002AA8 2A4B                       		movea.l	a3,a5
00002AAA 6000                       		bra.s	@nexttrack
00002AAC                            ; ===========================================================================
00002AAC                            ; loc_7243C:
00002AAC                            @trackpsg:
00002AAC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00002AB0 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00002AB4 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00002AB8 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00002ABA 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00002ABE 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00002AC0 E60B                       		lsr.b	#3,d3
00002AC2 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00002AC6 2070 3000                  		movea.l	(a0,d3.w),a0
00002ACA                            ; loc_7245A:
00002ACA                            @gotpsgpointer:
00002ACA 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00002ACE 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00002AD2 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00002AD8 6600                       		bne.s	@nexttrack			; Branch if not
00002ADA 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00002AE2                            ; loc_72472:
00002AE2                            @nexttrack:
00002AE2 DAFC 0030                  		adda.w	#TrackSz,a5
00002AE6 51CF FF72                  		dbf	d7,@trackloop
00002AEA                            
00002AEA 4E75                       		rts	
00002AEC                            ; End of function StopSFX
00002AEC                            
00002AEC                            
00002AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002AEC                            
00002AEC                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00002AEC                            StopSpecialSFX:
00002AEC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00002AF0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002AF2 6A00                       		bpl.s	@fadedfm		; Branch if not
00002AF4 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002AF8 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00002AFC 6600                       		bne.s	@fadedfm		; Branch if not
00002AFE 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00002B02 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00002B06 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00002B0A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00002B0E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002B10 6A00                       		bpl.s	@fadedfm		; Branch if not
00002B12 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00002B16 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00002B1A 4EBA 0000                  		jsr	SetVoice(pc)
00002B1E                            ; loc_724AE:
00002B1E                            @fadedfm:
00002B1E 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00002B22 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002B24 6A00                       		bpl.s	@fadedpsg		; Branch if not
00002B26 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002B2A 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00002B2E 6600                       		bne.s	@fadedpsg		; Return if not
00002B30 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00002B34 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00002B38 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00002B3C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00002B40 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002B42 6A00                       		bpl.s	@fadedpsg		; Return if not
00002B44 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00002B4A 6600                       		bne.s	@fadedpsg			; Return if not
00002B4C 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00002B54                            ; locret_724E4:
00002B54                            @fadedpsg:
00002B54 4E75                       		rts	
00002B56                            ; End of function StopSpecialSFX
00002B56                            
00002B56                            ; ===========================================================================
00002B56                            ; ---------------------------------------------------------------------------
00002B56                            ; Fade out music
00002B56                            ; ---------------------------------------------------------------------------
00002B56                            ; Sound_E0:
00002B56                            FadeOutMusic:
00002B56 4EBA FEF8                  		jsr	StopSFX(pc)
00002B5A 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00002B5E 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00002B64 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00002B6A 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00002B6E 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00002B72 4E75                       		rts	
00002B74                            
00002B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B74                            
00002B74                            ; sub_72504:
00002B74                            DoFadeOut:
00002B74 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00002B78 6700                       		beq.s	@continuefade		; Branch if yes
00002B7A 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00002B7E 4E75                       		rts	
00002B80                            ; ===========================================================================
00002B80                            ; loc_72510:
00002B80                            @continuefade:
00002B80 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00002B84 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00002B88 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00002B8E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00002B92 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00002B94                            ; loc_72524:
00002B94                            @fmloop:
00002B94 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002B96 6A00                       		bpl.s	@nextfm			; Branch if not
00002B98 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00002B9C 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00002B9E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002BA2 6000                       		bra.s	@nextfm
00002BA4                            ; ===========================================================================
00002BA4                            ; loc_72534:
00002BA4                            @sendfmtl:
00002BA4 4EBA 0000                  		jsr	SendVoiceTL(pc)
00002BA8                            ; loc_72538:
00002BA8                            @nextfm:
00002BA8 DAFC 0030                  		adda.w	#TrackSz,a5
00002BAC 51CF FFE6                  		dbf	d7,@fmloop
00002BB0                            
00002BB0 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00002BB2                            ; loc_72542:
00002BB2                            @psgloop:
00002BB2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002BB4 6A00                       		bpl.s	@nextpsg		; branch if not
00002BB6 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00002BBA 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00002BC0 6500                       		blo.s	@sendpsgvol		; Branch if not
00002BC2 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00002BC6 6000                       		bra.s	@nextpsg
00002BC8                            ; ===========================================================================
00002BC8                            ; loc_72558:
00002BC8                            @sendpsgvol:
00002BC8 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00002BCC 4EBA 0000                  		jsr	SetPSGVolume(pc)
00002BD0                            ; loc_72560:
00002BD0                            @nextpsg:
00002BD0 DAFC 0030                  		adda.w	#TrackSz,a5
00002BD4 51CF FFDC                  		dbf	d7,@psgloop
00002BD8                            
00002BD8 4E75                       		rts	
00002BDA                            ; End of function DoFadeOut
00002BDA                            
00002BDA                            
00002BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BDA                            
00002BDA                            ; sub_7256A:
00002BDA                            FMSilenceAll:
00002BDA 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00002BDC 7028                       		moveq	#$28,d0		; FM key on/off register
00002BDE                            ; loc_7256E:
00002BDE                            @noteoffloop:
00002BDE 1203                       		move.b	d3,d1
00002BE0 4EBA 0000                  		jsr	WriteFMI(pc)
00002BE4 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00002BE6 4EBA 0000                  		jsr	WriteFMI(pc)
00002BEA 51CB FFF2                  		dbf	d3,@noteoffloop
00002BEE                            
00002BEE 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00002BF0 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00002BF2 7802                       		moveq	#2,d4		; ... for all 3 channels...
00002BF4                            ; loc_72584:
00002BF4                            @channelloop:
00002BF4 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00002BF6                            ; loc_72586:
00002BF6                            @channeltlloop:
00002BF6 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00002BFA 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00002BFE 5840                       		addq.w	#4,d0		; Next TL operator
00002C00 51CB FFF4                  		dbf	d3,@channeltlloop
00002C04                            
00002C04 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00002C08 51CC FFEA                  		dbf	d4,@channelloop
00002C0C                            
00002C0C 4E75                       		rts	
00002C0E                            ; End of function FMSilenceAll
00002C0E                            
00002C0E                            ; ===========================================================================
00002C0E                            ; ---------------------------------------------------------------------------
00002C0E                            ; Stop music
00002C0E                            ; ---------------------------------------------------------------------------
00002C0E                            ; Sound_E4: StopSoundAndMusic:
00002C0E                            StopAllSound:
00002C0E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00002C10 123C 0080                  		move.b	#$80,d1		; Enable DAC
00002C14 4EBA 0000                  		jsr	WriteFMI(pc)
00002C18 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00002C1A 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00002C1C 4EBA 0000                  		jsr	WriteFMI(pc)
00002C20 204E                       		movea.l	a6,a0
00002C22                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00002C22                            		; Remove the '-$10' to fix this.
00002C22 303C 00E3                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables-$10)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00002C26                            ; loc_725B6:
00002C26                            @clearramloop:
00002C26 4298                       		clr.l	(a0)+
00002C28 51C8 FFFC                  		dbf	d0,@clearramloop
00002C2C                            
00002C2C 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00002C32 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00002C36 6000 0000                  		bra.w	PSGSilenceAll
00002C3A                            
00002C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3A                            
00002C3A                            ; sub_725CA:
00002C3A                            InitMusicPlayback:
00002C3A 204E                       		movea.l	a6,a0
00002C3C                            		; Save several values
00002C3C 122E 0000                  		move.b	v_sndprio(a6),d1
00002C40 142E 0027                  		move.b	f_1up_playing(a6),d2
00002C44 162E 002A                  		move.b	f_speedup(a6),d3
00002C48 182E 0026                  		move.b	v_fadein_counter(a6),d4
00002C4C                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00002C4C 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00002C50 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00002C54                            ; loc_725E4:
00002C54                            @clearramloop:
00002C54 4298                       		clr.l	(a0)+
00002C56 51C8 FFFC                  		dbf	d0,@clearramloop
00002C5A                            
00002C5A                            		; Restore the values saved above
00002C5A 1D41 0000                  		move.b	d1,v_sndprio(a6)
00002C5E 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00002C62 1D43 002A                  		move.b	d3,f_speedup(a6)
00002C66 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00002C6A 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00002C6E 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00002C74                            		; DANGER! This silences ALL channels, even the ones being used
00002C74                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00002C74                            		; doesn't affect SFX channels, either.
00002C74                            		; This should be replaced with an 'rts'.
00002C74 4EBA FF64                  		jsr	FMSilenceAll(pc)
00002C78 6000 0000                  		bra.w	PSGSilenceAll
00002C7C                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00002C7C                            		; don't do a very good job of setting up the music tracks.
00002C7C                            		; Tracks that aren't defined in a music file's header don't have
00002C7C                            		; their channels defined, meaning @sendfmnoteoff won't silence
00002C7C                            		; hardware properly. In combination with removing the above
00002C7C                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00002C7C                            		; notes.
00002C7C                            		; To fix this, I suggest using this code, instead of an 'rts':
00002C7C                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00002C7C                            		;lea	FMDACInitBytes(pc),a2
00002C7C                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00002C7C                            		;bsr.s	@writeloop
00002C7C                            		;lea	PSGInitBytes(pc),a2
00002C7C                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00002C7C                            
00002C7C                            ;@writeloop:
00002C7C                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00002C7C                            		;lea	TrackSz(a1),a1		; Next track
00002C7C                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00002C7C                            
00002C7C                            		;rts
00002C7C                            	
00002C7C                            ; End of function InitMusicPlayback
00002C7C                            
00002C7C                            
00002C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C7C                            
00002C7C                            ; sub_7260C:
00002C7C                            TempoWait:
00002C7C 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00002C82 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00002C86 7030                       		moveq	#TrackSz,d0
00002C88 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00002C8A                            ; loc_7261A:
00002C8A                            @tempoloop:
00002C8A 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00002C8C D0C0                       		adda.w	d0,a0	; Advance to next track
00002C8E 51C9 FFFA                  		dbf	d1,@tempoloop
00002C92                            
00002C92 4E75                       		rts	
00002C94                            ; End of function TempoWait
00002C94                            
00002C94                            ; ===========================================================================
00002C94                            ; ---------------------------------------------------------------------------
00002C94                            ; Speed	up music
00002C94                            ; ---------------------------------------------------------------------------
00002C94                            ; Sound_E2:
00002C94                            SpeedUpMusic:
00002C94 4A2E 0027                  		tst.b	f_1up_playing(a6)
00002C98 6600                       		bne.s	@speedup_1up
00002C9A 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00002CA0 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00002CA6 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00002CAC 4E75                       		rts	
00002CAE                            ; ===========================================================================
00002CAE                            ; loc_7263E:
00002CAE                            @speedup_1up:
00002CAE 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00002CB4 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00002CBA 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00002CC0 4E75                       		rts	
00002CC2                            ; ===========================================================================
00002CC2                            ; ---------------------------------------------------------------------------
00002CC2                            ; Change music back to normal speed
00002CC2                            ; ---------------------------------------------------------------------------
00002CC2                            ; Sound_E3:
00002CC2                            SlowDownMusic:
00002CC2 4A2E 0027                  		tst.b	f_1up_playing(a6)
00002CC6 6600                       		bne.s	@slowdown_1up
00002CC8 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00002CCE 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00002CD4 422E 002A                  		clr.b	f_speedup(a6)
00002CD8 4E75                       		rts	
00002CDA                            ; ===========================================================================
00002CDA                            ; loc_7266A:
00002CDA                            @slowdown_1up:
00002CDA 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00002CE0 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00002CE6 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00002CEA 4E75                       		rts	
00002CEC                            
00002CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CEC                            
00002CEC                            ; sub_7267C:
00002CEC                            DoFadeIn:
00002CEC 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00002CF0 6700                       		beq.s	@continuefade		; Branch if yes
00002CF2 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00002CF6 4E75                       		rts	
00002CF8                            ; ===========================================================================
00002CF8                            ; loc_72688:
00002CF8                            @continuefade:
00002CF8 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00002CFC 6700                       		beq.s	@fadedone		; Branch if yes
00002CFE 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00002D02 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00002D08 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00002D0C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00002D0E                            ; loc_7269E:
00002D0E                            @fmloop:
00002D0E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002D10 6A00                       		bpl.s	@nextfm			; Branch if not
00002D12 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00002D16 4EBA 0000                  		jsr	SendVoiceTL(pc)
00002D1A                            ; loc_726AA:
00002D1A                            @nextfm:
00002D1A DAFC 0030                  		adda.w	#TrackSz,a5
00002D1E 51CF FFEE                  		dbf	d7,@fmloop
00002D22 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00002D24                            ; loc_726B4:
00002D24                            @psgloop:
00002D24 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00002D26 6A00                       		bpl.s	@nextpsg		; Branch if not
00002D28 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00002D2C 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00002D30 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00002D34 6500                       		blo.s	@sendpsgvol		; Branch if yes
00002D36 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00002D38                            ; loc_726C8:
00002D38                            @sendpsgvol:
00002D38 4EBA 0000                  		jsr	SetPSGVolume(pc)
00002D3C                            ; loc_726CC:
00002D3C                            @nextpsg:
00002D3C DAFC 0030                  		adda.w	#TrackSz,a5
00002D40 51CF FFE2                  		dbf	d7,@psgloop
00002D44 4E75                       		rts	
00002D46                            ; ===========================================================================
00002D46                            ; loc_726D6:
00002D46                            @fadedone:
00002D46 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00002D4C 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00002D50 4E75                       		rts	
00002D52                            ; End of function DoFadeIn
00002D52                            
00002D52                            ; ===========================================================================
00002D52                            ; loc_726E2:
00002D52                            FMNoteOn:
00002D52 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00002D56 6600                       		bne.s	@locret		; Return if so
00002D58 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00002D5C 6600                       		bne.s	@locret		; Return if so
00002D5E 7028                       		moveq	#$28,d0		; Note on/off register
00002D60 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00002D64 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00002D68 6000 0000                  		bra.w	WriteFMI
00002D6C                            ; ===========================================================================
00002D6C                            ; locret_726FC:
00002D6C                            @locret:
00002D6C 4E75                       		rts	
00002D6E                            
00002D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D6E                            
00002D6E                            ; sub_726FE:
00002D6E                            FMNoteOff:
00002D6E 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00002D72 6600                       		bne.s	locret_72714	; Return if yes
00002D74 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00002D78 6600                       		bne.s	locret_72714	; Return if yes
00002D7A                            ; loc_7270A:
00002D7A                            SendFMNoteOff:
00002D7A 7028                       		moveq	#$28,d0		; Note on/off register
00002D7C 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00002D80 6000 0000                  		bra.w	WriteFMI
00002D84                            ; ===========================================================================
00002D84                            
00002D84                            locret_72714:
00002D84 4E75                       		rts	
00002D86                            ; End of function FMNoteOff
00002D86                            
00002D86                            ; ===========================================================================
00002D86                            ; loc_72716:
00002D86                            WriteFMIorIIMain:
00002D86 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00002D8A 6600                       		bne.s	@locret		; Return if yes
00002D8C 6000 0000                  		bra.w	WriteFMIorII
00002D90                            ; ===========================================================================
00002D90                            ; locret_72720:
00002D90                            @locret:
00002D90 4E75                       		rts	
00002D92                            
00002D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D92                            
00002D92                            ; sub_72722:
00002D92                            WriteFMIorII:
00002D92 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00002D98 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00002D9A D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00002D9E                            ; End of function WriteFMIorII
00002D9E                            
00002D9E                            
00002D9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D9E                            
00002D9E                            ; Strangely, despite this driver being SMPS 68k Type 1b,
00002D9E                            ; WriteFMI and WriteFMII are the Type 1a versions.
00002D9E                            ; In Sonic 1's prototype, they were the Type 1b versions.
00002D9E                            ; I wonder why they were changed?
00002D9E                            
00002D9E                            ; sub_7272E:
00002D9E                            WriteFMI:
00002D9E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002DA4 0802 0007                  		btst	#7,d2		; Is FM busy?
00002DA8 66F4                       		bne.s	WriteFMI	; Loop if so
00002DAA 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00002DB0 4E71                       		nop	
00002DB2 4E71                       		nop	
00002DB4 4E71                       		nop	
00002DB6                            ; loc_72746:
00002DB6                            @waitloop:
00002DB6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002DBC 0802 0007                  		btst	#7,d2		; Is FM busy?
00002DC0 66F4                       		bne.s	@waitloop	; Loop if so
00002DC2                            
00002DC2 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00002DC8 4E75                       		rts	
00002DCA                            ; End of function WriteFMI
00002DCA                            
00002DCA                            ; ===========================================================================
00002DCA                            ; loc_7275A:
00002DCA                            WriteFMIIPart:
00002DCA 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00002DCE 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00002DD2 D002                       		add.b	d2,d0			; Add in to destination register
00002DD4                            
00002DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002DD4                            
00002DD4                            ; sub_72764:
00002DD4                            WriteFMII:
00002DD4 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002DDA 0802 0007                  		btst	#7,d2		; Is FM busy?
00002DDE 66F4                       		bne.s	WriteFMII	; Loop if so
00002DE0 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00002DE6 4E71                       		nop	
00002DE8 4E71                       		nop	
00002DEA 4E71                       		nop	
00002DEC                            ; loc_7277C:
00002DEC                            @waitloop:
00002DEC 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00002DF2 0802 0007                  		btst	#7,d2		; Is FM busy?
00002DF6 66F4                       		bne.s	@waitloop	; Loop if so
00002DF8                            
00002DF8 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00002DFE 4E75                       		rts	
00002E00                            ; End of function WriteFMII
00002E00                            
00002E00                            ; ===========================================================================
00002E00                            ; ---------------------------------------------------------------------------
00002E00                            ; FM Note Values: b-0 to a#8
00002E00                            ;
00002E00                            ; Each row is an octave, starting with B and ending with A-sharp/B-flat.
00002E00                            ; Notably, this differs from the PSG frequency table, which starts with C and
00002E00                            ; ends with B. This is caused by 'FMSetFreq' subtracting $80 from the note
00002E00                            ; instead of $81, meaning that the first frequency in the table ironically
00002E00                            ; corresponds to the 'rest' note. The only way to use this frequency in a
00002E00                            ; real note is to transpose the channel to a lower semitone.
00002E00                            ;
00002E00                            ; Rather than use a complete lookup table, other SMPS drivers such as
00002E00                            ; Sonic 3's compute the octave, and only store a single octave's worth of
00002E00                            ; notes in the table.
00002E00                            ;
00002E00                            ; Invalid transposition values will cause this table to be overflowed,
00002E00                            ; resulting in garbage data being used as frequency values. In drivers that
00002E00                            ; compute the octave instead, invalid transposition values merely cause the
00002E00                            ; notes to wrap-around (the note below the lowest note will be the highest
00002E00                            ; note). It's important to keep this in mind when porting buggy songs.
00002E00                            ; ---------------------------------------------------------------------------
00002E00                            ; word_72790: FM_Notes:
00002E00                            FMFrequencies:
00002E00 025E 0284 02AB 02D3 02FE+  		dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00002E18 0A5E 0A84 0AAB 0AD3 0AFE+  		dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00002E30 125E 1284 12AB 12D3 12FE+  		dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00002E48 1A5E 1A84 1AAB 1AD3 1AFE+  		dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00002E60 225E 2284 22AB 22D3 22FE+  		dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00002E78 2A5E 2A84 2AAB 2AD3 2AFE+  		dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00002E90 325E 3284 32AB 32D3 32FE+  		dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00002EA8 3A5E 3A84 3AAB 3AD3 3AFE+  		dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00002EC0                            
00002EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EC0                            
00002EC0                            ; sub_72850:
00002EC0                            PSGUpdateTrack:
00002EC0 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00002EC4 6600                       		bne.s	@notegoing
00002EC6 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00002ECA 4EBA 0000                  		jsr	PSGDoNext(pc)
00002ECE 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00002ED2 6000 0000                  		bra.w	PSGDoVolFX
00002ED6                            ; ===========================================================================
00002ED6                            ; loc_72866:
00002ED6                            @notegoing:
00002ED6 4EBA F536                  		jsr	NoteTimeoutUpdate(pc)
00002EDA 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00002EDE 4EBA F556                  		jsr	DoModulation(pc)
00002EE2 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00002EE6 4E75                       		rts
00002EE8                            ; End of function PSGUpdateTrack
00002EE8                            
00002EE8                            
00002EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EE8                            
00002EE8                            ; sub_72878:
00002EE8                            PSGDoNext:
00002EE8 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00002EEC 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00002EF0                            ; loc_72880:
00002EF0                            @noteloop:
00002EF0 7A00                       		moveq	#0,d5
00002EF2 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00002EF4 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00002EF8 6500                       		blo.s	@gotnote	; Branch if not
00002EFA 4EBA 0000                  		jsr	CoordFlag(pc)
00002EFE 60F0                       		bra.s	@noteloop
00002F00                            ; ===========================================================================
00002F00                            ; loc_72890:
00002F00                            @gotnote:
00002F00 4A05                       		tst.b	d5		; Is it a note?
00002F02 6A00                       		bpl.s	@gotduration	; Branch if not
00002F04 4EBA 0000                  		jsr	PSGSetFreq(pc)
00002F08 1A1C                       		move.b	(a4)+,d5	; Get another byte
00002F0A 4A05                       		tst.b	d5		; Is it a duration?
00002F0C 6A00                       		bpl.s	@gotduration	; Branch if yes
00002F0E 534C                       		subq.w	#1,a4		; Put byte back
00002F10 6000 F4BE                  		bra.w	FinishTrackUpdate
00002F14                            ; ===========================================================================
00002F14                            ; loc_728A4:
00002F14                            @gotduration:
00002F14 4EBA F49A                  		jsr	SetDuration(pc)
00002F18 6000 F4B6                  		bra.w	FinishTrackUpdate
00002F1C                            ; End of function PSGDoNext
00002F1C                            
00002F1C                            
00002F1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F1C                            
00002F1C                            ; sub_728AC:
00002F1C                            PSGSetFreq:
00002F1C 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00002F20 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00002F22 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00002F26 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00002F2A E34D                       		lsl.w	#1,d5
00002F2C 41FA 0000                  		lea	PSGFrequencies(pc),a0
00002F30 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00002F36 6000 F498                  		bra.w	FinishTrackUpdate
00002F3A                            ; ===========================================================================
00002F3A                            ; loc_728CA:
00002F3A                            @restpsg:
00002F3A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00002F3E 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00002F44 4EBA F48A                  		jsr	FinishTrackUpdate(pc)
00002F48 6000 0000                  		bra.w	PSGNoteOff
00002F4C                            ; End of function PSGSetFreq
00002F4C                            
00002F4C                            
00002F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F4C                            
00002F4C                            ; sub_728DC:
00002F4C                            PSGDoNoteOn:
00002F4C 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00002F50 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00002F52                            ; End of function PSGDoNoteOn
00002F52                            
00002F52                            
00002F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F52                            
00002F52                            ; sub_728E2:
00002F52                            PSGUpdateFreq:
00002F52 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00002F56 4880                       		ext.w	d0
00002F58 DC40                       		add.w	d0,d6		; Add to frequency
00002F5A 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00002F5E 6600                       		bne.s	@locret		; Return if yes
00002F60 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00002F64 6600                       		bne.s	@locret		; Return if yes
00002F66 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00002F6A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00002F6E 6600                       		bne.s	@notnoise	; Branch if not
00002F70 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00002F74                            ; loc_72904:
00002F74                            @notnoise:
00002F74 3206                       		move.w	d6,d1
00002F76 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00002F7A 8001                       		or.b	d1,d0		; Latch tone data to channel
00002F7C E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00002F7E 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00002F82 13C0 00C0 0011             		move.b	d0,(psg_input).l
00002F88 13C6 00C0 0011             		move.b	d6,(psg_input).l
00002F8E                            ; locret_7291E:
00002F8E                            @locret:
00002F8E 4E75                       		rts	
00002F90                            ; End of function PSGUpdateFreq
00002F90                            
00002F90                            ; ===========================================================================
00002F90                            ; loc_72920:
00002F90                            PSGSetRest:
00002F90 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00002F94 4E75                       		rts	
00002F96                            
00002F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F96                            
00002F96                            ; sub_72926:
00002F96                            PSGUpdateVolFX:
00002F96 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00002F9A 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00002F9E                            ; loc_7292E:
00002F9E                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00002F9E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00002FA2 7000                       		moveq	#0,d0
00002FA4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00002FA8 6700                       		beq.s	SetPSGVolume
00002FAA 2079 0000 2014             		movea.l	(Go_PSGIndex).l,a0
00002FB0 5340                       		subq.w	#1,d0
00002FB2 E548                       		lsl.w	#2,d0
00002FB4 2070 0000                  		movea.l	(a0,d0.w),a0
00002FB8 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00002FBC 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00002FC0 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00002FC4 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00002FC8 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00002FCA 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00002FCE 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00002FD0                            ; loc_72960:
00002FD0                            @gotflutter:
00002FD0 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00002FD2 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00002FD6 6500                       		blo.s	SetPSGVolume	; Branch if not
00002FD8 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00002FDA                            ; End of function PSGUpdateVolFX
00002FDA                            
00002FDA                            
00002FDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FDA                            
00002FDA                            ; sub_7296A:
00002FDA                            SetPSGVolume:
00002FDA 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00002FDE 6600                       		bne.s	locret_7298A	; Return if so
00002FE0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00002FE4 6600                       		bne.s	locret_7298A	; Return if so
00002FE6 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00002FEA 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00002FEC                            ; loc_7297C:
00002FEC                            PSGSendVolume:
00002FEC 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00002FF0 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00002FF4 13C6 00C0 0011             		move.b	d6,(psg_input).l
00002FFA                            
00002FFA                            locret_7298A:
00002FFA 4E75                       		rts	
00002FFC                            ; ===========================================================================
00002FFC                            ; loc_7298C: PSGCheckNoteFill:
00002FFC                            PSGCheckNoteTimeout:
00002FFC 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00003000 67EA                       		beq.s	PSGSendVolume			; Branch if not
00003002 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00003006 66E4                       		bne.s	PSGSendVolume			; Branch if not
00003008 4E75                       		rts	
0000300A                            ; End of function SetPSGVolume
0000300A                            
0000300A                            ; ===========================================================================
0000300A                            ; loc_7299A: FlutterDone:
0000300A                            VolEnvHold:
0000300A 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
0000300E 4E75                       		rts	
00003010                            
00003010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003010                            
00003010                            ; sub_729A0:
00003010                            PSGNoteOff:
00003010 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00003014 6600                       		bne.s	locret_729B4	; Return if so
00003016                            ; loc_729A6:
00003016                            SendPSGNoteOff:
00003016 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
0000301A 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
0000301E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00003024                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00003024                            		; risk of music accidentally playing noise because it can't detect if
00003024                            		; the PSG4/noise channel needs muting on track initialisation.
00003024                            		; S&K's driver fixes it by doing this:
00003024                            		;cmpi.b	#$DF,d0				; Are stopping PSG3?
00003024                            		;bne.s	locret_729B4
00003024                            		;move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00003024                            
00003024                            locret_729B4:
00003024 4E75                       		rts	
00003026                            ; End of function PSGNoteOff
00003026                            
00003026                            
00003026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003026                            
00003026                            ; sub_729B6:
00003026                            PSGSilenceAll:
00003026 41F9 00C0 0011             		lea	(psg_input).l,a0
0000302C 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00003030 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00003034 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00003038 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
0000303C 4E75                       		rts	
0000303E                            ; End of function PSGSilenceAll
0000303E                            
0000303E                            ; ===========================================================================
0000303E                            ; ---------------------------------------------------------------------------
0000303E                            ; PSG Note Values: c-1 to a-6
0000303E                            ;
0000303E                            ; Each row is an octave, starting with C and ending with B. Sonic 3's driver
0000303E                            ; adds another octave at the start, as well as two more notes and the end to
0000303E                            ; complete the last octave. Notably, a-6 is changed from 0 to $10. These
0000303E                            ; changes need to be applied here in order for ports of songs from Sonic 3
0000303E                            ; and later to sound correct.
0000303E                            ;
0000303E                            ; Here is what Sonic 3's version of this table looks like:
0000303E                            ;	dc.w $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3F7, $3BE, $388
0000303E                            ;	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
0000303E                            ;	dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
0000303E                            ;	dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
0000303E                            ;	dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0000303E                            ;	dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
0000303E                            ;	dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,  $10,    0,    0
0000303E                            ; ---------------------------------------------------------------------------
0000303E                            ; word_729CE:
0000303E                            PSGFrequencies:
0000303E 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
00003056 01AB 0193 017D 0167 0153+  		dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
0000306E 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
00003086 006B 0065 005F 005A 0055+  		dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0000309E 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
000030B6 001B 001A 0018 0017 0016+  		dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,    0
000030CA                            
000030CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000030CA                            
000030CA                            ; sub_72A5A:
000030CA                            CoordFlag:
000030CA 0445 00E0                  		subi.w	#$E0,d5
000030CE E54D                       		lsl.w	#2,d5
000030D0 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000030D4                            ; End of function CoordFlag
000030D4                            
000030D4                            ; ===========================================================================
000030D4                            ; loc_72A64:
000030D4                            coordflagLookup:
000030D4 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000030D8                            ; ===========================================================================
000030D8 6000 0000                  		bra.w	cfDetune		; $E1
000030DC                            ; ===========================================================================
000030DC 6000 0000                  		bra.w	cfSetCommunication	; $E2
000030E0                            ; ===========================================================================
000030E0 6000 0000                  		bra.w	cfJumpReturn		; $E3
000030E4                            ; ===========================================================================
000030E4 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
000030E8                            ; ===========================================================================
000030E8 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
000030EC                            ; ===========================================================================
000030EC 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
000030F0                            ; ===========================================================================
000030F0 6000 0000                  		bra.w	cfHoldNote		; $E7
000030F4                            ; ===========================================================================
000030F4 6000 0000                  		bra.w	cfNoteTimeout		; $E8
000030F8                            ; ===========================================================================
000030F8 6000 0000                  		bra.w	cfChangeTransposition	; $E9
000030FC                            ; ===========================================================================
000030FC 6000 0000                  		bra.w	cfSetTempo		; $EA
00003100                            ; ===========================================================================
00003100 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00003104                            ; ===========================================================================
00003104 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00003108                            ; ===========================================================================
00003108 6000 0000                  		bra.w	cfClearPush		; $ED
0000310C                            ; ===========================================================================
0000310C 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00003110                            ; ===========================================================================
00003110 6000 0000                  		bra.w	cfSetVoice		; $EF
00003114                            ; ===========================================================================
00003114 6000 0000                  		bra.w	cfModulation		; $F0
00003118                            ; ===========================================================================
00003118 6000 0000                  		bra.w	cfEnableModulation	; $F1
0000311C                            ; ===========================================================================
0000311C 6000 0000                  		bra.w	cfStopTrack		; $F2
00003120                            ; ===========================================================================
00003120 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00003124                            ; ===========================================================================
00003124 6000 0000                  		bra.w	cfDisableModulation	; $F4
00003128                            ; ===========================================================================
00003128 6000 0000                  		bra.w	cfSetPSGTone		; $F5
0000312C                            ; ===========================================================================
0000312C 6000 0000                  		bra.w	cfJumpTo		; $F6
00003130                            ; ===========================================================================
00003130 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00003134                            ; ===========================================================================
00003134 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00003138                            ; ===========================================================================
00003138 6000 0000                  		bra.w	cfOpF9			; $F9
0000313C                            ; ===========================================================================
0000313C                            ; loc_72ACC:
0000313C                            cfPanningAMSFMS:
0000313C 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
0000313E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00003142 6B00                       		bmi.s	locret_72AEA		; Return if yes
00003144 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00003148 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0000314C 8200                       		or.b	d0,d1			; Mask in new value
0000314E 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00003152 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00003156 6000 FC2E                  		bra.w	WriteFMIorIIMain
0000315A                            ; ===========================================================================
0000315A                            
0000315A                            locret_72AEA:
0000315A 4E75                       		rts	
0000315C                            ; ===========================================================================
0000315C                            ; loc_72AEC: cfAlterNotes:
0000315C                            cfDetune:
0000315C 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00003160 4E75                       		rts	
00003162                            ; ===========================================================================
00003162                            ; loc_72AF2: cfUnknown1:
00003162                            cfSetCommunication:
00003162 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00003166 4E75                       		rts	
00003168                            ; ===========================================================================
00003168                            ; loc_72AF8:
00003168                            cfJumpReturn:
00003168 7000                       		moveq	#0,d0
0000316A 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
0000316E 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00003172 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
0000317A 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0000317C 5800                       		addq.b	#4,d0			; Actually 'pop' value
0000317E 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00003182 4E75                       		rts	
00003184                            ; ===========================================================================
00003184                            ; loc_72B14:
00003184                            cfFadeInToPrevious:
00003184 204E                       		movea.l	a6,a0
00003186 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
0000318A 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
0000318E                            ; loc_72B1E:
0000318E                            @restoreramloop:
0000318E 20D9                       		move.l	(a1)+,(a0)+
00003190 51C8 FFFC                  		dbf	d0,@restoreramloop
00003194                            
00003194 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
0000319A 264D                       		movea.l	a5,a3
0000319C 1C3C 0028                  		move.b	#$28,d6
000031A0 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000031A4 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000031A6 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000031AA                            ; loc_72B3A:
000031AA                            @fmloop:
000031AA 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000031AE 6700                       		beq.s	@nextfm		; Branch if not
000031B0 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000031B4 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000031B8 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000031BC 6600                       		bne.s	@nextfm		; Branch if yes
000031BE 7000                       		moveq	#0,d0
000031C0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
000031C4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000031C8 4EBA 0000                  		jsr	SetVoice(pc)
000031CC                            ; loc_72B5C:
000031CC                            @nextfm:
000031CC DAFC 0030                  		adda.w	#TrackSz,a5
000031D0 51CF FFD8                  		dbf	d7,@fmloop
000031D4                            
000031D4 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000031D6                            ; loc_72B66:
000031D6                            @psgloop:
000031D6 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000031DA 6700                       		beq.s	@nextpsg	; Branch if not
000031DC 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000031E0 4EBA FE2E                  		jsr	PSGNoteOff(pc)
000031E4 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000031E8                            ; loc_72B78:
000031E8                            @nextpsg:
000031E8 DAFC 0030                  		adda.w	#TrackSz,a5
000031EC 51CF FFE8                  		dbf	d7,@psgloop
000031F0                            		
000031F0 2A4B                       		movea.l	a3,a5
000031F2 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000031F8 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000031FE 422E 0027                  		clr.b	f_1up_playing(a6)
00003202 33FC 0000 00A1 1100        		startZ80
0000320A 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
0000320C 4E75                       		rts	
0000320E                            ; ===========================================================================
0000320E                            ; loc_72B9E:
0000320E                            cfSetTempoDivider:
0000320E 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00003212 4E75                       		rts	
00003214                            ; ===========================================================================
00003214                            ; loc_72BA4: cfSetVolume:
00003214                            cfChangeFMVolume:
00003214 101C                       		move.b	(a4)+,d0		; Get parameter
00003216 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
0000321A 6000 0000                  		bra.w	SendVoiceTL
0000321E                            ; ===========================================================================
0000321E                            ; loc_72BAE: cfPreventAttack:
0000321E                            cfHoldNote:
0000321E 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00003222 4E75                       		rts	
00003224                            ; ===========================================================================
00003224                            ; loc_72BB4: cfNoteFill
00003224                            cfNoteTimeout:
00003224 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00003228 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
0000322C 4E75                       		rts	
0000322E                            ; ===========================================================================
0000322E                            ; loc_72BBE: cfAddKey:
0000322E                            cfChangeTransposition:
0000322E 101C                       		move.b	(a4)+,d0		; Get parameter
00003230 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00003234 4E75                       		rts	
00003236                            ; ===========================================================================
00003236                            ; loc_72BC6:
00003236                            cfSetTempo:
00003236 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
0000323A 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
0000323E 4E75                       		rts	
00003240                            ; ===========================================================================
00003240                            ; loc_72BD0: cfSetTempoMod:
00003240                            cfSetTempoDividerAll:
00003240 41EE 0040                  		lea	v_music_track_ram(a6),a0
00003244 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00003246 7230                       		moveq	#TrackSz,d1
00003248 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
0000324A                            ; loc_72BDA:
0000324A                            @trackloop:
0000324A 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
0000324E D0C1                       		adda.w	d1,a0
00003250 51CA FFF8                  		dbf	d2,@trackloop
00003254                            
00003254 4E75                       		rts	
00003256                            ; ===========================================================================
00003256                            ; loc_72BE6: cfChangeVolume:
00003256                            cfChangePSGVolume:
00003256 101C                       		move.b	(a4)+,d0		; Get volume change
00003258 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
0000325C 4E75                       		rts	
0000325E                            ; ===========================================================================
0000325E                            ; loc_72BEE:
0000325E                            cfClearPush:
0000325E 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00003262 4E75                       		rts	
00003264                            ; ===========================================================================
00003264                            ; loc_72BF4:
00003264                            cfStopSpecialFM4:
00003264 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00003268 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
0000326C 4EBA FB00                  		jsr	FMNoteOff(pc)
00003270 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00003274 6B00                       		bmi.s	@locexit					; Branch if yes
00003276 264D                       		movea.l	a5,a3
00003278 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0000327C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00003280 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00003284 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00003288 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0000328C 4EBA 0000                  		jsr	SetVoice(pc)
00003290 2A4B                       		movea.l	a3,a5
00003292                            ; loc_72C22:
00003292                            @locexit:
00003292 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00003294 4E75                       		rts	
00003296                            ; ===========================================================================
00003296                            ; loc_72C26:
00003296                            cfSetVoice:
00003296 7000                       		moveq	#0,d0
00003298 101C                       		move.b	(a4)+,d0		; Get new voice
0000329A 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
0000329E 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
000032A2 6600 0000                  		bne.w	locret_72CAA		; Return if yes
000032A6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
000032AA 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
000032AE 6700                       		beq.s	SetVoice		; If yes, branch
000032B0 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
000032B4 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
000032B8 6B00                       		bmi.s	SetVoice		; If yes, branch
000032BA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
000032BE                            
000032BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000032BE                            
000032BE                            ; sub_72C4E:
000032BE                            SetVoice:
000032BE 5340                       		subq.w	#1,d0
000032C0 6B00                       		bmi.s	@havevoiceptr
000032C2 323C 0019                  		move.w	#25,d1
000032C6                            ; loc_72C56:
000032C6                            @voicemultiply:
000032C6 D2C1                       		adda.w	d1,a1
000032C8 51C8 FFFC                  		dbf	d0,@voicemultiply
000032CC                            ; loc_72C5C:
000032CC                            @havevoiceptr:
000032CC 1219                       		move.b	(a1)+,d1		; feedback/algorithm
000032CE 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
000032D2 1801                       		move.b	d1,d4
000032D4 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
000032D8 4EBA FAB8                  		jsr	WriteFMIorII(pc)
000032DC 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000032E0 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000032E2                            ; loc_72C72:
000032E2                            @sendvoiceloop:
000032E2 101A                       		move.b	(a2)+,d0
000032E4 1219                       		move.b	(a1)+,d1
000032E6 4EBA FAAA                  		jsr	WriteFMIorII(pc)
000032EA 51CB FFF6                  		dbf	d3,@sendvoiceloop
000032EE                            
000032EE 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
000032F0 0244 0007                  		andi.w	#7,d4			; Get algorithm
000032F4 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
000032F8 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
000032FC                            ; loc_72C8C:
000032FC                            @sendtlloop:
000032FC 101A                       		move.b	(a2)+,d0
000032FE 1219                       		move.b	(a1)+,d1
00003300 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00003302 6400                       		bcc.s	@sendtl		; Branch if not
00003304 D203                       		add.b	d3,d1		; Include additional attenuation
00003306                            ; loc_72C96:
00003306                            @sendtl:
00003306 4EBA FA8A                  		jsr	WriteFMIorII(pc)
0000330A 51CD FFF0                  		dbf	d5,@sendtlloop
0000330E                            		
0000330E 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00003312 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00003316 4EBA FA7A                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
0000331A                            
0000331A                            locret_72CAA:
0000331A 4E75                       		rts	
0000331C                            ; End of function SetVoice
0000331C                            
0000331C                            ; ===========================================================================
0000331C                            ; byte_72CAC:
0000331C 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00003324                            
00003324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003324                            
00003324                            ; sub_72CB4:
00003324                            SendVoiceTL:
00003324 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00003328 6600                       		bne.s	@locret		; Return if so
0000332A 7000                       		moveq	#0,d0
0000332C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00003330 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00003334 4A2E 000E                  		tst.b	f_voice_selector(a6)
00003338 6700                       		beq.s	@gotvoiceptr
0000333A                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
0000333A                            		; of a6!
0000333A 226E 0020                  		movea.l	TrackVoicePtr(a6),a1
0000333E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00003342 6B00                       		bmi.s	@gotvoiceptr
00003344 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00003348                            ; loc_72CD8:
00003348                            @gotvoiceptr:
00003348 5340                       		subq.w	#1,d0
0000334A 6B00                       		bmi.s	@gotvoice
0000334C 323C 0019                  		move.w	#25,d1
00003350                            ; loc_72CE0:
00003350                            @voicemultiply:
00003350 D2C1                       		adda.w	d1,a1
00003352 51C8 FFFC                  		dbf	d0,@voicemultiply
00003356                            ; loc_72CE6:
00003356                            @gotvoice:
00003356 D2FC 0015                  		adda.w	#21,a1				; Want TL
0000335A 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
0000335E 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00003362 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00003366 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
0000336A 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
0000336E 6B00                       		bmi.s	@locret				; If negative, stop
00003370 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00003372                            ; loc_72D02:
00003372                            @sendtlloop:
00003372 101A                       		move.b	(a2)+,d0
00003374 1219                       		move.b	(a1)+,d1
00003376 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00003378 6400                       		bcc.s	@senttl		; Branch if not
0000337A D203                       		add.b	d3,d1		; Include additional attenuation
0000337C 6500                       		bcs.s	@senttl		; Branch on overflow
0000337E 4EBA FA12                  		jsr	WriteFMIorII(pc)
00003382                            ; loc_72D12:
00003382                            @senttl:
00003382 51CD FFEE                  		dbf	d5,@sendtlloop
00003386                            ; locret_72D16:
00003386                            @locret:
00003386 4E75                       		rts	
00003388                            ; End of function SendVoiceTL
00003388                            
00003388                            ; ===========================================================================
00003388                            ; byte_72D18:
00003388                            FMInstrumentOperatorTable:
00003388 30                         		dc.b  $30		; Detune/multiple operator 1
00003389 38                         		dc.b  $38		; Detune/multiple operator 3
0000338A 34                         		dc.b  $34		; Detune/multiple operator 2
0000338B 3C                         		dc.b  $3C		; Detune/multiple operator 4
0000338C 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
0000338D 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
0000338E 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
0000338F 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00003390 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00003391 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00003392 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00003393 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00003394 70                         		dc.b  $70		; Secondary decay rate operator 1
00003395 78                         		dc.b  $78		; Secondary decay rate operator 3
00003396 74                         		dc.b  $74		; Secondary decay rate operator 2
00003397 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00003398 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00003399 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
0000339A 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
0000339B 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
0000339C                            FMInstrumentOperatorTable_End
0000339C                            ; byte_72D2C:
0000339C                            FMInstrumentTLTable:
0000339C 40                         		dc.b  $40		; Total level operator 1
0000339D 48                         		dc.b  $48		; Total level operator 3
0000339E 44                         		dc.b  $44		; Total level operator 2
0000339F 4C                         		dc.b  $4C		; Total level operator 4
000033A0                            FMInstrumentTLTable_End
000033A0                            ; ===========================================================================
000033A0                            ; loc_72D30:
000033A0                            cfModulation:
000033A0 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
000033A4 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
000033A8 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
000033AC 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
000033B0 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
000033B4 101C                       		move.b	(a4)+,d0			; Modulation steps...
000033B6 E208                       		lsr.b	#1,d0				; ... divided by 2...
000033B8 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
000033BC 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
000033C0 4E75                       		rts	
000033C2                            ; ===========================================================================
000033C2                            ; loc_72D52:
000033C2                            cfEnableModulation:
000033C2 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
000033C6 4E75                       		rts	
000033C8                            ; ===========================================================================
000033C8                            ; loc_72D58:
000033C8                            cfStopTrack:
000033C8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000033CC 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000033D0 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000033D4 6B00                       		bmi.s	@stoppsg		; Branch if yes
000033D6 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
000033DA 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000033DE 4EBA F98E                  		jsr	FMNoteOff(pc)
000033E2 6000                       		bra.s	@stoppedchannel
000033E4                            ; ===========================================================================
000033E4                            ; loc_72D74:
000033E4                            @stoppsg:
000033E4 4EBA FC2A                  		jsr	PSGNoteOff(pc)
000033E8                            ; loc_72D78:
000033E8                            @stoppedchannel:
000033E8 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
000033EC 6A00 0000                  		bpl.w	@locexit		; Exit if not
000033F0 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
000033F4 7000                       		moveq	#0,d0
000033F6 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
000033FA 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
000033FC 41FA F53E                  		lea	SFX_BGMChannelRAM(pc),a0
00003400 264D                       		movea.l	a5,a3
00003402 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00003406 6600                       		bne.s	@getpointer		; Branch if not
00003408 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0000340C 6A00                       		bpl.s	@getpointer		; Branch if not
0000340E 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00003412 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00003416 6000                       		bra.s	@gotpointer
00003418                            ; ===========================================================================
00003418                            ; loc_72DA8:
00003418                            @getpointer:
00003418 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
0000341A E508                       		lsl.b	#2,d0
0000341C 2A70 0000                  		movea.l	(a0,d0.w),a5
00003420 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00003422 6A00                       		bpl.s	@novoiceupd		; Branch if not
00003424 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00003428                            ; loc_72DB8:
00003428                            @gotpointer:
00003428 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
0000342C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00003430 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00003434 4EBA FE88                  		jsr	SetVoice(pc)
00003438                            ; loc_72DC8:
00003438                            @novoiceupd:
00003438 2A4B                       		movea.l	a3,a5
0000343A 6000                       		bra.s	@locexit
0000343C                            ; ===========================================================================
0000343C                            ; loc_72DCC:
0000343C                            @getpsgptr:
0000343C 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00003440 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00003442 6A00                       		bpl.s	@getchannelptr	; Branch if not
00003444 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00003448 6700                       		beq.s	@gotchannelptr	; Branch if yes
0000344A 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
0000344E 6700                       		beq.s	@gotchannelptr	; Branch if yes
00003450                            ; loc_72DE0:
00003450                            @getchannelptr:
00003450 41FA F4EA                  		lea	SFX_BGMChannelRAM(pc),a0
00003454 E608                       		lsr.b	#3,d0
00003456 2070 0000                  		movea.l	(a0,d0.w),a0
0000345A                            ; loc_72DEA:
0000345A                            @gotchannelptr:
0000345A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
0000345E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00003462 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00003468 6600                       		bne.s	@locexit			; Branch if not
0000346A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00003472                            ; loc_72E02:
00003472                            @locexit:
00003472 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00003474 4E75                       		rts	
00003476                            ; ===========================================================================
00003476                            ; loc_72E06:
00003476                            cfSetPSGNoise:
00003476 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
0000347C 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00003480 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00003484 6600                       		bne.s	@locret				; Return if yes
00003486 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
0000348E                            ; locret_72E1E:
0000348E                            @locret:
0000348E 4E75                       		rts	
00003490                            ; ===========================================================================
00003490                            ; loc_72E20:
00003490                            cfDisableModulation:
00003490 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00003494 4E75                       		rts	
00003496                            ; ===========================================================================
00003496                            ; loc_72E26:
00003496                            cfSetPSGTone:
00003496 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
0000349A 4E75                       		rts	
0000349C                            ; ===========================================================================
0000349C                            ; loc_72E2C:
0000349C                            cfJumpTo:
0000349C 101C                       		move.b	(a4)+,d0	; High byte of offset
0000349E E148                       		lsl.w	#8,d0		; Shift it into place
000034A0 101C                       		move.b	(a4)+,d0	; Low byte of offset
000034A2 D8C0                       		adda.w	d0,a4		; Add to current position
000034A4 534C                       		subq.w	#1,a4		; Put back one byte
000034A6 4E75                       		rts	
000034A8                            ; ===========================================================================
000034A8                            ; loc_72E38:
000034A8                            cfRepeatAtPos:
000034A8 7000                       		moveq	#0,d0
000034AA 101C                       		move.b	(a4)+,d0			; Loop index
000034AC 121C                       		move.b	(a4)+,d1			; Repeat count
000034AE 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
000034B2 6600                       		bne.s	@loopexists			; Branch if yes
000034B4 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
000034B8                            ; loc_72E48:
000034B8                            @loopexists:
000034B8 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
000034BC 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
000034BE 544C                       		addq.w	#2,a4				; Skip target address
000034C0 4E75                       		rts	
000034C2                            ; ===========================================================================
000034C2                            ; loc_72E52:
000034C2                            cfJumpToGosub:
000034C2 7000                       		moveq	#0,d0
000034C4 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
000034C8 5900                       		subq.b	#4,d0				; Add space for another target
000034CA 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
000034CE 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
000034D2 60C8                       		bra.s	cfJumpTo
000034D4                            ; ===========================================================================
000034D4                            ; loc_72E64:
000034D4                            cfOpF9:
000034D4 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
000034D8 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000034DC 4EBA F8C0                  		jsr	WriteFMI(pc)
000034E0 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000034E4 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000034E8 6000 F8B4                  		bra.w	WriteFMI
000034EC                            ; ===========================================================================
000034EC                            ; ---------------------------------------------------------------------------
000034EC                            ; DAC driver
000034EC                            ; ---------------------------------------------------------------------------
000034EC                            Kos_Z80:
000034EC                            		incbin	"sound\z80.bin"
00004C4C                            		even
00004C4C                            
00004C4C                            ; ---------------------------------------------------------------------------
00004C4C                            ; Music data
00004C4C                            ; ---------------------------------------------------------------------------
00004C4C                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
000053B4                            		even
000053B4                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
00005804                            		even
00005804                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00005C62                            		even
00005C62                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000060D0                            		even
000060D0                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
0000651C                            		even
0000651C                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
00006A6C                            		even
00006A6C                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00006C52                            		even
00006C52                            Music88:	incbin	"sound/music/Mus88 - Extra Life.bin"
00006D40                            		even
00006D40                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
0000706C                            		even
0000706C                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00007218                            		even
00007218                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000074B2                            		even
000074B2                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000076CE                            		even
000076CE                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000078EA                            		even
000078EA                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00007A40                            		even
00007A40                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00007B90                            		even
00007B90                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00007CEE                            		even
00007CEE                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00008FBC                            		even
00008FBC                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000090E6                            		even
000090E6                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000091B4                            		even
000091B4                            
000091B4                            ; ---------------------------------------------------------------------------
000091B4                            ; Sound	effect pointers
000091B4                            ; ---------------------------------------------------------------------------
000091B4                            SoundIndex:
000091B4 0000 0000                  ptr_sndA0:	dc.l SoundA0
000091B8 0000 0000                  ptr_sndA1:	dc.l SoundA1
000091BC 0000 0000                  ptr_sndA2:	dc.l SoundA2
000091C0 0000 0000                  ptr_sndA3:	dc.l SoundA3
000091C4 0000 0000                  ptr_sndA4:	dc.l SoundA4
000091C8 0000 0000                  ptr_sndA5:	dc.l SoundA5
000091CC 0000 0000                  ptr_sndA6:	dc.l SoundA6
000091D0 0000 0000                  ptr_sndA7:	dc.l SoundA7
000091D4 0000 0000                  ptr_sndA8:	dc.l SoundA8
000091D8 0000 0000                  ptr_sndA9:	dc.l SoundA9
000091DC 0000 0000                  ptr_sndAA:	dc.l SoundAA
000091E0 0000 0000                  ptr_sndAB:	dc.l SoundAB
000091E4 0000 0000                  ptr_sndAC:	dc.l SoundAC
000091E8 0000 0000                  ptr_sndAD:	dc.l SoundAD
000091EC 0000 0000                  ptr_sndAE:	dc.l SoundAE
000091F0 0000 0000                  ptr_sndAF:	dc.l SoundAF
000091F4 0000 0000                  ptr_sndB0:	dc.l SoundB0
000091F8 0000 0000                  ptr_sndB1:	dc.l SoundB1
000091FC 0000 0000                  ptr_sndB2:	dc.l SoundB2
00009200 0000 0000                  ptr_sndB3:	dc.l SoundB3
00009204 0000 0000                  ptr_sndB4:	dc.l SoundB4
00009208 0000 0000                  ptr_sndB5:	dc.l SoundB5
0000920C 0000 0000                  ptr_sndB6:	dc.l SoundB6
00009210 0000 0000                  ptr_sndB7:	dc.l SoundB7
00009214 0000 0000                  ptr_sndB8:	dc.l SoundB8
00009218 0000 0000                  ptr_sndB9:	dc.l SoundB9
0000921C 0000 0000                  ptr_sndBA:	dc.l SoundBA
00009220 0000 0000                  ptr_sndBB:	dc.l SoundBB
00009224 0000 0000                  ptr_sndBC:	dc.l SoundBC
00009228 0000 0000                  ptr_sndBD:	dc.l SoundBD
0000922C 0000 0000                  ptr_sndBE:	dc.l SoundBE
00009230 0000 0000                  ptr_sndBF:	dc.l SoundBF
00009234 0000 0000                  ptr_sndC0:	dc.l SoundC0
00009238 0000 0000                  ptr_sndC1:	dc.l SoundC1
0000923C 0000 0000                  ptr_sndC2:	dc.l SoundC2
00009240 0000 0000                  ptr_sndC3:	dc.l SoundC3
00009244 0000 0000                  ptr_sndC4:	dc.l SoundC4
00009248 0000 0000                  ptr_sndC5:	dc.l SoundC5
0000924C 0000 0000                  ptr_sndC6:	dc.l SoundC6
00009250 0000 0000                  ptr_sndC7:	dc.l SoundC7
00009254 0000 0000                  ptr_sndC8:	dc.l SoundC8
00009258 0000 0000                  ptr_sndC9:	dc.l SoundC9
0000925C 0000 0000                  ptr_sndCA:	dc.l SoundCA
00009260 0000 0000                  ptr_sndCB:	dc.l SoundCB
00009264 0000 0000                  ptr_sndCC:	dc.l SoundCC
00009268 0000 0000                  ptr_sndCD:	dc.l SoundCD
0000926C 0000 0000                  ptr_sndCE:	dc.l SoundCE
00009270 0000 0000                  ptr_sndCF:	dc.l SoundCF
00009274                            ptr_sndend
00009274                            
00009274                            ; ---------------------------------------------------------------------------
00009274                            ; Special sound effect pointers
00009274                            ; ---------------------------------------------------------------------------
00009274                            SpecSoundIndex:
00009274 0000 0000                  ptr_sndD0:	dc.l SoundD0
00009278                            ptr_specend
00009278                            
00009278                            ; ---------------------------------------------------------------------------
00009278                            ; Sound effect data
00009278                            ; ---------------------------------------------------------------------------
00009278                            SoundA0:	incbin	"sound/sfx/SndA0 - Jump.bin"
0000928E                            		even
0000928E                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000092B8                            		even
000092B8                            SoundA2:	incbin	"sound/sfx/SndA2.bin"
000092D8                            		even
000092D8                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0000930A                            		even
0000930A                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
00009340                            		even
00009340                            SoundA5:	incbin	"sound/sfx/SndA5.bin"
0000936C                            		even
0000936C                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0000939C                            		even
0000939C                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000093CC                            		even
000093CC                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
00009400                            		even
00009400                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
00009412                            		even
00009412                            SoundAA:	incbin	"sound/sfx/SndAA - Splash.bin"
00009454                            		even
00009454                            SoundAB:	incbin	"sound/sfx/SndAB.bin"
00009474                            		even
00009474                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000094A8                            		even
000094A8                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000094DE                            		even
000094DE                            SoundAE:	incbin	"sound/sfx/SndAE - Fireball.bin"
00009528                            		even
00009528                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
00009556                            		even
00009556                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
00009588                            		even
00009588                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000095B4                            		even
000095B4                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
00009604                            		even
00009604                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0000964E                            		even
0000964E                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000096AA                            		even
000096AA                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000096D8                            		even
000096D8                            SoundB6:	incbin	"sound/sfx/SndB6 - Spikes Move.bin"
000096F6                            		even
000096F6                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
00009732                            		even
00009732                            SoundB8:	incbin	"sound/sfx/SndB8.bin"
00009750                            		even
00009750                            SoundB9:	incbin	"sound/sfx/SndB9 - Collapse.bin"
000097B4                            		even
000097B4                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000097DC                            		even
000097DC                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
00009808                            		even
00009808                            SoundBC:	incbin	"sound/sfx/SndBC - Teleport.bin"
0000984A                            		even
0000984A                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0000989E                            		even
0000989E                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000098D8                            		even
000098D8                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0000994A                            		even
0000994A                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
00009978                            		even
00009978                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000099B2                            		even
000099B2                            SoundC2:	incbin	"sound/sfx/SndC2 - Drown Warning.bin"
000099DC                            		even
000099DC                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
00009A56                            		even
00009A56                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
00009A7E                            		even
00009A7E                            SoundC5:	incbin	"sound/sfx/SndC5 - Cash Register.bin"
00009AE6                            		even
00009AE6                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
00009B28                            		even
00009B28                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
00009B56                            		even
00009B56                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
00009B68                            		even
00009B68                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
00009B96                            		even
00009B96                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
00009BC4                            		even
00009BC4                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
00009C10                            		even
00009C10                            SoundCC:	incbin	"sound/sfx/SndCC - Spring.bin"
00009C4A                            		even
00009C4A                            SoundCD:	incbin	"sound/sfx/SndCD - Switch.bin"
00009C58                            		even
00009C58                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
00009C86                            		even
00009C86                            SoundCF:	incbin	"sound/sfx/SndCF - Signpost.bin"
00009CBE                            		even
00009CBE                            
00009CBE                            ; ---------------------------------------------------------------------------
00009CBE                            ; Special sound effect data
00009CBE                            ; ---------------------------------------------------------------------------
00009CBE                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
00009CF8                            		even
00009CF8                            		even
00009CF8                            		
00009CF8                            	ALIGN	$2000
0000A000                            		include	"ErrorHandler.asm"
0000A000                            
0000A000                            ; ===============================================================
0000A000                            ; ---------------------------------------------------------------
0000A000                            ; Error handling and debugging modules
0000A000                            ;
0000A000                            ; (c) 2016-2023, Vladikcomper
0000A000                            ; ---------------------------------------------------------------
0000A000                            ; Error handler functions and calls
0000A000                            ; ---------------------------------------------------------------
0000A000                            
0000A000                            ; ---------------------------------------------------------------
0000A000                            ; Error handler control flags
0000A000                            ; ---------------------------------------------------------------
0000A000                            
0000A000                            ; Screen appearence flags
0000A000 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0000A000 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0000A000                            
0000A000                            ; Advanced execution flags
0000A000                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0000A000 =00000020                  _eh_return			equ	$20
0000A000 =00000040                  _eh_enter_console	equ	$40
0000A000 =00000080                  _eh_align_offset	equ	$80
0000A000                            
0000A000                            ; ---------------------------------------------------------------
0000A000                            ; Errors vector table
0000A000                            ; ---------------------------------------------------------------
0000A000                            
0000A000                            ; Default screen configuration
0000A000 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0000A000                            
0000A000                            ; ---------------------------------------------------------------
0000A000                            
0000A000                            BusError:
0000A018                            
0000A018                            AddressError:
0000A034                            
0000A034                            IllegalInstr:
0000A056                            
0000A056                            ZeroDivide:
0000A070                            
0000A070                            ChkInstr:
0000A08E                            
0000A08E                            TrapvInstr:
0000A0AE                            
0000A0AE                            PrivilegeViol:
0000A0D0                            
0000A0D0                            Trace:
0000A0E4                            
0000A0E4                            Line1010Emu:
0000A104                            
0000A104                            Line1111Emu:
0000A124                            
0000A124                            ErrorExcept:
0000A142                            
0000A142                            
0000A142                            ; ---------------------------------------------------------------
0000A142                            ; Import error handler global functions
0000A142                            ; ---------------------------------------------------------------
0000A142                            
0000A142                            ; Debugger extension functions
0000A142                            __global__ErrorHandler_ConsoleOnly: equ DebuggerExtensions+$0
0000A142                            __global__ErrorHandler_ClearConsole: equ DebuggerExtensions+$26
0000A142                            __global__KDebug_WriteLine_Formatted: equ DebuggerExtensions+$50
0000A142                            __global__KDebug_Write_Formatted: equ DebuggerExtensions+$54
0000A142                            __global__KDebug_FlushLine: equ DebuggerExtensions+$AA
0000A142                            __global__ErrorHandler_PauseConsole: equ DebuggerExtensions+$C2
0000A142                            __global__ErrorHandler_PagesController: equ DebuggerExtensions+$F8
0000A142                            __global__VSync: equ DebuggerExtensions+$158
0000A142                            
0000A142                            ; Error handler & core functions
0000A142                            __global__ErrorHandler: equ ErrorHandler+$0
0000A142                            __global__Error_IdleLoop: equ ErrorHandler+$122
0000A142                            __global__Error_InitConsole: equ ErrorHandler+$13C
0000A142                            __global__Error_MaskStackBoundaries: equ ErrorHandler+$148
0000A142                            __global__Error_DrawOffsetLocation: equ ErrorHandler+$1B2
0000A142                            __global__Error_DrawOffsetLocation2: equ ErrorHandler+$1B6
0000A142                            __global__ErrorHandler_SetupVDP: equ ErrorHandler+$23C
0000A142                            __global__ErrorHandler_VDPConfig: equ ErrorHandler+$274
0000A142                            __global__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$28A
0000A142                            __global__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2C6
0000A142                            __global__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2CA
0000A142                            __global__Art1bpp_Font: equ ErrorHandler+$334
0000A142                            __global__FormatString: equ ErrorHandler+$8F8
0000A142                            __global__Console_Init: equ ErrorHandler+$9CE
0000A142                            __global__Console_Reset: equ ErrorHandler+$A10
0000A142                            __global__Console_InitShared: equ ErrorHandler+$A12
0000A142                            __global__Console_SetPosAsXY_Stack: equ ErrorHandler+$A4E
0000A142                            __global__Console_SetPosAsXY: equ ErrorHandler+$A54
0000A142                            __global__Console_GetPosAsXY: equ ErrorHandler+$A82
0000A142                            __global__Console_StartNewLine: equ ErrorHandler+$AA4
0000A142                            __global__Console_SetBasePattern: equ ErrorHandler+$ACC
0000A142                            __global__Console_SetWidth: equ ErrorHandler+$AE0
0000A142                            __global__Console_WriteLine_WithPattern: equ ErrorHandler+$AF6
0000A142                            __global__Console_WriteLine: equ ErrorHandler+$AF8
0000A142                            __global__Console_Write: equ ErrorHandler+$AFC
0000A142                            __global__Console_WriteLine_Formatted: equ ErrorHandler+$BA8
0000A142                            __global__Console_Write_Formatted: equ ErrorHandler+$BAC
0000A142                            __global__Decomp1bpp: equ ErrorHandler+$BDC
0000A142                            
0000A142                            ; ---------------------------------------------------------------
0000A142                            ; Built-in debuggers
0000A142                            ; ---------------------------------------------------------------
0000A142                            
0000A142                            Debugger_AddressRegisters:
0000A142                            
0000A142 48E7 00FE 41FA 002A        	dc.l	$48E700FE, $41FA002A
0000A14A 4EBA 0000                  	jsr		__global__Console_Write(pc)
0000A14E 49D7 7C06 3F3C 2000 2F3C+  	dc.l	$49D77C06, $3F3C2000, $2F3CE861, $303A41D7
0000A15E 221C                       	dc.w	$221C
0000A160 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation(pc)
0000A164 522F 0002 51CE FFF2 4FEF+  	dc.l	$522F0002, $51CEFFF2, $4FEF0022, $4E75E0FA, $01F026EA, $41646472, $65737320, $52656769
0000A184 7374 6572 733A E0E0        	dc.l	$73746572, $733AE0E0
0000A18C 0000                       	dc.w	$0000
0000A18E                            
0000A18E                            Debugger_Backtrace:
0000A18E                            
0000A18E 41FA 0088                  	dc.l	$41FA0088
0000A192 4EBA 0000                  	jsr		__global__Console_Write(pc)
0000A196 2278 0000 5989 45D7        	dc.l	$22780000, $598945D7
0000A19E 4EBA 0000                  	jsr		__global__Error_MaskStackBoundaries(pc)
0000A1A2 B3CA 6570 0C52 0040 6464+  	dc.l	$B3CA6570, $0C520040, $64642012, $67602040, $02400001, $66581220, $10200C00, $00616604
0000A1C2 4A01 663A 0C00 004E 660A+  	dc.l	$4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A, $30200C40, $61006722, $12004200
0000A1E2 0C40 4E00 6612 0C01 00A8+  	dc.l	$0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01, $00B96606, $0C604EB9, $66102F0A
0000A202 2F09 2208                  	dc.l	$2F092208
0000A206 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation2(pc)
0000A20A 225F 245F 548A 548A B3CA+  	dc.l	$225F245F, $548A548A, $B3CA6490, $4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
0000A22A 0000                       	dc.w	$0000
0000A22C                            
0000A22C                            ; ---------------------------------------------------------------
0000A22C                            ; Debugger extensions
0000A22C                            ; ---------------------------------------------------------------
0000A22C                            
0000A22C                            DebuggerExtensions:
0000A22C                            
0000A22C 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $47EF003C
0000A23C 4EBA 0000                  	jsr		__global__ErrorHandler_SetupVDP(pc)
0000A240 4EBA 0000                  	jsr		__global__Error_InitConsole(pc)
0000A244 4CDF 7FFF                  	dc.l	$4CDF7FFF
0000A248 487A 0000                  	pea		__global__Error_IdleLoop(pc)
0000A24C 2F2F 0012 4E75 2F0B 4E6B+  	dc.l	$2F2F0012, $4E752F0B, $4E6B0C2B, $005D000C, $661A48E7, $C4464BF9, $00C00004, $4DEDFFFC
0000A26C 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Initial(pc), a1
0000A270 4EBA 0000                  	jsr		__global__Console_Reset(pc)
0000A274 4CDF 6223 265F 4E75 487A+  	dc.l	$4CDF6223, $265F4E75, $487A0058, $4E680C28, $005D000C, $67182F0C, $49FA0016, $4FEFFFF0
0000A294 41D7 7E0E                  	dc.l	$41D77E0E
0000A298 4EBA 0000                  	jsr		__global__FormatString(pc)
0000A29C 4FEF 0010 285F 4E75 4218+  	dc.l	$4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00
0000A2BC 6002 3A87 1E18 6EFA 6708+  	dc.l	$60023A87, $1E186EFA, $67080407, $00E067F2, $60F22A5F, $205F7E0E, $4E752F08, $4E680C28
0000A2DC 005D 000C 6708 33FC 9E00+  	dc.l	$005D000C, $670833FC, $9E0000C0, $0004205F, $4E7548E7, $C0D04E6B, $0C2B005D, $000C660C
0000A2FC 3F3C 0000 610C 610A 67FC+  	dc.l	$3F3C0000, $610C610A, $67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178
0000A31C 70F0 C02F 0005 4E75 48E7+  	dc.l	$70F0C02F, $00054E75, $48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2
0000A33C 6B40 41FA 0076 5888 D000+  	dc.l	$6B4041FA, $00765888, $D00064FA, $20106F32, $20404FEF
0000A350 FFF2                       	dc.w	$FFF2
0000A352 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Shared(pc), a1
0000A356 47D7 2A3C 4000 0003        	dc.l	$47D72A3C, $40000003
0000A35E 4EBA 0000                  	jsr		__global__Console_InitShared(pc)
0000A362 2ABC 8230 8406 2A85 487A+  	dc.l	$2ABC8230, $84062A85, $487A000C, $48504CEF, $7FFF0014, $4E754FEF, $000E60B0
0000A37E 2ABA 0000                  	move.l	__global__ErrorHandler_VDPConfig_Nametables(pc), (a5)
0000A382 60AA 41F9 00C0 0004 44D0+  	dc.l	$60AA41F9, $00C00004, $44D06BFC, $44D06AFC, $4E7512BC, $00004E71, $72C01011, $E50812BC
0000A3A2 0040 4E71 C001 1211 0201+  	dc.l	$00404E71, $C0011211, $0201003F, $80014600, $1210B101, $10C0C200, $10C14E75
0000A3BE                            
0000A3BE                            ; WARNING! Don't move! This must be placed directly below "DebuggerExtensions"
0000A3BE                            DebuggerExtensions_ExtraDebuggerList:
0000A3BE 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER	; for button A
0000A3C2 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER	; for button C (not B)
0000A3C6 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER	; for button B (not C)
0000A3CA                            
0000A3CA                            ; ---------------------------------------------------------------
0000A3CA                            ; Error handler blob
0000A3CA                            ; ---------------------------------------------------------------
0000A3CA                            
0000A3CA                            ErrorHandler:
0000A3CA                            
0000A3CA 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $4EBA022E, $49EF004A, $4E682F08, $47EF0040, $4EBA011E
0000A3EA 41FA 02B2 4EBA 0AD6 225C+  	dc.l	$41FA02B2, $4EBA0AD6, $225C45D4, $4EBA0B7A, $4EBA0A72, $49D21C19, $6A025249, $47D10806
0000A40A 0000 670E 41FA 0295 222C+  	dc.l	$0000670E, $41FA0295, $222C0002, $4EBA0164, $504C41FA, $0292222C, $00024EBA, $01562278
0000A42A 0000 45EC 0006 4EBA 01AE+  	dc.l	$000045EC, $00064EBA, $01AE41FA, $02844EBA, $01424EBA, $0A300806, $00066600, $00AA45EF
0000A44A 0004 4EBA 09FE 3F01 7003+  	dc.l	$00044EBA, $09FE3F01, $70034EBA, $09C8303C, $64307A07, $4EBA0132, $321F7011, $4EBA09B6
0000A46A 303C 6130 7A06 4EBA 0120+  	dc.l	$303C6130, $7A064EBA, $0120303C, $73707A00, $2F0C45D7, $4EBA0112, $584F0806, $00016714
0000A48A 43FA 0240 45D7 4EBA 0AE4+  	dc.l	$43FA0240, $45D74EBA, $0AE443FA, $024145D4, $4EBA0AD6, $584F4EBA, $09AA5241, $70014EBA
0000A4AA 0974 2038 0078 41FA 022F+  	dc.l	$09742038, $007841FA, $022F4EBA, $010A2038, $007041FA, $022B4EBA, $00FE4EBA, $09A82278
0000A4CA 0000 45D4 5389 6140 4EBA+  	dc.l	$000045D4, $53896140, $4EBA0978, $7A199A41, $6B0A6148, $4EBA005A, $51CDFFFA, $08060005
0000A4EA 660A 4E71 60FC 7200 4EBA+  	dc.l	$660A4E71, $60FC7200, $4EBA09A2, $2ECB4CDF, $7FFF487A, $FFEE2F2F, $FFC44E75, $43FA0152
0000A50A 45FA 01F2 4EFA 0888 223C+  	dc.l	$45FA01F2, $4EFA0888, $223C00FF, $FFFF2409, $C4812242, $240AC481, $24424E75, $4FEFFFD0
0000A52A 41D7 7EFF 20FC 2853 5029+  	dc.l	$41D77EFF, $20FC2853, $502930FC, $3A206018, $4FEFFFD0, $41D77EFF, $30FC202B, $320A924C
0000A54A 4EBA 05A4 30FC 3A20 7005+  	dc.l	$4EBA05A4, $30FC3A20, $700572EC, $B5C96502, $72EE10C1, $321A4EBA, $05AC10FC, $002051C8
0000A56A FFEA 4218 41D7 7200 4EBA+  	dc.l	$FFEA4218, $41D77200, $4EBA094C, $4FEF0030, $4E754EBA, $09482F01, $2F0145D7, $43FA013C
0000A58A 4EBA 09E6 504F 4E75 4FEF+  	dc.l	$4EBA09E6, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA055E
0000A5AA 4218 41D7 7200 4EBA 090E+  	dc.l	$421841D7, $72004EBA, $090E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
0000A5CA 0C5A 4EF9 6604 2212 60A8+  	dc.l	$0C5A4EF9, $66042212, $60A84EBA, $09A043FA, $01174EFA, $09945989, $4EBAFF2E, $B3CA650C
0000A5EA 0C52 0040 650A 548A B3CA+  	dc.l	$0C520040, $650A548A, $B3CA64F4, $72004E75, $221267F2, $08010000, $66EC4E75, $4BF900C0
0000A60A 0004 4DED FFFC 4A55 44D5+  	dc.l	$00044DED, $FFFC4A55, $44D569FC, $41FA0026, $30186A04, $3A8060F8, $70002ABC, $40000000
0000A62A 2C80 2ABC 4000 0010 2C80+  	dc.l	$2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75, $80048134, $85008700, $8B008C81
0000A64A 8D00 8F02 9011 9100 9200+  	dc.l	$8D008F02, $90119100, $92008220, $84040000, $44000000, $00000001, $00100011, $01000101
0000A66A 0110 0111 1000 1001 1010+  	dc.l	$01100111, $10001001, $10101011, $11001101, $11101111, $FFFF0EEE, $FFF200CE, $FFF20EEA
0000A68A FFF2 0E86 FFF2 4000 0002+  	dc.l	$FFF20E86, $FFF24000, $00020028, $00280000, $008000FF, $EAE0FA01, $F02600EA, $41646472
0000A6AA 6573 733A 2000 EA4F 6666+  	dc.l	$6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C, $6C65723A, $2000EC83, $20E8BFEC
0000A6CA C800 FA10 E875 7370 3A20+  	dc.l	$C800FA10, $E8757370, $3A20EC83, $00FA03E8, $73723A20, $EC8100EA, $56496E74, $3A2000EA
0000A6EA 4849 6E74 3A20 00E8 3C75+  	dc.l	$48496E74, $3A2000E8, $3C756E64, $6566696E, $65643E00, $02F70000, $00000000, $0000183C
0000A70A 3C18 1800 1800 6C6C 6C00+  	dc.l	$3C181800, $18006C6C, $6C000000, $00006C6C, $FE6CFE6C, $6C00187E, $C07C06FC, $180000C6
0000A72A 0C18 3060 C600 386C 3876+  	dc.l	$0C183060, $C600386C, $3876CCCC, $76001818, $30000000, $00001830, $60606030, $18006030
0000A74A 1818 1830 6000 00EE 7CFE+  	dc.l	$18181830, $600000EE, $7CFE7CEE, $00000018, $187E1818, $00000000, $00001818, $30000000
0000A76A 00FE 0000 0000 0000 0000+  	dc.l	$00FE0000, $00000000, $00000038, $3800060C, $183060C0, $80007CC6, $CEDEF6E6, $7C001878
0000A78A 1818 1818 7E00 7CC6 0C18+  	dc.l	$18181818, $7E007CC6, $0C183066, $FE007CC6, $063C06C6, $7C000C1C, $3C6CFE0C, $0C00FEC0
0000A7AA FC06 06C6 7C00 7CC6 C0FC+  	dc.l	$FC0606C6, $7C007CC6, $C0FCC6C6, $7C00FEC6, $060C1818, $18007CC6, $C67CC6C6, $7C007CC6
0000A7CA C67E 06C6 7C00 001C 1C00+  	dc.l	$C67E06C6, $7C00001C, $1C00001C, $1C000018, $18000018, $18300C18, $30603018, $0C000000
0000A7EA FE00 00FE 0000 6030 180C+  	dc.l	$FE0000FE, $00006030, $180C1830, $60007CC6, $060C1800, $18007CC6, $C6DEDCC0, $7E00386C
0000A80A C6C6 FEC6 C600 FC66 667C+  	dc.l	$C6C6FEC6, $C600FC66, $667C6666, $FC003C66, $C0C0C066, $3C00F86C, $6666666C, $F800FEC2
0000A82A C0F8 C0C2 FE00 FE62 607C+  	dc.l	$C0F8C0C2, $FE00FE62, $607C6060, $F0007CC6, $C0C0DEC6, $7C00C6C6, $C6FEC6C6, $C6003C18
0000A84A 1818 1818 3C00 3C18 1818+  	dc.l	$18181818, $3C003C18, $1818D8D8, $7000C6CC, $D8F0D8CC, $C600F060, $60606062, $FE00C6EE
0000A86A FED6 D6C6 C600 C6E6 E6F6+  	dc.l	$FED6D6C6, $C600C6E6, $E6F6DECE, $C6007CC6, $C6C6C6C6, $7C00FC66, $667C6060, $F0007CC6
0000A88A C6C6 C6D6 7C06 FCC6 C6FC+  	dc.l	$C6C6C6D6, $7C06FCC6, $C6FCD8CC, $C6007CC6, $C07C06C6, $7C007E5A, $18181818, $3C00C6C6
0000A8AA C6C6 C6C6 7C00 C6C6 C6C6+  	dc.l	$C6C6C6C6, $7C00C6C6, $C6C66C38, $1000C6C6, $D6D6FEEE, $C600C66C, $3838386C, $C6006666
0000A8CA 663C 1818 3C00 FE86 0C18+  	dc.l	$663C1818, $3C00FE86, $0C183062, $FE007C60, $60606060, $7C00C060, $30180C06, $02007C0C
0000A8EA 0C0C 0C0C 7C00 1038 6CC6+  	dc.l	$0C0C0C0C, $7C001038, $6CC60000, $00000000, $00000000, $00FF3030, $18000000, $00000000
0000A90A 780C 7CCC 7E00 E060 7C66+  	dc.l	$780C7CCC, $7E00E060, $7C666666, $FC000000, $7CC6C0C6, $7C001C0C, $7CCCCCCC, $7E000000
0000A92A 7CC6 FEC0 7C00 1C36 30FC+  	dc.l	$7CC6FEC0, $7C001C36, $30FC3030, $78000000, $76CEC67E, $067CE060, $7C666666, $E6001800
0000A94A 3818 1818 3C00 0C00 1C0C+  	dc.l	$38181818, $3C000C00, $1C0C0C0C, $CC78E060, $666C786C, $E6001818, $18181818, $1C000000
0000A96A 6CFE D6D6 C600 0000 DC66+  	dc.l	$6CFED6D6, $C6000000, $DC666666, $66000000, $7CC6C6C6, $7C000000, $DC66667C, $60F00000
0000A98A 76CC CC7C 0C1E 0000 DC66+  	dc.l	$76CCCC7C, $0C1E0000, $DC666060, $F0000000, $7CC07C06, $7C003030, $FC303036, $1C000000
0000A9AA CCCC CCCC 7600 0000 C6C6+  	dc.l	$CCCCCCCC, $76000000, $C6C66C38, $10000000, $C6C6D6FE, $6C000000, $C66C386C, $C6000000
0000A9CA C6C6 CE76 067C 0000 FC98+  	dc.l	$C6C6CE76, $067C0000, $FC983064, $FC000E18, $18701818, $0E001818, $18001818, $18007018
0000A9EA 180E 1818 7000 76DC 0000+  	dc.l	$180E1818, $700076DC, $00000000, $000043FA, $05C80C59, $DEB26672, $70FED059, $74FC7600
0000AA0A 4841 0241 00FF D241 D241+  	dc.l	$48410241, $00FFD241, $D241B240, $625C675E, $20311000, $675847F1, $08004841, $7000301B
0000AA2A B253 654C 43F3 08FE 45E9+  	dc.l	$B253654C, $43F308FE, $45E9FFFC, $E248C042, $B2730000, $65146204, $D6C0601A, $47F30004
0000AA4A 200A 908B 6AE6 594B 600C+  	dc.l	$200A908B, $6AE6594B, $600C45F3, $00FC200A, $908B6AD8, $47D2925B, $7400341B, $D3C24841
0000AA6A 4241 4841 D283 7000 4E75+  	dc.l	$42414841, $D2837000, $4E7570FF, $4E754841, $70003001, $D6805283, $323CFFFF, $48415941
0000AA8A 6A8E 70FF 4E75 47FA 0530+  	dc.l	$6A8E70FF, $4E7547FA, $05300C5B, $DEB2664A, $D6D37800, $72007400, $45D351CC, $00061619
0000AAAA 7807 D603 D341 5242 B252+  	dc.l	$7807D603, $D3415242, $B252620A, $65ECB42A, $00026712, $65E4584A, $B25262FA, $65DCB42A
0000AACA 0002 65D6 66F0 10EA 0003+  	dc.l	$000265D6, $66F010EA, $0003670A, $51CFFFC6, $4E9464C0, $4E755348, $4E757000, $4E754EFA
0000AAEA 0024 4EFA 0018 760F 3401+  	dc.l	$00244EFA, $0018760F, $3401E84A, $C44310FB, $205E51CF, $004C4E94, $64464E75, $48416104
0000AB0A 654A 4841 7404 760F E579+  	dc.l	$654A4841, $7404760F, $E5791801, $C84310FB, $403E51CF, $00044E94, $6532E579, $1801C843
0000AB2A 10FB 402C 51CF 0004 4E94+  	dc.l	$10FB402C, $51CF0004, $4E946520, $E5791801, $C84310FB, $401A51CF, $00044E94, $650EE579
0000AB4A C243 10FB 100A 51CF 0004+  	dc.l	$C24310FB, $100A51CF, $00044ED4, $4E753031, $32333435, $36373839, $41424344, $45464EFA
0000AB6A 0026 4EFA 001A 7407 7018+  	dc.l	$00264EFA, $001A7407, $7018D201, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754841
0000AB8A 6104 6518 4841 740F 7018+  	dc.l	$61046518, $4841740F, $7018D241, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754EFA
0000ABAA 0010 4EFA 0048 47FA 009A+  	dc.l	$00104EFA, $004847FA, $009A0241, $00FF6004, $47FA008C, $42007609, $381B3403, $924455CA
0000ABCA FFFC D244 9443 4442 8002+  	dc.l	$FFFCD244, $94434442, $8002670E, $06020030, $10C251CF, $00064E94, $6510381B, $6ADC0601
0000ABEA 0030 10C1 51CF 0004 4ED4+  	dc.l	$003010C1, $51CF0004, $4ED44E75, $47FA002E, $42007609, $281B3403, $928455CA, $FFFCD284
0000AC0A 9443 4442 8002 670E 0602+  	dc.l	$94434442, $8002670E, $06020030, $10C251CF, $00064E94, $65D4281B, $6ADC609E, $3B9ACA00
0000AC2A 05F5 E100 0098 9680 000F+  	dc.l	$05F5E100, $00989680, $000F4240, $000186A0, $00002710, $FFFF03E8, $0064000A, $FFFF2710
0000AC4A 03E8 0064 000A FFFF 48C1+  	dc.l	$03E80064, $000AFFFF, $48C16008, $4EFA0006, $488148C1, $48E75060, $4EBAFD94, $66182E81
0000AC6A 4EBA FE24 4CDF 060A 650A+  	dc.l	$4EBAFE24, $4CDF060A, $650A0803, $00036604, $4EFA00B6, $4E754CDF, $060A0803, $00026708
0000AC8A 47FA 000A 4EFA 00B4 70FF+  	dc.l	$47FA000A, $4EFA00B4, $70FF60DE, $3C756E6B, $6E6F776E, $3E0010FC, $002B51CF, $00064E94
0000ACAA 65D2 4841 4A41 6700 FE5A+  	dc.l	$65D24841, $4A416700, $FE5A6000, $FE520803, $000366C0, $4EFAFE46, $48E7F810, $10D95FCF
0000ACCA FFFC 6E14 6718 1620 7470+  	dc.l	$FFFC6E14, $67181620, $7470C403, $4EBB201A, $64EA4CDF, $081F4E75, $4E9464E0, $60F45348
0000ACEA 4E94 4CDF 081F 4E75 47FA+  	dc.l	$4E944CDF, $081F4E75, $47FAFDF4, $B702D402, $4EFB205A, $4E714E71, $47FAFEA4, $B702D402
0000AD0A 4EFB 204A 4E71 4E71 47FA+  	dc.l	$4EFB204A, $4E714E71, $47FAFE54, $B702D402, $4EFB203A, $53484E75, $47FAFF2E, $14030242
0000AD2A 0003 D442 4EFB 2026 4A40+  	dc.l	$0003D442, $4EFB2026, $4A406B08, $4A816716, $4EFAFF64, $4EFAFF78, $265A10DB, $57CFFFFC
0000AD4A 67D2 4E94 64F4 4E75 5248+  	dc.l	$67D24E94, $64F44E75, $5248603C, $504B321A, $4ED3584B, $221A4ED3, $52486022, $504B321A
0000AD6A 6004 584B 221A 6A08 4481+  	dc.l	$6004584B, $221A6A08, $448110FC, $002D6004, $10FC002B, $51CF0006, $4E9465CA, $4ED351CF
0000AD8A 0006 4E94 65C0 10D9 51CF+  	dc.l	$00064E94, $65C010D9, $51CFFFBC, $4ED44BF9, $00C00004, $4DEDFFFC, $4A516B10, $2A9941D2
0000ADAA 3818 4EBA 01F8 43E9 0020+  	dc.l	$38184EBA, $01F843E9, $002060EC, $544941FA, $00482ABC, $C0000000, $70007603, $3C803419
0000ADCA 3C82 3419 6AFA 7200 4EB0+  	dc.l	$3C823419, $6AFA7200, $4EB02010, $51CBFFEE, $2A194E63, $26C526D9, $26D936FC, $5D002A85
0000ADEA 7000 3219 6112 2ABC 4000+  	dc.l	$70003219, $61122ABC, $40000000, $72006108, $3ABC8174, $2A854E75, $2C802C80, $2C802C80
0000AE0A 2C80 2C80 2C80 2C80 51C9+  	dc.l	$2C802C80, $2C802C80, $51C9FFEE, $4E754CAF, $00030004, $48E76010, $4E6B0C2B, $005D000C
0000AE2A 661A 3413 0242 E000 C2EB+  	dc.l	$661A3413, $0242E000, $C2EB000A, $D441D440, $D4403682, $23DB00C0, $000436DB, $4CDF0806
0000AE4A 4E75 2F0B 4E6B 0C2B 005D+  	dc.l	$4E752F0B, $4E6B0C2B, $005D000C, $66127200, $32130241, $1FFF82EB, $000A2001, $4840E248
0000AE6A 265F 4E75 2F0B 4E6B 0C2B+  	dc.l	$265F4E75, $2F0B4E6B, $0C2B005D, $000C6618, $3F003013, $D06B000A, $02405FFF, $368023DB
0000AE8A 00C0 0004 36DB 301F 265F+  	dc.l	$00C00004, $36DB301F, $265F4E75, $2F0B4E6B, $0C2B005D, $000C6604, $37410008, $265F4E75
0000AEAA 2F0B 4E6B 0C2B 005D 000C+  	dc.l	$2F0B4E6B, $0C2B005D, $000C6606, $584B36C1, $36C1265F, $4E7561D4, $487AFFAA, $48E77E12
0000AECA 4E6B 0C2B 005D 000C 661C+  	dc.l	$4E6B0C2B, $005D000C, $661C2A1B, $4C93005C, $48464DF9, $00C00000, $72001218, $6E0E6B28
0000AEEA 4893 001C 2705 4CDF 487E+  	dc.l	$4893001C, $27054CDF, $487E4E75, $51CB000E, $D642DA86, $0885001D, $2D450004, $D2443C81
0000AF0A 7200 1218 6EE6 67D8 0241+  	dc.l	$72001218, $6EE667D8, $0241001E, $4EFB1002, $DA86721D, $03856020, $6026602A, $6032603A
0000AF2A 1418 6014 1818 60D8 6036+  	dc.l	$14186014, $181860D8, $60361218, $D2417680, $4843CA83, $48418A81, $36022D45, $000460C0
0000AF4A 0244 07FF 60BA 0244 07FF+  	dc.l	$024407FF, $60BA0244, $07FF0044, $200060B0, $024407FF, $00444000, $60A60044, $600060A0
0000AF6A 3F04 1E98 381F 6098 487A+  	dc.l	$3F041E98, $381F6098, $487AFEFA, $2F0C49FA, $00164FEF, $FFF041D7, $7E0E4EBA, $FD3C4FEF
0000AF8A 0010 285F 4E75 4218 4447+  	dc.l	$0010285F, $4E754218, $44470647, $000F90C7, $2F084EBA, $FF28205F, $7E0E4E75, $741E1018
0000AFAA 1200 E609 C242 3CB1 1000+  	dc.l	$1200E609, $C2423CB1, $1000D000, $C0423CB1, $000051CC, $FFEA4E75
0000AFC2                            
0000AFC2                            ; ---------------------------------------------------------------
0000AFC2                            ; WARNING!
0000AFC2                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
0000AFC2                            ;	Symbol data should be appended here after ROM is compiled
0000AFC2                            ;	by ConvSym utility, otherwise debugger modules won't be able
0000AFC2                            ;	to resolve symbol names.
0000AFC2                            ; ---------------------------------------------------------------
0000AFC2                            ; ---------------------------------------------------------------
